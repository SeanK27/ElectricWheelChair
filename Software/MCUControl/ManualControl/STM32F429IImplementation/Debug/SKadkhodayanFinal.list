
SKadkhodayanFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ee8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001224  08008098  08008098  00009098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092bc  080092bc  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  080092bc  080092bc  0000a2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c4  080092c4  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c4  080092c4  0000a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092c8  080092c8  0000a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080092cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00025d54  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025dc0  20025dc0  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000162a6  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037d6  00000000  00000000  00021342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00024b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cf  00000000  00000000  000260f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e17  00000000  00000000  000271bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c35c  00000000  00000000  0004ffd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef738  00000000  00000000  0006c332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015ba6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000600c  00000000  00000000  0015bab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00161abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008080 	.word	0x08008080

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08008080 	.word	0x08008080

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <getScreenNum>:
static EXTI_HandleTypeDef LCDTouchIRQ;
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

uint8_t getScreenNum() {
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

	return screenNum;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <getScreenNum+0x14>)
 8000586:	781b      	ldrb	r3, [r3, #0]
}
 8000588:	4618      	mov	r0, r3
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000088 	.word	0x20000088

08000598 <ApplicationInit>:

void ApplicationInit(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 800059c:	f002 fc30 	bl	8002e00 <initialise_monitor_handles>
    LTCD__Init();
 80005a0:	f000 f9c8 	bl	8000934 <LTCD__Init>
    LTCD_Layer_Init(0);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f985 	bl	80008b4 <LTCD_Layer_Init>
    LCD_Clear(0,LCD_COLOR_WHITE);
 80005aa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fb1c 	bl	8000bec <LCD_Clear>

    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005b4:	f000 fbf2 	bl	8000d9c <InitializeLCDTouch>

	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b8:	4b03      	ldr	r3, [pc, #12]	@ (80005c8 <ApplicationInit+0x30>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	719a      	strb	r2, [r3, #6]

	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
 80005be:	f000 f805 	bl	80005cc <LCDTouchScreenInterruptGPIOInit>
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	2000008c 	.word	0x2000008c

080005cc <LCDTouchScreenInterruptGPIOInit>:

// TouchScreen Interrupt
#if TOUCH_INTERRUPT_ENABLED == 1

void LCDTouchScreenInterruptGPIOInit(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e4:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005e6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005ea:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]

    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005fe:	f043 0301 	orr.w	r3, r3, #1
 8000602:	6313      	str	r3, [r2, #48]	@ 0x30
 8000604:	4b0a      	ldr	r3, [pc, #40]	@ (8000630 <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	4619      	mov	r1, r3
 8000614:	4807      	ldr	r0, [pc, #28]	@ (8000634 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000616:	f003 fa9b 	bl	8003b50 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800061a:	2028      	movs	r0, #40	@ 0x28
 800061c:	f003 fa49 	bl	8003ab2 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 8000622:	4a06      	ldr	r2, [pc, #24]	@ (800063c <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000624:	601a      	str	r2, [r3, #0]

}
 8000626:	bf00      	nop
 8000628:	3718      	adds	r7, #24
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40020000 	.word	0x40020000
 8000638:	20000094 	.word	0x20000094
 800063c:	0600000f 	.word	0x0600000f

08000640 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000646:	2028      	movs	r0, #40	@ 0x28
 8000648:	f003 fa41 	bl	8003ace <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 800064c:	2300      	movs	r3, #0
 800064e:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000650:	4b30      	ldr	r3, [pc, #192]	@ (8000714 <EXTI15_10_IRQHandler+0xd4>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000656:	e006      	b.n	8000666 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000658:	204c      	movs	r0, #76	@ 0x4c
 800065a:	f002 fa68 	bl	8002b2e <STMPE811_Read>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <EXTI15_10_IRQHandler+0xd4>)
 8000664:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000666:	4b2b      	ldr	r3, [pc, #172]	@ (8000714 <EXTI15_10_IRQHandler+0xd4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f4      	beq.n	8000658 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800066e:	200a      	movs	r0, #10
 8000670:	f000 fb9f 	bl	8000db2 <ReadRegisterFromTouchModule>
 8000674:	4603      	mov	r3, r0
 8000676:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000678:	2100      	movs	r1, #0
 800067a:	200a      	movs	r0, #10
 800067c:	f000 fba7 	bl	8000dce <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000680:	200b      	movs	r0, #11
 8000682:	f000 fb96 	bl	8000db2 <ReadRegisterFromTouchModule>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <EXTI15_10_IRQHandler+0xd8>)
 800068c:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800068e:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <EXTI15_10_IRQHandler+0xd8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000698:	797b      	ldrb	r3, [r7, #5]
 800069a:	4619      	mov	r1, r3
 800069c:	200b      	movs	r0, #11
 800069e:	f000 fb96 	bl	8000dce <WriteDataToTouchModule>

	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 80006a2:	2040      	movs	r0, #64	@ 0x40
 80006a4:	f000 fb85 	bl	8000db2 <ReadRegisterFromTouchModule>
 80006a8:	4603      	mov	r3, r0
 80006aa:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80006ac:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da01      	bge.n	80006b8 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006b4:	2301      	movs	r3, #1
 80006b6:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d009      	beq.n	80006d2 <EXTI15_10_IRQHandler+0x92>
		//DetermineTouchPosition(&StaticTouchData);
		/* Touch valid */
		//printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
		//LCD_Clear(0, LCD_COLOR_RED);

		screenNum = !screenNum;
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <EXTI15_10_IRQHandler+0xdc>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bf0c      	ite	eq
 80006c6:	2301      	moveq	r3, #1
 80006c8:	2300      	movne	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b13      	ldr	r3, [pc, #76]	@ (800071c <EXTI15_10_IRQHandler+0xdc>)
 80006d0:	701a      	strb	r2, [r3, #0]
		/* Touch not pressed */
		//printf("\nNot pressed \n");
		//LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006d2:	2101      	movs	r1, #1
 80006d4:	204b      	movs	r0, #75	@ 0x4b
 80006d6:	f002 fa3b 	bl	8002b50 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006da:	2100      	movs	r1, #0
 80006dc:	204b      	movs	r0, #75	@ 0x4b
 80006de:	f002 fa37 	bl	8002b50 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	4619      	mov	r1, r3
 80006e6:	200a      	movs	r0, #10
 80006e8:	f000 fb71 	bl	8000dce <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 80006ec:	2103      	movs	r1, #3
 80006ee:	480c      	ldr	r0, [pc, #48]	@ (8000720 <EXTI15_10_IRQHandler+0xe0>)
 80006f0:	f003 fa16 	bl	8003b20 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80006f4:	2028      	movs	r0, #40	@ 0x28
 80006f6:	f003 fa04 	bl	8003b02 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006fa:	2028      	movs	r0, #40	@ 0x28
 80006fc:	f003 f9d9 	bl	8003ab2 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000700:	797b      	ldrb	r3, [r7, #5]
 8000702:	4619      	mov	r1, r3
 8000704:	200b      	movs	r0, #11
 8000706:	f000 fb62 	bl	8000dce <WriteDataToTouchModule>

}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200000a0 	.word	0x200000a0
 8000718:	2000009c 	.word	0x2000009c
 800071c:	20000088 	.word	0x20000088
 8000720:	20000094 	.word	0x20000094

08000724 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
 800072e:	4b5a      	ldr	r3, [pc, #360]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000732:	4a59      	ldr	r2, [pc, #356]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000734:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000738:	6453      	str	r3, [r2, #68]	@ 0x44
 800073a:	4b57      	ldr	r3, [pc, #348]	@ (8000898 <LCD_GPIO_Init+0x174>)
 800073c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800073e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000742:	61bb      	str	r3, [r7, #24]
 8000744:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	4b53      	ldr	r3, [pc, #332]	@ (8000898 <LCD_GPIO_Init+0x174>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a52      	ldr	r2, [pc, #328]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b50      	ldr	r3, [pc, #320]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b4c      	ldr	r3, [pc, #304]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a4b      	ldr	r2, [pc, #300]	@ (8000898 <LCD_GPIO_Init+0x174>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b49      	ldr	r3, [pc, #292]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b45      	ldr	r3, [pc, #276]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a44      	ldr	r2, [pc, #272]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b42      	ldr	r3, [pc, #264]	@ (8000898 <LCD_GPIO_Init+0x174>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b3e      	ldr	r3, [pc, #248]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	4a3d      	ldr	r2, [pc, #244]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a36      	ldr	r2, [pc, #216]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007c0:	f043 0320 	orr.w	r3, r3, #32
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f003 0320 	and.w	r3, r3, #32
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a2f      	ldr	r2, [pc, #188]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <LCD_GPIO_Init+0x174>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80007ee:	f641 0358 	movw	r3, #6232	@ 0x1858
 80007f2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000800:	230e      	movs	r3, #14
 8000802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4824      	ldr	r0, [pc, #144]	@ (800089c <LCD_GPIO_Init+0x178>)
 800080c:	f003 f9a0 	bl	8003b50 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000810:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000814:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4820      	ldr	r0, [pc, #128]	@ (80008a0 <LCD_GPIO_Init+0x17c>)
 800081e:	f003 f997 	bl	8003b50 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000822:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	481d      	ldr	r0, [pc, #116]	@ (80008a4 <LCD_GPIO_Init+0x180>)
 8000830:	f003 f98e 	bl	8003b50 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000834:	2348      	movs	r3, #72	@ 0x48
 8000836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	481a      	ldr	r0, [pc, #104]	@ (80008a8 <LCD_GPIO_Init+0x184>)
 8000840:	f003 f986 	bl	8003b50 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4816      	ldr	r0, [pc, #88]	@ (80008ac <LCD_GPIO_Init+0x188>)
 8000852:	f003 f97d 	bl	8003b50 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000856:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800085a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4813      	ldr	r0, [pc, #76]	@ (80008b0 <LCD_GPIO_Init+0x18c>)
 8000864:	f003 f974 	bl	8003b50 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000868:	2303      	movs	r3, #3
 800086a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800086c:	2309      	movs	r3, #9
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <LCD_GPIO_Init+0x17c>)
 8000878:	f003 f96a 	bl	8003b50 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800087c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <LCD_GPIO_Init+0x18c>)
 800088a:	f003 f961 	bl	8003b50 <HAL_GPIO_Init>
}
 800088e:	bf00      	nop
 8000890:	3730      	adds	r7, #48	@ 0x30
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	40020400 	.word	0x40020400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020c00 	.word	0x40020c00
 80008ac:	40021400 	.word	0x40021400
 80008b0:	40021800 	.word	0x40021800

080008b4 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b090      	sub	sp, #64	@ 0x40
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008c2:	23f0      	movs	r3, #240	@ 0xf0
 80008c4:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008ca:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008ce:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008d0:	2302      	movs	r3, #2
 80008d2:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80008d4:	23ff      	movs	r3, #255	@ 0xff
 80008d6:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008e2:	2305      	movs	r3, #5
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <LTCD_Layer_Init+0x78>)
 80008ee:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 80008f0:	23f0      	movs	r3, #240	@ 0xf0
 80008f2:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 80008f4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 800090c:	79fa      	ldrb	r2, [r7, #7]
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	4806      	ldr	r0, [pc, #24]	@ (8000930 <LTCD_Layer_Init+0x7c>)
 8000916:	f004 fd5d 	bl	80053d4 <HAL_LTDC_ConfigLayer>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000920:	f000 fa36 	bl	8000d90 <LCD_Error_Handler>
	}
}
 8000924:	bf00      	nop
 8000926:	3740      	adds	r7, #64	@ 0x40
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000180 	.word	0x20000180
 8000930:	200000a4 	.word	0x200000a4

08000934 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <LTCD__Init+0xb0>)
 800093a:	4a2b      	ldr	r2, [pc, #172]	@ (80009e8 <LTCD__Init+0xb4>)
 800093c:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <LTCD__Init+0xb0>)
 8000940:	2209      	movs	r2, #9
 8000942:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000944:	4b27      	ldr	r3, [pc, #156]	@ (80009e4 <LTCD__Init+0xb0>)
 8000946:	2201      	movs	r2, #1
 8000948:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <LTCD__Init+0xb0>)
 800094c:	221d      	movs	r2, #29
 800094e:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000950:	4b24      	ldr	r3, [pc, #144]	@ (80009e4 <LTCD__Init+0xb0>)
 8000952:	2203      	movs	r2, #3
 8000954:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <LTCD__Init+0xb0>)
 8000958:	f240 120d 	movw	r2, #269	@ 0x10d
 800095c:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800095e:	4b21      	ldr	r3, [pc, #132]	@ (80009e4 <LTCD__Init+0xb0>)
 8000960:	f240 1243 	movw	r2, #323	@ 0x143
 8000964:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000966:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <LTCD__Init+0xb0>)
 8000968:	f240 1217 	movw	r2, #279	@ 0x117
 800096c:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800096e:	4b1d      	ldr	r3, [pc, #116]	@ (80009e4 <LTCD__Init+0xb0>)
 8000970:	f240 1247 	movw	r2, #327	@ 0x147
 8000974:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000976:	4b1b      	ldr	r3, [pc, #108]	@ (80009e4 <LTCD__Init+0xb0>)
 8000978:	2200      	movs	r2, #0
 800097a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <LTCD__Init+0xb0>)
 8000980:	2200      	movs	r2, #0
 8000982:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <LTCD__Init+0xb0>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800098e:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <LTCD__Init+0xb8>)
 8000990:	2208      	movs	r2, #8
 8000992:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000994:	4b15      	ldr	r3, [pc, #84]	@ (80009ec <LTCD__Init+0xb8>)
 8000996:	22c0      	movs	r2, #192	@ 0xc0
 8000998:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <LTCD__Init+0xb8>)
 800099c:	2204      	movs	r2, #4
 800099e:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <LTCD__Init+0xb8>)
 80009a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009a6:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009a8:	4810      	ldr	r0, [pc, #64]	@ (80009ec <LTCD__Init+0xb8>)
 80009aa:	f005 fb6d 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <LTCD__Init+0xb0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009b4:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <LTCD__Init+0xb0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009ba:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <LTCD__Init+0xb0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <LTCD__Init+0xb0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009c6:	f7ff fead 	bl	8000724 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <LTCD__Init+0xb0>)
 80009cc:	f004 fc32 	bl	8005234 <HAL_LTDC_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80009d6:	f000 f9db 	bl	8000d90 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80009da:	f000 fb55 	bl	8001088 <ili9341_Init>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200000a4 	.word	0x200000a4
 80009e8:	40016800 	.word	0x40016800
 80009ec:	2000014c 	.word	0x2000014c

080009f0 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	460b      	mov	r3, r1
 80009fc:	80bb      	strh	r3, [r7, #4]
 80009fe:	4613      	mov	r3, r2
 8000a00:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a02:	88ba      	ldrh	r2, [r7, #4]
 8000a04:	4613      	mov	r3, r2
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	1a9b      	subs	r3, r3, r2
 8000a0a:	011b      	lsls	r3, r3, #4
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	4413      	add	r3, r2
 8000a12:	4905      	ldr	r1, [pc, #20]	@ (8000a28 <LCD_Draw_Pixel+0x38>)
 8000a14:	887a      	ldrh	r2, [r7, #2]
 8000a16:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000180 	.word	0x20000180

08000a2c <LCD_Draw_Circle_Fill>:
 * These functions are simple examples. Most computer graphics like OpenGl and stm's graphics library use a state machine. Where you first call some function like SetColor(color), SetPosition(x,y), then DrawSqure(size)
 * Instead all of these are explicit where color, size, and position are passed in.
 * There is tons of ways to handle drawing. I dont think it matters too much.
 */
void LCD_Draw_Circle_Fill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t color)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	80fb      	strh	r3, [r7, #6]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80bb      	strh	r3, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	807b      	strh	r3, [r7, #2]
 8000a46:	4613      	mov	r3, r2
 8000a48:	803b      	strh	r3, [r7, #0]
    for(int16_t y=-radius; y<=radius; y++)
 8000a4a:	887b      	ldrh	r3, [r7, #2]
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	81fb      	strh	r3, [r7, #14]
 8000a52:	e034      	b.n	8000abe <LCD_Draw_Circle_Fill+0x92>
    {
        for(int16_t x=-radius; x<=radius; x++)
 8000a54:	887b      	ldrh	r3, [r7, #2]
 8000a56:	425b      	negs	r3, r3
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	81bb      	strh	r3, [r7, #12]
 8000a5c:	e024      	b.n	8000aa8 <LCD_Draw_Circle_Fill+0x7c>
        {
            if(x*x+y*y <= radius*radius)
 8000a5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a66:	fb03 f202 	mul.w	r2, r3, r2
 8000a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000a72:	fb01 f303 	mul.w	r3, r1, r3
 8000a76:	441a      	add	r2, r3
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	8879      	ldrh	r1, [r7, #2]
 8000a7c:	fb01 f303 	mul.w	r3, r1, r3
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dc0b      	bgt.n	8000a9c <LCD_Draw_Circle_Fill+0x70>
            {
            	LCD_Draw_Pixel(x+Xpos, y+Ypos, color);
 8000a84:	89ba      	ldrh	r2, [r7, #12]
 8000a86:	88fb      	ldrh	r3, [r7, #6]
 8000a88:	4413      	add	r3, r2
 8000a8a:	b298      	uxth	r0, r3
 8000a8c:	89fa      	ldrh	r2, [r7, #14]
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	883a      	ldrh	r2, [r7, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	f7ff ffaa 	bl	80009f0 <LCD_Draw_Pixel>
        for(int16_t x=-radius; x<=radius; x++)
 8000a9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	81bb      	strh	r3, [r7, #12]
 8000aa8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	ddd5      	ble.n	8000a5e <LCD_Draw_Circle_Fill+0x32>
    for(int16_t y=-radius; y<=radius; y++)
 8000ab2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	81fb      	strh	r3, [r7, #14]
 8000abe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000ac2:	887b      	ldrh	r3, [r7, #2]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	ddc5      	ble.n	8000a54 <LCD_Draw_Circle_Fill+0x28>
            }
        }
    }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}

08000ad2 <LCD_Draw_Circle_NoFill>:

void LCD_Draw_Circle_NoFill(uint16_t Xpos, uint16_t Ypos, uint16_t radius, uint16_t thickness, uint16_t color) {
 8000ad2:	b590      	push	{r4, r7, lr}
 8000ad4:	b085      	sub	sp, #20
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4604      	mov	r4, r0
 8000ada:	4608      	mov	r0, r1
 8000adc:	4611      	mov	r1, r2
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4623      	mov	r3, r4
 8000ae2:	80fb      	strh	r3, [r7, #6]
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	80bb      	strh	r3, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
 8000aec:	4613      	mov	r3, r2
 8000aee:	803b      	strh	r3, [r7, #0]
    // Ensure that the thickness doesn't exceed the radius
    if (thickness >= radius) return;
 8000af0:	883a      	ldrh	r2, [r7, #0]
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d24d      	bcs.n	8000b94 <LCD_Draw_Circle_NoFill+0xc2>

    // Draw the ring-like circle with specified thickness
    for (int16_t y = -radius; y <= radius; y++) {
 8000af8:	887b      	ldrh	r3, [r7, #2]
 8000afa:	425b      	negs	r3, r3
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	81fb      	strh	r3, [r7, #14]
 8000b00:	e042      	b.n	8000b88 <LCD_Draw_Circle_NoFill+0xb6>

        for (int16_t x = -radius; x <= radius; x++) {
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	425b      	negs	r3, r3
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	81bb      	strh	r3, [r7, #12]
 8000b0a:	e032      	b.n	8000b72 <LCD_Draw_Circle_NoFill+0xa0>

            // Calculate distance squared from the center
            int16_t distanceSquared = x * x + y * y;
 8000b0c:	89ba      	ldrh	r2, [r7, #12]
 8000b0e:	89bb      	ldrh	r3, [r7, #12]
 8000b10:	fb12 f303 	smulbb	r3, r2, r3
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	89f9      	ldrh	r1, [r7, #14]
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	fb11 f303 	smulbb	r3, r1, r3
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	817b      	strh	r3, [r7, #10]

            // Draw pixels in the ring area: between (radius-thickness)^2 and radius^2
            if (distanceSquared >= (radius - thickness) * (radius - thickness) && distanceSquared <= radius * radius) {
 8000b26:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b2a:	8879      	ldrh	r1, [r7, #2]
 8000b2c:	883b      	ldrh	r3, [r7, #0]
 8000b2e:	1acb      	subs	r3, r1, r3
 8000b30:	8878      	ldrh	r0, [r7, #2]
 8000b32:	8839      	ldrh	r1, [r7, #0]
 8000b34:	1a41      	subs	r1, r0, r1
 8000b36:	fb01 f303 	mul.w	r3, r1, r3
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	db13      	blt.n	8000b66 <LCD_Draw_Circle_NoFill+0x94>
 8000b3e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	8879      	ldrh	r1, [r7, #2]
 8000b46:	fb01 f303 	mul.w	r3, r1, r3
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	dc0b      	bgt.n	8000b66 <LCD_Draw_Circle_NoFill+0x94>

                LCD_Draw_Pixel(x + Xpos, y + Ypos, color);
 8000b4e:	89ba      	ldrh	r2, [r7, #12]
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	4413      	add	r3, r2
 8000b54:	b298      	uxth	r0, r3
 8000b56:	89fa      	ldrh	r2, [r7, #14]
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	8c3a      	ldrh	r2, [r7, #32]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f7ff ff45 	bl	80009f0 <LCD_Draw_Pixel>
        for (int16_t x = -radius; x <= radius; x++) {
 8000b66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	81bb      	strh	r3, [r7, #12]
 8000b72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	ddc7      	ble.n	8000b0c <LCD_Draw_Circle_NoFill+0x3a>
    for (int16_t y = -radius; y <= radius; y++) {
 8000b7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3301      	adds	r3, #1
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	81fb      	strh	r3, [r7, #14]
 8000b88:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	ddb7      	ble.n	8000b02 <LCD_Draw_Circle_NoFill+0x30>
 8000b92:	e000      	b.n	8000b96 <LCD_Draw_Circle_NoFill+0xc4>
    if (thickness >= radius) return;
 8000b94:	bf00      	nop
            }
        }
    }
}
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <LCD_Draw_Horizontal_Line>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	4608      	mov	r0, r1
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4623      	mov	r3, r4
 8000bac:	80fb      	strh	r3, [r7, #6]
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80bb      	strh	r3, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	807b      	strh	r3, [r7, #2]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	81fb      	strh	r3, [r7, #14]
 8000bbe:	e00b      	b.n	8000bd8 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 8000bc0:	89fa      	ldrh	r2, [r7, #14]
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	883a      	ldrh	r2, [r7, #0]
 8000bca:	88b9      	ldrh	r1, [r7, #4]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff0f 	bl	80009f0 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000bd2:	89fb      	ldrh	r3, [r7, #14]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	81fb      	strh	r3, [r7, #14]
 8000bd8:	89fa      	ldrh	r2, [r7, #14]
 8000bda:	887b      	ldrh	r3, [r7, #2]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d3ef      	bcc.n	8000bc0 <LCD_Draw_Horizontal_Line+0x24>
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
	...

08000bec <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d10e      	bne.n	8000c20 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e007      	b.n	8000c18 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000c08:	4908      	ldr	r1, [pc, #32]	@ (8000c2c <LCD_Clear+0x40>)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	88ba      	ldrh	r2, [r7, #4]
 8000c0e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	3301      	adds	r3, #1
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000c1e:	d3f3      	bcc.n	8000c08 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	20000180 	.word	0x20000180

08000c30 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	@ (8000c4c <LCD_SetTextColor+0x1c>)
 8000c3c:	88fb      	ldrh	r3, [r7, #6]
 8000c3e:	8013      	strh	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	20000000 	.word	0x20000000

08000c50 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <LCD_SetFont+0x1c>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000017c 	.word	0x2000017c

08000c70 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	603a      	str	r2, [r7, #0]
 8000c7a:	80fb      	strh	r3, [r7, #6]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	e04c      	b.n	8000d28 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	e03f      	b.n	8000d14 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <LCD_Draw_Char+0xd0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	889b      	ldrh	r3, [r3, #4]
 8000ca6:	4a27      	ldr	r2, [pc, #156]	@ (8000d44 <LCD_Draw_Char+0xd4>)
 8000ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	2280      	movs	r2, #128	@ 0x80
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	fa42 f303 	asr.w	r3, r2, r3
 8000cbc:	400b      	ands	r3, r1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d104      	bne.n	8000ccc <LCD_Draw_Char+0x5c>
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <LCD_Draw_Char+0xd0>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	889b      	ldrh	r3, [r3, #4]
 8000cc8:	2b0c      	cmp	r3, #12
 8000cca:	d920      	bls.n	8000d0e <LCD_Draw_Char+0x9e>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	fa42 f303 	asr.w	r3, r2, r3
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d104      	bne.n	8000cf0 <LCD_Draw_Char+0x80>
 8000ce6:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <LCD_Draw_Char+0xd0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	889b      	ldrh	r3, [r3, #4]
 8000cec:	2b0c      	cmp	r3, #12
 8000cee:	d80e      	bhi.n	8000d0e <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b298      	uxth	r0, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <LCD_Draw_Char+0xd8>)
 8000d06:	8812      	ldrh	r2, [r2, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff fe71 	bl	80009f0 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <LCD_Draw_Char+0xd0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	889b      	ldrh	r3, [r3, #4]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d3b8      	bcc.n	8000c94 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	3301      	adds	r3, #1
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <LCD_Draw_Char+0xd0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	88db      	ldrh	r3, [r3, #6]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d3ab      	bcc.n	8000c8e <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000017c 	.word	0x2000017c
 8000d44:	aaaaaaab 	.word	0xaaaaaaab
 8000d48:	20000000 	.word	0x20000000

08000d4c <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
 8000d56:	460b      	mov	r3, r1
 8000d58:	80bb      	strh	r3, [r7, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000d5e:	78fb      	ldrb	r3, [r7, #3]
 8000d60:	3b20      	subs	r3, #32
 8000d62:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <LCD_DisplayChar+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	4907      	ldr	r1, [pc, #28]	@ (8000d8c <LCD_DisplayChar+0x40>)
 8000d6e:	6809      	ldr	r1, [r1, #0]
 8000d70:	88c9      	ldrh	r1, [r1, #6]
 8000d72:	fb01 f303 	mul.w	r3, r1, r3
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	441a      	add	r2, r3
 8000d7a:	88b9      	ldrh	r1, [r7, #4]
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff76 	bl	8000c70 <LCD_Draw_Char>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000017c 	.word	0x2000017c

08000d90 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <LCD_Error_Handler+0x8>

08000d9c <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000da0:	f001 fdfe 	bl	80029a0 <STMPE811_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d001      	beq.n	8000dae <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000daa:	bf00      	nop
 8000dac:	e7fd      	b.n	8000daa <InitializeLCDTouch+0xe>
  }
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <ReadRegisterFromTouchModule>:
{
	STMPE811_DetermineTouchPosition(touchStruct);
}

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 feb5 	bl	8002b2e <STMPE811_Read>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	71fb      	strb	r3, [r7, #7]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000dde:	79ba      	ldrb	r2, [r7, #6]
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 feb3 	bl	8002b50 <STMPE811_Write>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <displayMovementBase>:
 */

#include "diagnosticsScreen.h"
#include "stdio.h"

void displayMovementBase() {
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af02      	add	r7, sp, #8
	LCD_Clear(0,LCD_COLOR_WHITE);
 8000df8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fef5 	bl	8000bec <LCD_Clear>
	//LCD_Draw_Circle_Fill(120, 80, 50, LCD_COLOR_BLACK);
	//LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
	LCD_Draw_Circle_NoFill(120, 95, 50, 3, LCD_COLOR_BLACK);
 8000e02:	2300      	movs	r3, #0
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2303      	movs	r3, #3
 8000e08:	2232      	movs	r2, #50	@ 0x32
 8000e0a:	215f      	movs	r1, #95	@ 0x5f
 8000e0c:	2078      	movs	r0, #120	@ 0x78
 8000e0e:	f7ff fe60 	bl	8000ad2 <LCD_Draw_Circle_NoFill>
	LCD_Draw_Horizontal_Line(0, 155, 240, LCD_COLOR_BLACK);
 8000e12:	2300      	movs	r3, #0
 8000e14:	22f0      	movs	r2, #240	@ 0xf0
 8000e16:	219b      	movs	r1, #155	@ 0x9b
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff febf 	bl	8000b9c <LCD_Draw_Horizontal_Line>
//	LCD_DisplayChar(123, 50, 's');
//	LCD_DisplayChar(130, 50, 't');
//	LCD_DisplayChar(142, 50, 'i');
//	LCD_DisplayChar(158, 50, 'c');
//	LCD_DisplayChar(168, 50, 'k');
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <displayCurrentMove>:

void displayCurrentMove(joyPosTypeDef joyPos) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af02      	add	r7, sp, #8
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	e883 0003 	stmia.w	r3, {r0, r1}
		LCD_Draw_Circle_Fill(120, 80, 47, LCD_COLOR_WHITE);
		LCD_Draw_Circle_Fill(120+47-20, 80, 20, LCD_COLOR_BLACK);
	}
	*/

	uint32_t dispJoyPosY = mapp(joyPos.xPos, 0, 1024, 95+47-20, 95-47+20);
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	2344      	movs	r3, #68	@ 0x44
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	237a      	movs	r3, #122	@ 0x7a
 8000e38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f001 f919 	bl	8002074 <mapp>
 8000e42:	60f8      	str	r0, [r7, #12]

	uint32_t dispJoyPosX = mapp(joyPos.yPos, 0, 1024, 120-47+20, 120+47-20);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	2393      	movs	r3, #147	@ 0x93
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	235d      	movs	r3, #93	@ 0x5d
 8000e4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e50:	2100      	movs	r1, #0
 8000e52:	f001 f90f 	bl	8002074 <mapp>
 8000e56:	60b8      	str	r0, [r7, #8]


	LCD_Draw_Circle_Fill(120, 95, 47, LCD_COLOR_WHITE);
 8000e58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e5c:	222f      	movs	r2, #47	@ 0x2f
 8000e5e:	215f      	movs	r1, #95	@ 0x5f
 8000e60:	2078      	movs	r0, #120	@ 0x78
 8000e62:	f7ff fde3 	bl	8000a2c <LCD_Draw_Circle_Fill>
	LCD_Draw_Circle_Fill(dispJoyPosX, dispJoyPosY, 20, LCD_COLOR_BLACK);
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	b298      	uxth	r0, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	2300      	movs	r3, #0
 8000e70:	2214      	movs	r2, #20
 8000e72:	f7ff fddb 	bl	8000a2c <LCD_Draw_Circle_Fill>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <displayMoveLog>:

void displayMoveLog(uint16_t moveLog) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]

	LCD_SetTextColor(LCD_COLOR_BLACK);
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fed0 	bl	8000c30 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000e90:	483b      	ldr	r0, [pc, #236]	@ (8000f80 <displayMoveLog+0x100>)
 8000e92:	f7ff fedd 	bl	8000c50 <LCD_SetFont>

	// Create a copy of moveLog and y-offset
	uint16_t tempLog = moveLog;
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	81fb      	strh	r3, [r7, #14]
	uint16_t yOffset = 170;
 8000e9a:	23aa      	movs	r3, #170	@ 0xaa
 8000e9c:	81bb      	strh	r3, [r7, #12]

	while (tempLog != 0) {
 8000e9e:	e066      	b.n	8000f6e <displayMoveLog+0xee>

		// Extract the lowest 4 bits
		uint16_t currentMove = tempLog & 0xF;
 8000ea0:	89fb      	ldrh	r3, [r7, #14]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	817b      	strh	r3, [r7, #10]

		if (currentMove == FORWARD) {
 8000ea8:	897b      	ldrh	r3, [r7, #10]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d114      	bne.n	8000ed8 <displayMoveLog+0x58>

			LCD_DisplayChar(100, yOffset, 'F');
 8000eae:	89bb      	ldrh	r3, [r7, #12]
 8000eb0:	2246      	movs	r2, #70	@ 0x46
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	2064      	movs	r0, #100	@ 0x64
 8000eb6:	f7ff ff49 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'W');
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	2257      	movs	r2, #87	@ 0x57
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2073      	movs	r0, #115	@ 0x73
 8000ec2:	f7ff ff43 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'D');
 8000ec6:	89bb      	ldrh	r3, [r7, #12]
 8000ec8:	2244      	movs	r2, #68	@ 0x44
 8000eca:	4619      	mov	r1, r3
 8000ecc:	2082      	movs	r0, #130	@ 0x82
 8000ece:	f7ff ff3d 	bl	8000d4c <LCD_DisplayChar>
			yOffset += 30;
 8000ed2:	89bb      	ldrh	r3, [r7, #12]
 8000ed4:	331e      	adds	r3, #30
 8000ed6:	81bb      	strh	r3, [r7, #12]
		}
		if (currentMove == BACKWARD) {
 8000ed8:	897b      	ldrh	r3, [r7, #10]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d114      	bne.n	8000f08 <displayMoveLog+0x88>

			LCD_DisplayChar(100, yOffset, 'N');
 8000ede:	89bb      	ldrh	r3, [r7, #12]
 8000ee0:	224e      	movs	r2, #78	@ 0x4e
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	2064      	movs	r0, #100	@ 0x64
 8000ee6:	f7ff ff31 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'U');
 8000eea:	89bb      	ldrh	r3, [r7, #12]
 8000eec:	2255      	movs	r2, #85	@ 0x55
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2073      	movs	r0, #115	@ 0x73
 8000ef2:	f7ff ff2b 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'T');
 8000ef6:	89bb      	ldrh	r3, [r7, #12]
 8000ef8:	2254      	movs	r2, #84	@ 0x54
 8000efa:	4619      	mov	r1, r3
 8000efc:	2082      	movs	r0, #130	@ 0x82
 8000efe:	f7ff ff25 	bl	8000d4c <LCD_DisplayChar>
			yOffset += 30;
 8000f02:	89bb      	ldrh	r3, [r7, #12]
 8000f04:	331e      	adds	r3, #30
 8000f06:	81bb      	strh	r3, [r7, #12]
		}
		if (currentMove == LEFT) {
 8000f08:	897b      	ldrh	r3, [r7, #10]
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	d114      	bne.n	8000f38 <displayMoveLog+0xb8>

			LCD_DisplayChar(100, yOffset, 'R');
 8000f0e:	89bb      	ldrh	r3, [r7, #12]
 8000f10:	2252      	movs	r2, #82	@ 0x52
 8000f12:	4619      	mov	r1, r3
 8000f14:	2064      	movs	r0, #100	@ 0x64
 8000f16:	f7ff ff19 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'I');
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	2249      	movs	r2, #73	@ 0x49
 8000f1e:	4619      	mov	r1, r3
 8000f20:	2073      	movs	r0, #115	@ 0x73
 8000f22:	f7ff ff13 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'T');
 8000f26:	89bb      	ldrh	r3, [r7, #12]
 8000f28:	2254      	movs	r2, #84	@ 0x54
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2082      	movs	r0, #130	@ 0x82
 8000f2e:	f7ff ff0d 	bl	8000d4c <LCD_DisplayChar>
			yOffset += 30;
 8000f32:	89bb      	ldrh	r3, [r7, #12]
 8000f34:	331e      	adds	r3, #30
 8000f36:	81bb      	strh	r3, [r7, #12]
		}
		if (currentMove == RIGHT) {
 8000f38:	897b      	ldrh	r3, [r7, #10]
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d114      	bne.n	8000f68 <displayMoveLog+0xe8>

			LCD_DisplayChar(100, yOffset, 'L');
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
 8000f40:	224c      	movs	r2, #76	@ 0x4c
 8000f42:	4619      	mov	r1, r3
 8000f44:	2064      	movs	r0, #100	@ 0x64
 8000f46:	f7ff ff01 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(115, yOffset, 'F');
 8000f4a:	89bb      	ldrh	r3, [r7, #12]
 8000f4c:	2246      	movs	r2, #70	@ 0x46
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2073      	movs	r0, #115	@ 0x73
 8000f52:	f7ff fefb 	bl	8000d4c <LCD_DisplayChar>
			LCD_DisplayChar(130, yOffset, 'T');
 8000f56:	89bb      	ldrh	r3, [r7, #12]
 8000f58:	2254      	movs	r2, #84	@ 0x54
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	2082      	movs	r0, #130	@ 0x82
 8000f5e:	f7ff fef5 	bl	8000d4c <LCD_DisplayChar>
			yOffset += 30;
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	331e      	adds	r3, #30
 8000f66:	81bb      	strh	r3, [r7, #12]
		}

		// Shift the tempLog to process the next 4 bits
		tempLog >>= 4;
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	81fb      	strh	r3, [r7, #14]
	while (tempLog != 0) {
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d195      	bne.n	8000ea0 <displayMoveLog+0x20>
	}
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000004 	.word	0x20000004

08000f84 <displayRunTime>:

void displayRunTime(uint32_t * runtime_min, uint32_t * runtime_sec) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]

	*runtime_min = uwTick/60000;
 8000f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8001078 <displayRunTime+0xf4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a3a      	ldr	r2, [pc, #232]	@ (800107c <displayRunTime+0xf8>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	0b9a      	lsrs	r2, r3, #14
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]

	*runtime_sec = (uwTick % 60000) / 1000;
 8000f9e:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <displayRunTime+0xf4>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b36      	ldr	r3, [pc, #216]	@ (800107c <displayRunTime+0xf8>)
 8000fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa8:	0b9b      	lsrs	r3, r3, #14
 8000faa:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <displayRunTime+0xfc>)
 8000fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fba:	099a      	lsrs	r2, r3, #6
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	601a      	str	r2, [r3, #0]
	// Convert minutes and seconds to strings
	char minStr[3];
	char secStr[3];

	// Convert to strings with two digits
	sprintf(minStr, "%02d", (int) *runtime_min);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	492e      	ldr	r1, [pc, #184]	@ (8001084 <displayRunTime+0x100>)
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f006 fbb7 	bl	8007740 <siprintf>
	sprintf(secStr, "%02d", (int) *runtime_sec);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	4929      	ldr	r1, [pc, #164]	@ (8001084 <displayRunTime+0x100>)
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f006 fbae 	bl	8007740 <siprintf>

	LCD_DisplayChar(80, 100, 'R');
 8000fe4:	2252      	movs	r2, #82	@ 0x52
 8000fe6:	2164      	movs	r1, #100	@ 0x64
 8000fe8:	2050      	movs	r0, #80	@ 0x50
 8000fea:	f7ff feaf 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(95, 100, 'u');
 8000fee:	2275      	movs	r2, #117	@ 0x75
 8000ff0:	2164      	movs	r1, #100	@ 0x64
 8000ff2:	205f      	movs	r0, #95	@ 0x5f
 8000ff4:	f7ff feaa 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(110, 100, 'n');
 8000ff8:	226e      	movs	r2, #110	@ 0x6e
 8000ffa:	2164      	movs	r1, #100	@ 0x64
 8000ffc:	206e      	movs	r0, #110	@ 0x6e
 8000ffe:	f7ff fea5 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(123, 100, 't');
 8001002:	2274      	movs	r2, #116	@ 0x74
 8001004:	2164      	movs	r1, #100	@ 0x64
 8001006:	207b      	movs	r0, #123	@ 0x7b
 8001008:	f7ff fea0 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(130, 100, 'i');
 800100c:	2269      	movs	r2, #105	@ 0x69
 800100e:	2164      	movs	r1, #100	@ 0x64
 8001010:	2082      	movs	r0, #130	@ 0x82
 8001012:	f7ff fe9b 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(142, 100, 'm');
 8001016:	226d      	movs	r2, #109	@ 0x6d
 8001018:	2164      	movs	r1, #100	@ 0x64
 800101a:	208e      	movs	r0, #142	@ 0x8e
 800101c:	f7ff fe96 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(158, 100, 'e');
 8001020:	2265      	movs	r2, #101	@ 0x65
 8001022:	2164      	movs	r1, #100	@ 0x64
 8001024:	209e      	movs	r0, #158	@ 0x9e
 8001026:	f7ff fe91 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(168, 98, ':');
 800102a:	223a      	movs	r2, #58	@ 0x3a
 800102c:	2162      	movs	r1, #98	@ 0x62
 800102e:	20a8      	movs	r0, #168	@ 0xa8
 8001030:	f7ff fe8c 	bl	8000d4c <LCD_DisplayChar>

	LCD_DisplayChar(90, 140, minStr[0]);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	461a      	mov	r2, r3
 8001038:	218c      	movs	r1, #140	@ 0x8c
 800103a:	205a      	movs	r0, #90	@ 0x5a
 800103c:	f7ff fe86 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(105, 140, minStr[1]);
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	461a      	mov	r2, r3
 8001044:	218c      	movs	r1, #140	@ 0x8c
 8001046:	2069      	movs	r0, #105	@ 0x69
 8001048:	f7ff fe80 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(115, 138, ':');
 800104c:	223a      	movs	r2, #58	@ 0x3a
 800104e:	218a      	movs	r1, #138	@ 0x8a
 8001050:	2073      	movs	r0, #115	@ 0x73
 8001052:	f7ff fe7b 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(125, 140, secStr[0]);
 8001056:	7a3b      	ldrb	r3, [r7, #8]
 8001058:	461a      	mov	r2, r3
 800105a:	218c      	movs	r1, #140	@ 0x8c
 800105c:	207d      	movs	r0, #125	@ 0x7d
 800105e:	f7ff fe75 	bl	8000d4c <LCD_DisplayChar>
	LCD_DisplayChar(140, 140, secStr[1]);
 8001062:	7a7b      	ldrb	r3, [r7, #9]
 8001064:	461a      	mov	r2, r3
 8001066:	218c      	movs	r1, #140	@ 0x8c
 8001068:	208c      	movs	r0, #140	@ 0x8c
 800106a:	f7ff fe6f 	bl	8000d4c <LCD_DisplayChar>
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20025c74 	.word	0x20025c74
 800107c:	45e7b273 	.word	0x45e7b273
 8001080:	10624dd3 	.word	0x10624dd3
 8001084:	08008098 	.word	0x08008098

08001088 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800108c:	f000 f9fe 	bl	800148c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001090:	20ca      	movs	r0, #202	@ 0xca
 8001092:	f000 f943 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001096:	20c3      	movs	r0, #195	@ 0xc3
 8001098:	f000 f94d 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 800109c:	2008      	movs	r0, #8
 800109e:	f000 f94a 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 80010a2:	2050      	movs	r0, #80	@ 0x50
 80010a4:	f000 f947 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 80010a8:	20cf      	movs	r0, #207	@ 0xcf
 80010aa:	f000 f937 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f941 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 80010b4:	20c1      	movs	r0, #193	@ 0xc1
 80010b6:	f000 f93e 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 80010ba:	2030      	movs	r0, #48	@ 0x30
 80010bc:	f000 f93b 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 80010c0:	20ed      	movs	r0, #237	@ 0xed
 80010c2:	f000 f92b 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 80010c6:	2064      	movs	r0, #100	@ 0x64
 80010c8:	f000 f935 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 f932 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 80010d2:	2012      	movs	r0, #18
 80010d4:	f000 f92f 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 80010d8:	2081      	movs	r0, #129	@ 0x81
 80010da:	f000 f92c 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 80010de:	20e8      	movs	r0, #232	@ 0xe8
 80010e0:	f000 f91c 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 80010e4:	2085      	movs	r0, #133	@ 0x85
 80010e6:	f000 f926 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f923 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80010f0:	2078      	movs	r0, #120	@ 0x78
 80010f2:	f000 f920 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 80010f6:	20cb      	movs	r0, #203	@ 0xcb
 80010f8:	f000 f910 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 80010fc:	2039      	movs	r0, #57	@ 0x39
 80010fe:	f000 f91a 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001102:	202c      	movs	r0, #44	@ 0x2c
 8001104:	f000 f917 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f914 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 800110e:	2034      	movs	r0, #52	@ 0x34
 8001110:	f000 f911 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001114:	2002      	movs	r0, #2
 8001116:	f000 f90e 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 800111a:	20f7      	movs	r0, #247	@ 0xf7
 800111c:	f000 f8fe 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001120:	2020      	movs	r0, #32
 8001122:	f000 f908 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001126:	20ea      	movs	r0, #234	@ 0xea
 8001128:	f000 f8f8 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f902 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f8ff 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001138:	20b1      	movs	r0, #177	@ 0xb1
 800113a:	f000 f8ef 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f8f9 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001144:	201b      	movs	r0, #27
 8001146:	f000 f8f6 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800114a:	20b6      	movs	r0, #182	@ 0xb6
 800114c:	f000 f8e6 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001150:	200a      	movs	r0, #10
 8001152:	f000 f8f0 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001156:	20a2      	movs	r0, #162	@ 0xa2
 8001158:	f000 f8ed 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 800115c:	20c0      	movs	r0, #192	@ 0xc0
 800115e:	f000 f8dd 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001162:	2010      	movs	r0, #16
 8001164:	f000 f8e7 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001168:	20c1      	movs	r0, #193	@ 0xc1
 800116a:	f000 f8d7 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 800116e:	2010      	movs	r0, #16
 8001170:	f000 f8e1 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001174:	20c5      	movs	r0, #197	@ 0xc5
 8001176:	f000 f8d1 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 800117a:	2045      	movs	r0, #69	@ 0x45
 800117c:	f000 f8db 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001180:	2015      	movs	r0, #21
 8001182:	f000 f8d8 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001186:	20c7      	movs	r0, #199	@ 0xc7
 8001188:	f000 f8c8 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800118c:	2090      	movs	r0, #144	@ 0x90
 800118e:	f000 f8d2 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001192:	2036      	movs	r0, #54	@ 0x36
 8001194:	f000 f8c2 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001198:	20c8      	movs	r0, #200	@ 0xc8
 800119a:	f000 f8cc 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800119e:	20f2      	movs	r0, #242	@ 0xf2
 80011a0:	f000 f8bc 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f8c6 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 80011aa:	20b0      	movs	r0, #176	@ 0xb0
 80011ac:	f000 f8b6 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 80011b0:	20c2      	movs	r0, #194	@ 0xc2
 80011b2:	f000 f8c0 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 80011b6:	20b6      	movs	r0, #182	@ 0xb6
 80011b8:	f000 f8b0 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 80011bc:	200a      	movs	r0, #10
 80011be:	f000 f8ba 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 80011c2:	20a7      	movs	r0, #167	@ 0xa7
 80011c4:	f000 f8b7 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 80011c8:	2027      	movs	r0, #39	@ 0x27
 80011ca:	f000 f8b4 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80011ce:	2004      	movs	r0, #4
 80011d0:	f000 f8b1 	bl	8001336 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 80011d4:	202a      	movs	r0, #42	@ 0x2a
 80011d6:	f000 f8a1 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 f8ab 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f8a8 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f8a5 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 80011ec:	20ef      	movs	r0, #239	@ 0xef
 80011ee:	f000 f8a2 	bl	8001336 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 80011f2:	202b      	movs	r0, #43	@ 0x2b
 80011f4:	f000 f892 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f89c 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 f899 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001204:	2001      	movs	r0, #1
 8001206:	f000 f896 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800120a:	203f      	movs	r0, #63	@ 0x3f
 800120c:	f000 f893 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001210:	20f6      	movs	r0, #246	@ 0xf6
 8001212:	f000 f883 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001216:	2001      	movs	r0, #1
 8001218:	f000 f88d 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800121c:	2000      	movs	r0, #0
 800121e:	f000 f88a 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001222:	2006      	movs	r0, #6
 8001224:	f000 f887 	bl	8001336 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001228:	202c      	movs	r0, #44	@ 0x2c
 800122a:	f000 f877 	bl	800131c <ili9341_Write_Reg>
  LCD_Delay(200);
 800122e:	20c8      	movs	r0, #200	@ 0xc8
 8001230:	f000 f9e8 	bl	8001604 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001234:	2026      	movs	r0, #38	@ 0x26
 8001236:	f000 f871 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800123a:	2001      	movs	r0, #1
 800123c:	f000 f87b 	bl	8001336 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001240:	20e0      	movs	r0, #224	@ 0xe0
 8001242:	f000 f86b 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001246:	200f      	movs	r0, #15
 8001248:	f000 f875 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 800124c:	2029      	movs	r0, #41	@ 0x29
 800124e:	f000 f872 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001252:	2024      	movs	r0, #36	@ 0x24
 8001254:	f000 f86f 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001258:	200c      	movs	r0, #12
 800125a:	f000 f86c 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 800125e:	200e      	movs	r0, #14
 8001260:	f000 f869 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001264:	2009      	movs	r0, #9
 8001266:	f000 f866 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 800126a:	204e      	movs	r0, #78	@ 0x4e
 800126c:	f000 f863 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001270:	2078      	movs	r0, #120	@ 0x78
 8001272:	f000 f860 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001276:	203c      	movs	r0, #60	@ 0x3c
 8001278:	f000 f85d 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800127c:	2009      	movs	r0, #9
 800127e:	f000 f85a 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8001282:	2013      	movs	r0, #19
 8001284:	f000 f857 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8001288:	2005      	movs	r0, #5
 800128a:	f000 f854 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800128e:	2017      	movs	r0, #23
 8001290:	f000 f851 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8001294:	2011      	movs	r0, #17
 8001296:	f000 f84e 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f84b 	bl	8001336 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 80012a0:	20e1      	movs	r0, #225	@ 0xe1
 80012a2:	f000 f83b 	bl	800131c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 f845 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 80012ac:	2016      	movs	r0, #22
 80012ae:	f000 f842 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 80012b2:	201b      	movs	r0, #27
 80012b4:	f000 f83f 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 80012b8:	2004      	movs	r0, #4
 80012ba:	f000 f83c 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 80012be:	2011      	movs	r0, #17
 80012c0:	f000 f839 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 80012c4:	2007      	movs	r0, #7
 80012c6:	f000 f836 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 80012ca:	2031      	movs	r0, #49	@ 0x31
 80012cc:	f000 f833 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 80012d0:	2033      	movs	r0, #51	@ 0x33
 80012d2:	f000 f830 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 80012d6:	2042      	movs	r0, #66	@ 0x42
 80012d8:	f000 f82d 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 80012dc:	2005      	movs	r0, #5
 80012de:	f000 f82a 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80012e2:	200c      	movs	r0, #12
 80012e4:	f000 f827 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 80012e8:	200a      	movs	r0, #10
 80012ea:	f000 f824 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 80012ee:	2028      	movs	r0, #40	@ 0x28
 80012f0:	f000 f821 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 80012f4:	202f      	movs	r0, #47	@ 0x2f
 80012f6:	f000 f81e 	bl	8001336 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f81b 	bl	8001336 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8001300:	2011      	movs	r0, #17
 8001302:	f000 f80b 	bl	800131c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001306:	20c8      	movs	r0, #200	@ 0xc8
 8001308:	f000 f97c 	bl	8001604 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800130c:	2029      	movs	r0, #41	@ 0x29
 800130e:	f000 f805 	bl	800131c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8001312:	202c      	movs	r0, #44	@ 0x2c
 8001314:	f000 f802 	bl	800131c <ili9341_Write_Reg>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f949 	bl	80015c0 <LCD_IO_WriteReg>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f91a 	bl	800157c <LCD_IO_WriteData>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001354:	4819      	ldr	r0, [pc, #100]	@ (80013bc <SPI_Init+0x6c>)
 8001356:	f005 fa76 	bl	8006846 <HAL_SPI_GetState>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d12b      	bne.n	80013b8 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 8001360:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <SPI_Init+0x6c>)
 8001362:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <SPI_Init+0x70>)
 8001364:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <SPI_Init+0x6c>)
 8001368:	2218      	movs	r2, #24
 800136a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800136c:	4b13      	ldr	r3, [pc, #76]	@ (80013bc <SPI_Init+0x6c>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <SPI_Init+0x6c>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001378:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <SPI_Init+0x6c>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <SPI_Init+0x6c>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001384:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <SPI_Init+0x6c>)
 8001386:	2207      	movs	r2, #7
 8001388:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800138a:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <SPI_Init+0x6c>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <SPI_Init+0x6c>)
 8001392:	2200      	movs	r2, #0
 8001394:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <SPI_Init+0x6c>)
 8001398:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800139c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800139e:	4b07      	ldr	r3, [pc, #28]	@ (80013bc <SPI_Init+0x6c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SPI_Init+0x6c>)
 80013a6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013aa:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <SPI_Init+0x6c>)
 80013ae:	f000 f833 	bl	8001418 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80013b2:	4802      	ldr	r0, [pc, #8]	@ (80013bc <SPI_Init+0x6c>)
 80013b4:	f005 f852 	bl	800645c <HAL_SPI_Init>
  }
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20025980 	.word	0x20025980
 80013c0:	40015000 	.word	0x40015000

080013c4 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <SPI_Write+0x34>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	1db9      	adds	r1, r7, #6
 80013d8:	2201      	movs	r2, #1
 80013da:	4808      	ldr	r0, [pc, #32]	@ (80013fc <SPI_Write+0x38>)
 80013dc:	f005 f8ef 	bl	80065be <HAL_SPI_Transmit>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 80013ea:	f000 f809 	bl	8001400 <SPI_Error>
  }
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000000c 	.word	0x2000000c
 80013fc:	20025980 	.word	0x20025980

08001400 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001404:	4803      	ldr	r0, [pc, #12]	@ (8001414 <SPI_Error+0x14>)
 8001406:	f005 f8b2 	bl	800656e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800140a:	f7ff ffa1 	bl	8001350 <SPI_Init>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20025980 	.word	0x20025980

08001418 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <SPI_MspInit+0x6c>)
 8001426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001428:	4a16      	ldr	r2, [pc, #88]	@ (8001484 <SPI_MspInit+0x6c>)
 800142a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800142e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <SPI_MspInit+0x6c>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <SPI_MspInit+0x6c>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	4a0f      	ldr	r2, [pc, #60]	@ (8001484 <SPI_MspInit+0x6c>)
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	6313      	str	r3, [r2, #48]	@ 0x30
 800144c:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <SPI_MspInit+0x6c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 8001458:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001466:	2301      	movs	r3, #1
 8001468:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 800146a:	2305      	movs	r3, #5
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4804      	ldr	r0, [pc, #16]	@ (8001488 <SPI_MspInit+0x70>)
 8001476:	f002 fb6b 	bl	8003b50 <HAL_GPIO_Init>
}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	@ 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40021400 	.word	0x40021400

0800148c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8001492:	4b36      	ldr	r3, [pc, #216]	@ (800156c <LCD_IO_Init+0xe0>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d164      	bne.n	8001564 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800149a:	4b34      	ldr	r3, [pc, #208]	@ (800156c <LCD_IO_Init+0xe0>)
 800149c:	2201      	movs	r2, #1
 800149e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b32      	ldr	r3, [pc, #200]	@ (8001570 <LCD_IO_Init+0xe4>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	4a31      	ldr	r2, [pc, #196]	@ (8001570 <LCD_IO_Init+0xe4>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001570 <LCD_IO_Init+0xe4>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80014bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014ca:	2302      	movs	r3, #2
 80014cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	4619      	mov	r1, r3
 80014d4:	4827      	ldr	r0, [pc, #156]	@ (8001574 <LCD_IO_Init+0xe8>)
 80014d6:	f002 fb3b 	bl	8003b50 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <LCD_IO_Init+0xe4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	4a23      	ldr	r2, [pc, #140]	@ (8001570 <LCD_IO_Init+0xe4>)
 80014e4:	f043 0308 	orr.w	r3, r3, #8
 80014e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ea:	4b21      	ldr	r3, [pc, #132]	@ (8001570 <LCD_IO_Init+0xe4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80014f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4819      	ldr	r0, [pc, #100]	@ (8001574 <LCD_IO_Init+0xe8>)
 8001510:	f002 fb1e 	bl	8003b50 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <LCD_IO_Init+0xe4>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	4a14      	ldr	r2, [pc, #80]	@ (8001570 <LCD_IO_Init+0xe4>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6313      	str	r3, [r2, #48]	@ 0x30
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <LCD_IO_Init+0xe4>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001530:	2304      	movs	r3, #4
 8001532:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800153c:	2302      	movs	r3, #2
 800153e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	480c      	ldr	r0, [pc, #48]	@ (8001578 <LCD_IO_Init+0xec>)
 8001548:	f002 fb02 	bl	8003b50 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 800154c:	2200      	movs	r2, #0
 800154e:	2104      	movs	r1, #4
 8001550:	4809      	ldr	r0, [pc, #36]	@ (8001578 <LCD_IO_Init+0xec>)
 8001552:	f002 fdb5 	bl	80040c0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001556:	2201      	movs	r2, #1
 8001558:	2104      	movs	r1, #4
 800155a:	4807      	ldr	r0, [pc, #28]	@ (8001578 <LCD_IO_Init+0xec>)
 800155c:	f002 fdb0 	bl	80040c0 <HAL_GPIO_WritePin>

    SPI_Init();
 8001560:	f7ff fef6 	bl	8001350 <SPI_Init>
  }
}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200259d8 	.word	0x200259d8
 8001570:	40023800 	.word	0x40023800
 8001574:	40020c00 	.word	0x40020c00
 8001578:	40020800 	.word	0x40020800

0800157c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001586:	2201      	movs	r2, #1
 8001588:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800158c:	480a      	ldr	r0, [pc, #40]	@ (80015b8 <LCD_IO_WriteData+0x3c>)
 800158e:	f002 fd97 	bl	80040c0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001592:	2200      	movs	r2, #0
 8001594:	2104      	movs	r1, #4
 8001596:	4809      	ldr	r0, [pc, #36]	@ (80015bc <LCD_IO_WriteData+0x40>)
 8001598:	f002 fd92 	bl	80040c0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ff10 	bl	80013c4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015a4:	2201      	movs	r2, #1
 80015a6:	2104      	movs	r1, #4
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <LCD_IO_WriteData+0x40>)
 80015aa:	f002 fd89 	bl	80040c0 <HAL_GPIO_WritePin>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40020c00 	.word	0x40020c00
 80015bc:	40020800 	.word	0x40020800

080015c0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015d0:	480a      	ldr	r0, [pc, #40]	@ (80015fc <LCD_IO_WriteReg+0x3c>)
 80015d2:	f002 fd75 	bl	80040c0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80015d6:	2200      	movs	r2, #0
 80015d8:	2104      	movs	r1, #4
 80015da:	4809      	ldr	r0, [pc, #36]	@ (8001600 <LCD_IO_WriteReg+0x40>)
 80015dc:	f002 fd70 	bl	80040c0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff feed 	bl	80013c4 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80015ea:	2201      	movs	r2, #1
 80015ec:	2104      	movs	r1, #4
 80015ee:	4804      	ldr	r0, [pc, #16]	@ (8001600 <LCD_IO_WriteReg+0x40>)
 80015f0:	f002 fd66 	bl	80040c0 <HAL_GPIO_WritePin>
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40020c00 	.word	0x40020c00
 8001600:	40020800 	.word	0x40020800

08001604 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f001 fce3 	bl	8002fd8 <HAL_Delay>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <joystick_getCoords>:
 */

#include "joystickDriver.h"


void joystick_getCoords(joyPosTypeDef * joyPos, ADC_HandleTypeDef hadc1, ADC_HandleTypeDef hadc2) {
 800161a:	b084      	sub	sp, #16
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	f107 0014 	add.w	r0, r7, #20
 8001628:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	HAL_ADC_Start(&hadc1);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fd39 	bl	80030a8 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	f04f 31ff 	mov.w	r1, #4294967295
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fe37 	bl	80032b2 <HAL_ADC_PollForConversion>

	joyPos->xPos = HAL_ADC_GetValue(&hadc1);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f001 febd 	bl	80033c8 <HAL_ADC_GetValue>
 800164e:	4602      	mov	r2, r0
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	601a      	str	r2, [r3, #0]

	HAL_ADC_Stop(&hadc1);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fdf7 	bl	800324c <HAL_ADC_Stop>

	HAL_ADC_Start(&hadc2);
 800165e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001662:	4618      	mov	r0, r3
 8001664:	f001 fd20 	bl	80030a8 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001668:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800166c:	f04f 31ff 	mov.w	r1, #4294967295
 8001670:	4618      	mov	r0, r3
 8001672:	f001 fe1e 	bl	80032b2 <HAL_ADC_PollForConversion>

	joyPos->yPos = HAL_ADC_GetValue(&hadc2);
 8001676:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fea4 	bl	80033c8 <HAL_ADC_GetValue>
 8001680:	4602      	mov	r2, r0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]

	HAL_ADC_Stop(&hadc2);
 8001686:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fdde 	bl	800324c <HAL_ADC_Stop>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800169a:	b004      	add	sp, #16
 800169c:	4770      	bx	lr
	...

080016a0 <SystemClockOverride>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SystemClockOverride(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b092      	sub	sp, #72	@ 0x48
 80016a4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <SystemClockOverride+0x7c>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a1b      	ldr	r2, [pc, #108]	@ (800171c <SystemClockOverride+0x7c>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <SystemClockOverride+0x7c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ca:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016cc:	2302      	movs	r3, #2
 80016ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016d6:	2308      	movs	r3, #8
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016da:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016e4:	2307      	movs	r3, #7
 80016e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f848 	bl	8005780 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80016f0:	230f      	movs	r3, #15
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f4:	2302      	movs	r3, #2
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001700:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001706:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001708:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800170c:	2105      	movs	r1, #5
 800170e:	4618      	mov	r0, r3
 8001710:	f004 faae 	bl	8005c70 <HAL_RCC_ClockConfig>
}
 8001714:	bf00      	nop
 8001716:	3748      	adds	r7, #72	@ 0x48
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001724:	b0a8      	sub	sp, #160	@ 0xa0
 8001726:	af22      	add	r7, sp, #136	@ 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001728:	f001 fbe4 	bl	8002ef4 <HAL_Init>

  /* Configure the system clock */
  //SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  SystemClockOverride();
 800172c:	f7ff ffb8 	bl	80016a0 <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001730:	f000 faec 	bl	8001d0c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001734:	f000 f88a 	bl	800184c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001738:	f000 fa68 	bl	8001c0c <MX_TIM3_Init>
  MX_ADC2_Init();
 800173c:	f000 f8d8 	bl	80018f0 <MX_ADC2_Init>
  MX_I2C3_Init();
 8001740:	f000 f928 	bl	8001994 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001744:	f000 f966 	bl	8001a14 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001748:	f000 fa2a 	bl	8001ba0 <MX_SPI5_Init>
  MX_RNG_Init();
 800174c:	f000 fa14 	bl	8001b78 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		// Left
 8001750:	2100      	movs	r1, #0
 8001752:	483b      	ldr	r0, [pc, #236]	@ (8001840 <main+0x120>)
 8001754:	f005 fa0a 	bl	8006b6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);		// Right
 8001758:	2108      	movs	r1, #8
 800175a:	4839      	ldr	r0, [pc, #228]	@ (8001840 <main+0x120>)
 800175c:	f005 fa06 	bl	8006b6c <HAL_TIM_PWM_Start>

  joyPosTypeDef joyPos = {0};
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
  motorPowTypeDef motorPow = {0};
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]

  uint16_t moveLog = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	817b      	strh	r3, [r7, #10]

  uint32_t runtime_min = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	607b      	str	r3, [r7, #4]
  uint32_t runtime_sec = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]

  ApplicationInit();
 800177a:	f7fe ff0d 	bl	8000598 <ApplicationInit>

  //LCD_Visual_Demo();

  HAL_Delay(1000);
 800177e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001782:	f001 fc29 	bl	8002fd8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  while (getScreenNum() == 0) {
 8001786:	e03d      	b.n	8001804 <main+0xe4>

		  joystick_getCoords(&joyPos, hadc1, hadc2);
 8001788:	4e2e      	ldr	r6, [pc, #184]	@ (8001844 <main+0x124>)
 800178a:	f107 0810 	add.w	r8, r7, #16
 800178e:	4a2e      	ldr	r2, [pc, #184]	@ (8001848 <main+0x128>)
 8001790:	ab0f      	add	r3, sp, #60	@ 0x3c
 8001792:	4611      	mov	r1, r2
 8001794:	2248      	movs	r2, #72	@ 0x48
 8001796:	4618      	mov	r0, r3
 8001798:	f006 f826 	bl	80077e8 <memcpy>
 800179c:	466d      	mov	r5, sp
 800179e:	f106 040c 	add.w	r4, r6, #12
 80017a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ae:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017b2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80017b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80017ba:	4640      	mov	r0, r8
 80017bc:	f7ff ff2d 	bl	800161a <joystick_getCoords>

		  motor_CalculatePower(joyPos.xPos, joyPos.yPos, &motorPow);
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	b291      	uxth	r1, r2
 80017c8:	f107 020c 	add.w	r2, r7, #12
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 fc6d 	bl	80020ac <motor_CalculatePower>

		  motor_ApplyPower(motorPow.leftPow, motorPow.rightPow);
 80017d2:	89bb      	ldrh	r3, [r7, #12]
 80017d4:	89fa      	ldrh	r2, [r7, #14]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fcd1 	bl	8002180 <motor_ApplyPower>

		  populateMoves(motorPow.leftPow, motorPow.rightPow, &moveLog);
 80017de:	89bb      	ldrh	r3, [r7, #12]
 80017e0:	89f9      	ldrh	r1, [r7, #14]
 80017e2:	f107 020a 	add.w	r2, r7, #10
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fce0 	bl	80021ac <populateMoves>
//			  displayCurrentMove(joyPos);
//
//			  displayMoveLog(moveLog);
//		  }

		  displayMovementBase();
 80017ec:	f7ff fb01 	bl	8000df2 <displayMovementBase>

		  displayCurrentMove(joyPos);
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80017f8:	f7ff fb14 	bl	8000e24 <displayCurrentMove>

		  displayMoveLog(moveLog);
 80017fc:	897b      	ldrh	r3, [r7, #10]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fb3e 	bl	8000e80 <displayMoveLog>
	  while (getScreenNum() == 0) {
 8001804:	f7fe febc 	bl	8000580 <getScreenNum>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0bc      	beq.n	8001788 <main+0x68>

	  }

	  while (getScreenNum() == 1) {
 800180e:	e011      	b.n	8001834 <main+0x114>
		  LCD_Clear(0,LCD_COLOR_GREEN);
 8001810:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff f9e9 	bl	8000bec <LCD_Clear>

		  displayRunTime(&runtime_min, &runtime_sec);
 800181a:	463a      	mov	r2, r7
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fbaf 	bl	8000f84 <displayRunTime>

		  populateMoves(motorPow.leftPow, motorPow.rightPow, &moveLog);
 8001826:	89bb      	ldrh	r3, [r7, #12]
 8001828:	89f9      	ldrh	r1, [r7, #14]
 800182a:	f107 020a 	add.w	r2, r7, #10
 800182e:	4618      	mov	r0, r3
 8001830:	f000 fcbc 	bl	80021ac <populateMoves>
	  while (getScreenNum() == 1) {
 8001834:	f7fe fea4 	bl	8000580 <getScreenNum>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d0e8      	beq.n	8001810 <main+0xf0>
	  while (getScreenNum() == 0) {
 800183e:	e7e1      	b.n	8001804 <main+0xe4>
 8001840:	20025bd0 	.word	0x20025bd0
 8001844:	200259dc 	.word	0x200259dc
 8001848:	20025a24 	.word	0x20025a24

0800184c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <MX_ADC1_Init+0x98>)
 8001860:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <MX_ADC1_Init+0x9c>)
 8001862:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MX_ADC1_Init+0x98>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800186a:	4b1e      	ldr	r3, [pc, #120]	@ (80018e4 <MX_ADC1_Init+0x98>)
 800186c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001870:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_ADC1_Init+0x98>)
 8001874:	2201      	movs	r2, #1
 8001876:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001878:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_ADC1_Init+0x98>)
 800187a:	2200      	movs	r2, #0
 800187c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800187e:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_ADC1_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MX_ADC1_Init+0x98>)
 8001888:	2200      	movs	r2, #0
 800188a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_ADC1_Init+0x98>)
 800188e:	4a17      	ldr	r2, [pc, #92]	@ (80018ec <MX_ADC1_Init+0xa0>)
 8001890:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <MX_ADC1_Init+0x98>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <MX_ADC1_Init+0x98>)
 800189a:	2201      	movs	r2, #1
 800189c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MX_ADC1_Init+0x98>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <MX_ADC1_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018ac:	480d      	ldr	r0, [pc, #52]	@ (80018e4 <MX_ADC1_Init+0x98>)
 80018ae:	f001 fbb7 	bl	8003020 <HAL_ADC_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018b8:	f000 fbd6 	bl	8002068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80018bc:	2305      	movs	r3, #5
 80018be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_ADC1_Init+0x98>)
 80018ce:	f001 fd89 	bl	80033e4 <HAL_ADC_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018d8:	f000 fbc6 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200259dc 	.word	0x200259dc
 80018e8:	40012000 	.word	0x40012000
 80018ec:	0f000001 	.word	0x0f000001

080018f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018f6:	463b      	mov	r3, r7
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001904:	4a21      	ldr	r2, [pc, #132]	@ (800198c <MX_ADC2_Init+0x9c>)
 8001906:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_ADC2_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_10B;
 800190e:	4b1e      	ldr	r3, [pc, #120]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001910:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001914:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001918:	2201      	movs	r2, #1
 800191a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800191c:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_ADC2_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001922:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192a:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_ADC2_Init+0x98>)
 800192c:	2200      	movs	r2, #0
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001932:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <MX_ADC2_Init+0xa0>)
 8001934:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_ADC2_Init+0x98>)
 800193e:	2201      	movs	r2, #1
 8001940:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_ADC2_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001950:	480d      	ldr	r0, [pc, #52]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001952:	f001 fb65 	bl	8003020 <HAL_ADC_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800195c:	f000 fb84 	bl	8002068 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001960:	230d      	movs	r3, #13
 8001962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800196c:	463b      	mov	r3, r7
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_ADC2_Init+0x98>)
 8001972:	f001 fd37 	bl	80033e4 <HAL_ADC_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800197c:	f000 fb74 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20025a24 	.word	0x20025a24
 800198c:	40012100 	.word	0x40012100
 8001990:	0f000001 	.word	0x0f000001

08001994 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001998:	4b1b      	ldr	r3, [pc, #108]	@ (8001a08 <MX_I2C3_Init+0x74>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <MX_I2C3_Init+0x78>)
 800199c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <MX_I2C3_Init+0x7c>)
 80019a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a4:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019b6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b8:	4b13      	ldr	r3, [pc, #76]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019be:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c4:	4b10      	ldr	r3, [pc, #64]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019d0:	480d      	ldr	r0, [pc, #52]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019d2:	f002 fb8f 	bl	80040f4 <HAL_I2C_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019dc:	f000 fb44 	bl	8002068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019e0:	2100      	movs	r1, #0
 80019e2:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019e4:	f003 fbaa 	bl	800513c <HAL_I2CEx_ConfigAnalogFilter>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80019ee:	f000 fb3b 	bl	8002068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80019f2:	2100      	movs	r1, #0
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_I2C3_Init+0x74>)
 80019f6:	f003 fbdd 	bl	80051b4 <HAL_I2CEx_ConfigDigitalFilter>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a00:	f000 fb32 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20025a6c 	.word	0x20025a6c
 8001a0c:	40005c00 	.word	0x40005c00
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b09a      	sub	sp, #104	@ 0x68
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a1e:	2234      	movs	r2, #52	@ 0x34
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 feac 	bl	8007780 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2234      	movs	r2, #52	@ 0x34
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f005 fea6 	bl	8007780 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a34:	4b4e      	ldr	r3, [pc, #312]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a36:	4a4f      	ldr	r2, [pc, #316]	@ (8001b74 <MX_LTDC_Init+0x160>)
 8001a38:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a40:	4b4b      	ldr	r3, [pc, #300]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a4c:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001a52:	4b47      	ldr	r3, [pc, #284]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a54:	2207      	movs	r2, #7
 8001a56:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001a58:	4b45      	ldr	r3, [pc, #276]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001a5e:	4b44      	ldr	r3, [pc, #272]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a60:	220e      	movs	r2, #14
 8001a62:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001a64:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a66:	2205      	movs	r2, #5
 8001a68:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001a6a:	4b41      	ldr	r3, [pc, #260]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a6c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001a70:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001a72:	4b3f      	ldr	r3, [pc, #252]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a74:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001a78:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a7c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001a80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a84:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001a88:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a8a:	4b39      	ldr	r3, [pc, #228]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a92:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a9a:	4b35      	ldr	r3, [pc, #212]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001aa2:	4833      	ldr	r0, [pc, #204]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001aa4:	f003 fbc6 	bl	8005234 <HAL_LTDC_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001aae:	f000 fadb 	bl	8002068 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad2:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001ad4:	2305      	movs	r3, #5
 8001ad6:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001af6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001afa:	2200      	movs	r2, #0
 8001afc:	4619      	mov	r1, r3
 8001afe:	481c      	ldr	r0, [pc, #112]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001b00:	f003 fc68 	bl	80053d4 <HAL_LTDC_ConfigLayer>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001b0a:	f000 faad 	bl	8002068 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b2e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001b30:	2305      	movs	r3, #5
 8001b32:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	2201      	movs	r2, #1
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_LTDC_Init+0x15c>)
 8001b5a:	f003 fc3b 	bl	80053d4 <HAL_LTDC_ConfigLayer>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001b64:	f000 fa80 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3768      	adds	r7, #104	@ 0x68
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20025ac0 	.word	0x20025ac0
 8001b74:	40016800 	.word	0x40016800

08001b78 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <MX_RNG_Init+0x20>)
 8001b7e:	4a07      	ldr	r2, [pc, #28]	@ (8001b9c <MX_RNG_Init+0x24>)
 8001b80:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	@ (8001b98 <MX_RNG_Init+0x20>)
 8001b84:	f004 fc40 	bl	8006408 <HAL_RNG_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001b8e:	f000 fa6b 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20025b68 	.word	0x20025b68
 8001b9c:	50060800 	.word	0x50060800

08001ba0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001ba6:	4a18      	ldr	r2, [pc, #96]	@ (8001c08 <MX_SPI5_Init+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bb0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bd0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be4:	4b07      	ldr	r3, [pc, #28]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bec:	220a      	movs	r2, #10
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001bf0:	4804      	ldr	r0, [pc, #16]	@ (8001c04 <MX_SPI5_Init+0x64>)
 8001bf2:	f004 fc33 	bl	800645c <HAL_SPI_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001bfc:	f000 fa34 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20025b78 	.word	0x20025b78
 8001c08:	40015000 	.word	0x40015000

08001c0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08e      	sub	sp, #56	@ 0x38
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3c:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c3e:	4a32      	ldr	r2, [pc, #200]	@ (8001d08 <MX_TIM3_Init+0xfc>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8001c42:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c44:	2205      	movs	r2, #5
 8001c46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b2e      	ldr	r3, [pc, #184]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c50:	22c8      	movs	r2, #200	@ 0xc8
 8001c52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c60:	4828      	ldr	r0, [pc, #160]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c62:	f004 fedb 	bl	8006a1c <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001c6c:	f000 f9fc 	bl	8002068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4821      	ldr	r0, [pc, #132]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c7e:	f005 f8ff 	bl	8006e80 <HAL_TIM_ConfigClockSource>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001c88:	f000 f9ee 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c8c:	481d      	ldr	r0, [pc, #116]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001c8e:	f004 ff14 	bl	8006aba <HAL_TIM_PWM_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001c98:	f000 f9e6 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4816      	ldr	r0, [pc, #88]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001cac:	f005 fccc 	bl	8007648 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001cb6:	f000 f9d7 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cba:	2360      	movs	r3, #96	@ 0x60
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480c      	ldr	r0, [pc, #48]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001cd2:	f005 f813 	bl	8006cfc <HAL_TIM_PWM_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001cdc:	f000 f9c4 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4807      	ldr	r0, [pc, #28]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001ce8:	f005 f808 	bl	8006cfc <HAL_TIM_PWM_ConfigChannel>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001cf2:	f000 f9b9 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf6:	4803      	ldr	r0, [pc, #12]	@ (8001d04 <MX_TIM3_Init+0xf8>)
 8001cf8:	f000 fdaa 	bl	8002850 <HAL_TIM_MspPostInit>

}
 8001cfc:	bf00      	nop
 8001cfe:	3738      	adds	r7, #56	@ 0x38
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20025bd0 	.word	0x20025bd0
 8001d08:	40000400 	.word	0x40000400

08001d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08e      	sub	sp, #56	@ 0x38
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
 8001d26:	4bb2      	ldr	r3, [pc, #712]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4ab1      	ldr	r2, [pc, #708]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d2c:	f043 0304 	orr.w	r3, r3, #4
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4baf      	ldr	r3, [pc, #700]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
 8001d42:	4bab      	ldr	r3, [pc, #684]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4aaa      	ldr	r2, [pc, #680]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d48:	f043 0320 	orr.w	r3, r3, #32
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4ba8      	ldr	r3, [pc, #672]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	4ba4      	ldr	r3, [pc, #656]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4aa3      	ldr	r2, [pc, #652]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4ba1      	ldr	r3, [pc, #644]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d72:	61bb      	str	r3, [r7, #24]
 8001d74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	4b9d      	ldr	r3, [pc, #628]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a9c      	ldr	r2, [pc, #624]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b9a      	ldr	r3, [pc, #616]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b96      	ldr	r3, [pc, #600]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a95      	ldr	r2, [pc, #596]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b93      	ldr	r3, [pc, #588]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	4a8e      	ldr	r2, [pc, #568]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dbe:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	4b88      	ldr	r3, [pc, #544]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd2:	4a87      	ldr	r2, [pc, #540]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001dd4:	f043 0310 	orr.w	r3, r3, #16
 8001dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dda:	4b85      	ldr	r3, [pc, #532]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	f003 0310 	and.w	r3, r3, #16
 8001de2:	60bb      	str	r3, [r7, #8]
 8001de4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b81      	ldr	r3, [pc, #516]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	4a80      	ldr	r2, [pc, #512]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001df0:	f043 0308 	orr.w	r3, r3, #8
 8001df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df6:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff0 <MX_GPIO_Init+0x2e4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2116      	movs	r1, #22
 8001e06:	487b      	ldr	r0, [pc, #492]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001e08:	f002 f95a 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2180      	movs	r1, #128	@ 0x80
 8001e10:	4879      	ldr	r0, [pc, #484]	@ (8001ff8 <MX_GPIO_Init+0x2ec>)
 8001e12:	f002 f955 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001e1c:	4877      	ldr	r0, [pc, #476]	@ (8001ffc <MX_GPIO_Init+0x2f0>)
 8001e1e:	f002 f94f 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001e28:	4875      	ldr	r0, [pc, #468]	@ (8002000 <MX_GPIO_Init+0x2f4>)
 8001e2a:	f002 f949 	bl	80040c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001e2e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e40:	230c      	movs	r3, #12
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e48:	4619      	mov	r1, r3
 8001e4a:	486e      	ldr	r0, [pc, #440]	@ (8002004 <MX_GPIO_Init+0x2f8>)
 8001e4c:	f001 fe80 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001e50:	2301      	movs	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e60:	230c      	movs	r3, #12
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4862      	ldr	r0, [pc, #392]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001e6c:	f001 fe70 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8001e70:	2316      	movs	r3, #22
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e84:	4619      	mov	r1, r3
 8001e86:	485b      	ldr	r0, [pc, #364]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001e88:	f001 fe62 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001e8c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4855      	ldr	r0, [pc, #340]	@ (8001ff8 <MX_GPIO_Init+0x2ec>)
 8001ea4:	f001 fe54 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	484e      	ldr	r0, [pc, #312]	@ (8001ff8 <MX_GPIO_Init+0x2ec>)
 8001ec0:	f001 fe46 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ec8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4846      	ldr	r0, [pc, #280]	@ (8001ff4 <MX_GPIO_Init+0x2e8>)
 8001eda:	f001 fe39 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ede:	2304      	movs	r3, #4
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4845      	ldr	r0, [pc, #276]	@ (8002008 <MX_GPIO_Init+0x2fc>)
 8001ef2:	f001 fe2d 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001ef6:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f10:	4619      	mov	r1, r3
 8001f12:	483b      	ldr	r0, [pc, #236]	@ (8002000 <MX_GPIO_Init+0x2f4>)
 8001f14:	f001 fe1c 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001f18:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	4835      	ldr	r0, [pc, #212]	@ (800200c <MX_GPIO_Init+0x300>)
 8001f36:	f001 fe0b 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001f3a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f54:	4619      	mov	r1, r3
 8001f56:	482c      	ldr	r0, [pc, #176]	@ (8002008 <MX_GPIO_Init+0x2fc>)
 8001f58:	f001 fdfa 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f62:	2300      	movs	r3, #0
 8001f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001f6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4825      	ldr	r0, [pc, #148]	@ (8002008 <MX_GPIO_Init+0x2fc>)
 8001f72:	f001 fded 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001f76:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f88:	230c      	movs	r3, #12
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	481a      	ldr	r0, [pc, #104]	@ (8001ffc <MX_GPIO_Init+0x2f0>)
 8001f94:	f001 fddc 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001f98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001faa:	4619      	mov	r1, r3
 8001fac:	4813      	ldr	r0, [pc, #76]	@ (8001ffc <MX_GPIO_Init+0x2f0>)
 8001fae:	f001 fdcf 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001fb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480c      	ldr	r0, [pc, #48]	@ (8001ffc <MX_GPIO_Init+0x2f0>)
 8001fcc:	f001 fdc0 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001fd0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fea:	4619      	mov	r1, r3
 8001fec:	e010      	b.n	8002010 <MX_GPIO_Init+0x304>
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40021800 	.word	0x40021800
 8002004:	40021400 	.word	0x40021400
 8002008:	40020400 	.word	0x40020400
 800200c:	40021000 	.word	0x40021000
 8002010:	4812      	ldr	r0, [pc, #72]	@ (800205c <MX_GPIO_Init+0x350>)
 8002012:	f001 fd9d 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002016:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800202c:	4619      	mov	r1, r3
 800202e:	480c      	ldr	r0, [pc, #48]	@ (8002060 <MX_GPIO_Init+0x354>)
 8002030:	f001 fd8e 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002034:	2360      	movs	r3, #96	@ 0x60
 8002036:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002040:	2303      	movs	r3, #3
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002044:	230c      	movs	r3, #12
 8002046:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204c:	4619      	mov	r1, r3
 800204e:	4805      	ldr	r0, [pc, #20]	@ (8002064 <MX_GPIO_Init+0x358>)
 8002050:	f001 fd7e 	bl	8003b50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002054:	bf00      	nop
 8002056:	3738      	adds	r7, #56	@ 0x38
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40020000 	.word	0x40020000
 8002060:	40021800 	.word	0x40021800
 8002064:	40020400 	.word	0x40020400

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <Error_Handler+0x8>

08002074 <mapp>:
 */

#include "motorDriver.h"
#include "stdlib.h"

uint32_t mapp(uint32_t x, uint32_t in_min, uint32_t in_max, uint32_t out_min, uint32_t out_max) {
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	69b9      	ldr	r1, [r7, #24]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	1a8a      	subs	r2, r1, r2
 800208e:	fb03 f202 	mul.w	r2, r3, r2
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	1acb      	subs	r3, r1, r3
 8002098:	fbb2 f2f3 	udiv	r2, r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4413      	add	r3, r2
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <motor_CalculatePower>:

void motor_CalculatePower(uint16_t xPos, uint16_t yPos, motorPowTypeDef * motorPow) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	4603      	mov	r3, r0
 80020b4:	603a      	str	r2, [r7, #0]
 80020b6:	80fb      	strh	r3, [r7, #6]
 80020b8:	460b      	mov	r3, r1
 80020ba:	80bb      	strh	r3, [r7, #4]

	uint16_t base = (uint16_t) mapp(xPos, 512, 1024, 0, 100);
 80020bc:	88f8      	ldrh	r0, [r7, #6]
 80020be:	2364      	movs	r3, #100	@ 0x64
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	2300      	movs	r3, #0
 80020c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020cc:	f7ff ffd2 	bl	8002074 <mapp>
 80020d0:	4603      	mov	r3, r0
 80020d2:	817b      	strh	r3, [r7, #10]

	// Adjustment value that is applied to both motors
	int16_t adjust = (int16_t) (mapp(512 - yPos, 0, 1024, 0, 100)) * TURNFACTOR;
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80020da:	4618      	mov	r0, r3
 80020dc:	2364      	movs	r3, #100	@ 0x64
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	2300      	movs	r3, #0
 80020e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020e6:	2100      	movs	r1, #0
 80020e8:	f7ff ffc4 	bl	8002074 <mapp>
 80020ec:	4603      	mov	r3, r0
 80020ee:	813b      	strh	r3, [r7, #8]

	// Apply adjustment
	int16_t rightMotor = base - adjust;
 80020f0:	893b      	ldrh	r3, [r7, #8]
 80020f2:	897a      	ldrh	r2, [r7, #10]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	81fb      	strh	r3, [r7, #14]
	int16_t leftMotor = base + adjust;
 80020fa:	893a      	ldrh	r2, [r7, #8]
 80020fc:	897b      	ldrh	r3, [r7, #10]
 80020fe:	4413      	add	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	81bb      	strh	r3, [r7, #12]

	// When joystick is fully back, send HIGH signal to brakePinLeft then set power to 0.
	if ((rightMotor < 0 && leftMotor < 0) || (xPos <= 515 && yPos <= 515)) {
 8002104:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002108:	2b00      	cmp	r3, #0
 800210a:	da03      	bge.n	8002114 <motor_CalculatePower+0x68>
 800210c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db07      	blt.n	8002124 <motor_CalculatePower+0x78>
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 800211a:	d20e      	bcs.n	800213a <motor_CalculatePower+0x8e>
 800211c:	88bb      	ldrh	r3, [r7, #4]
 800211e:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8002122:	d20a      	bcs.n	800213a <motor_CalculatePower+0x8e>
	    rightMotor = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	81fb      	strh	r3, [r7, #14]
	    leftMotor = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	81bb      	strh	r3, [r7, #12]

	    // Store motor power
	    motorPow->leftPow = leftMotor;
 800212c:	89ba      	ldrh	r2, [r7, #12]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	801a      	strh	r2, [r3, #0]
	    motorPow->rightPow = rightMotor;
 8002132:	89fa      	ldrh	r2, [r7, #14]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	805a      	strh	r2, [r3, #2]
 8002138:	e01e      	b.n	8002178 <motor_CalculatePower+0xcc>
	}

	else {

		//////////////// Removing values >255 or <0 and setting them to 255 and 0 respectively ///////////////////////
		if (rightMotor < 0) {
 800213a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800213e:	2b00      	cmp	r3, #0
 8002140:	da01      	bge.n	8002146 <motor_CalculatePower+0x9a>
			rightMotor = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	81fb      	strh	r3, [r7, #14]
		}

		if (leftMotor < 0) {
 8002146:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	da01      	bge.n	8002152 <motor_CalculatePower+0xa6>
			leftMotor = 0;
 800214e:	2300      	movs	r3, #0
 8002150:	81bb      	strh	r3, [r7, #12]
		}

		if (rightMotor > 100) {
 8002152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	dd01      	ble.n	800215e <motor_CalculatePower+0xb2>
			rightMotor = 100;
 800215a:	2364      	movs	r3, #100	@ 0x64
 800215c:	81fb      	strh	r3, [r7, #14]
		}

		if (leftMotor > 100) {
 800215e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002162:	2b64      	cmp	r3, #100	@ 0x64
 8002164:	dd01      	ble.n	800216a <motor_CalculatePower+0xbe>
			leftMotor = 100;
 8002166:	2364      	movs	r3, #100	@ 0x64
 8002168:	81bb      	strh	r3, [r7, #12]
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////


		// Store motor power
		motorPow->leftPow = leftMotor;
 800216a:	89ba      	ldrh	r2, [r7, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	801a      	strh	r2, [r3, #0]
		motorPow->rightPow = rightMotor;
 8002170:	89fa      	ldrh	r2, [r7, #14]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	805a      	strh	r2, [r3, #2]
	}
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <motor_ApplyPower>:

void motor_ApplyPower(uint16_t powerLeft, uint16_t powerRight) {
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	460a      	mov	r2, r1
 800218a:	80fb      	strh	r3, [r7, #6]
 800218c:	4613      	mov	r3, r2
 800218e:	80bb      	strh	r3, [r7, #4]

	// TODO: Disable Brakes Here

	TIM3->CCR1 = powerLeft;		// Set the left CCR register to change PWM
 8002190:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <motor_ApplyPower+0x28>)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM3->CCR3 = powerRight;	// Set the right CCR register to change PWM
 8002196:	4a04      	ldr	r2, [pc, #16]	@ (80021a8 <motor_ApplyPower+0x28>)
 8002198:	88bb      	ldrh	r3, [r7, #4]
 800219a:	63d3      	str	r3, [r2, #60]	@ 0x3c

}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40000400 	.word	0x40000400

080021ac <populateMoves>:

	TIM3->CCR1 = 0;
	TIM3->CCR3 = 0;
}

void populateMoves(uint16_t powerLeft, uint16_t powerRight, uint16_t * moveLog) {
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	603a      	str	r2, [r7, #0]
 80021b6:	80fb      	strh	r3, [r7, #6]
 80021b8:	460b      	mov	r3, r1
 80021ba:	80bb      	strh	r3, [r7, #4]

	// BWD
	if (powerLeft < 5 && powerRight < 5) {
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d813      	bhi.n	80021ea <populateMoves+0x3e>
 80021c2:	88bb      	ldrh	r3, [r7, #4]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d810      	bhi.n	80021ea <populateMoves+0x3e>

		// Check if move is already displayed
		if ((*moveLog & 0xF) != BACKWARD) {
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d05c      	beq.n	800228e <populateMoves+0xe2>

			*moveLog = (*moveLog << 4) | BACKWARD;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	b21b      	sxth	r3, r3
 80021dc:	f043 0302 	orr.w	r3, r3, #2
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	801a      	strh	r2, [r3, #0]
		if ((*moveLog & 0xF) != BACKWARD) {
 80021e8:	e051      	b.n	800228e <populateMoves+0xe2>
	}

	else {

		// LFT
		if (powerLeft < powerRight) {
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d226      	bcs.n	8002240 <populateMoves+0x94>

			// FWD
			if (powerRight - powerLeft < 15) {
 80021f2:	88ba      	ldrh	r2, [r7, #4]
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b0e      	cmp	r3, #14
 80021fa:	dc10      	bgt.n	800221e <populateMoves+0x72>

				// Check if move is already displayed
				if ((*moveLog & 0xF) != FORWARD) {
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	2b01      	cmp	r3, #1
 8002206:	d042      	beq.n	800228e <populateMoves+0xe2>

				*moveLog = (*moveLog << 4) | FORWARD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	b21b      	sxth	r3, r3
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	b21b      	sxth	r3, r3
 8002216:	b29a      	uxth	r2, r3
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	801a      	strh	r2, [r3, #0]
					*moveLog = (*moveLog << 4) | RIGHT;
				}
			}
		}
	}
}
 800221c:	e037      	b.n	800228e <populateMoves+0xe2>
				if ((*moveLog & 0xF) != LEFT) {
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	2b04      	cmp	r3, #4
 8002228:	d031      	beq.n	800228e <populateMoves+0xe2>
					*moveLog = (*moveLog << 4) | LEFT;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	b21b      	sxth	r3, r3
 8002232:	f043 0304 	orr.w	r3, r3, #4
 8002236:	b21b      	sxth	r3, r3
 8002238:	b29a      	uxth	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	801a      	strh	r2, [r3, #0]
}
 800223e:	e026      	b.n	800228e <populateMoves+0xe2>
			if (powerLeft - powerRight < 15) {
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	88bb      	ldrh	r3, [r7, #4]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b0e      	cmp	r3, #14
 8002248:	dc10      	bgt.n	800226c <populateMoves+0xc0>
				if ((*moveLog & 0xF) != FORWARD) {
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	2b01      	cmp	r3, #1
 8002254:	d01b      	beq.n	800228e <populateMoves+0xe2>
					*moveLog = (*moveLog << 4) | FORWARD;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	b21b      	sxth	r3, r3
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	b21b      	sxth	r3, r3
 8002264:	b29a      	uxth	r2, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	801a      	strh	r2, [r3, #0]
}
 800226a:	e010      	b.n	800228e <populateMoves+0xe2>
				if ((*moveLog & 0xF) != RIGHT) {
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	2b08      	cmp	r3, #8
 8002276:	d00a      	beq.n	800228e <populateMoves+0xe2>
					*moveLog = (*moveLog << 4) | RIGHT;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	b21b      	sxth	r3, r3
 8002280:	f043 0308 	orr.w	r3, r3, #8
 8002284:	b21b      	sxth	r3, r3
 8002286:	b29a      	uxth	r2, r3
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	801a      	strh	r2, [r3, #0]
}
 800228c:	e7ff      	b.n	800228e <populateMoves+0xe2>
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a08      	ldr	r2, [pc, #32]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022da:	2007      	movs	r0, #7
 80022dc:	f001 fbc2 	bl	8003a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	@ 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a2e      	ldr	r2, [pc, #184]	@ (80023c4 <HAL_ADC_MspInit+0xd8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d128      	bne.n	8002360 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	4b2d      	ldr	r3, [pc, #180]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a2c      	ldr	r2, [pc, #176]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002332:	4a25      	ldr	r2, [pc, #148]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6313      	str	r3, [r2, #48]	@ 0x30
 800233a:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002346:	2320      	movs	r3, #32
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800234a:	2303      	movs	r3, #3
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 031c 	add.w	r3, r7, #28
 8002356:	4619      	mov	r1, r3
 8002358:	481c      	ldr	r0, [pc, #112]	@ (80023cc <HAL_ADC_MspInit+0xe0>)
 800235a:	f001 fbf9 	bl	8003b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800235e:	e02c      	b.n	80023ba <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_ADC_MspInit+0xe4>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d127      	bne.n	80023ba <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002374:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a0e      	ldr	r2, [pc, #56]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b0c      	ldr	r3, [pc, #48]	@ (80023c8 <HAL_ADC_MspInit+0xdc>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023a2:	2308      	movs	r3, #8
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023a6:	2303      	movs	r3, #3
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ae:	f107 031c 	add.w	r3, r7, #28
 80023b2:	4619      	mov	r1, r3
 80023b4:	4807      	ldr	r0, [pc, #28]	@ (80023d4 <HAL_ADC_MspInit+0xe8>)
 80023b6:	f001 fbcb 	bl	8003b50 <HAL_GPIO_Init>
}
 80023ba:	bf00      	nop
 80023bc:	3730      	adds	r7, #48	@ 0x30
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40012000 	.word	0x40012000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020000 	.word	0x40020000
 80023d0:	40012100 	.word	0x40012100
 80023d4:	40020800 	.word	0x40020800

080023d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a29      	ldr	r2, [pc, #164]	@ (800249c <HAL_I2C_MspInit+0xc4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d14b      	bne.n	8002492 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b28      	ldr	r3, [pc, #160]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a27      	ldr	r2, [pc, #156]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b25      	ldr	r3, [pc, #148]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a20      	ldr	r2, [pc, #128]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b1e      	ldr	r3, [pc, #120]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002432:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002438:	2312      	movs	r3, #18
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002444:	2304      	movs	r3, #4
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4815      	ldr	r0, [pc, #84]	@ (80024a4 <HAL_I2C_MspInit+0xcc>)
 8002450:	f001 fb7e 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800245a:	2312      	movs	r3, #18
 800245c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002466:	2304      	movs	r3, #4
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800246a:	f107 0314 	add.w	r3, r7, #20
 800246e:	4619      	mov	r1, r3
 8002470:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <HAL_I2C_MspInit+0xd0>)
 8002472:	f001 fb6d 	bl	8003b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 8002480:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002484:	6413      	str	r3, [r2, #64]	@ 0x40
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_I2C_MspInit+0xc8>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002492:	bf00      	nop
 8002494:	3728      	adds	r7, #40	@ 0x28
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40005c00 	.word	0x40005c00
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020000 	.word	0x40020000

080024ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b09a      	sub	sp, #104	@ 0x68
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c8:	2230      	movs	r2, #48	@ 0x30
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f005 f957 	bl	8007780 <memset>
  if(hltdc->Instance==LTDC)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a81      	ldr	r2, [pc, #516]	@ (80026dc <HAL_LTDC_MspInit+0x230>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	f040 80fa 	bne.w	80026d2 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80024de:	2308      	movs	r3, #8
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80024e2:	2332      	movs	r3, #50	@ 0x32
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80024e6:	2302      	movs	r3, #2
 80024e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80024ea:	2300      	movs	r3, #0
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fdc8 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80024fe:	f7ff fdb3 	bl	8002068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	4b76      	ldr	r3, [pc, #472]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	4a75      	ldr	r2, [pc, #468]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 800250c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002510:	6453      	str	r3, [r2, #68]	@ 0x44
 8002512:	4b73      	ldr	r3, [pc, #460]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002528:	f043 0320 	orr.w	r3, r3, #32
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b6c      	ldr	r3, [pc, #432]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a67      	ldr	r2, [pc, #412]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b65      	ldr	r3, [pc, #404]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	61bb      	str	r3, [r7, #24]
 8002554:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	4b61      	ldr	r3, [pc, #388]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a60      	ldr	r2, [pc, #384]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b5e      	ldr	r3, [pc, #376]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	4b5a      	ldr	r3, [pc, #360]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257a:	4a59      	ldr	r2, [pc, #356]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 800257c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002580:	6313      	str	r3, [r2, #48]	@ 0x30
 8002582:	4b57      	ldr	r3, [pc, #348]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	6313      	str	r3, [r2, #48]	@ 0x30
 800259e:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b4c      	ldr	r3, [pc, #304]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	4a4b      	ldr	r2, [pc, #300]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 80025b4:	f043 0308 	orr.w	r3, r3, #8
 80025b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ba:	4b49      	ldr	r3, [pc, #292]	@ (80026e0 <HAL_LTDC_MspInit+0x234>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80025c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025d8:	230e      	movs	r3, #14
 80025da:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80025dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80025e0:	4619      	mov	r1, r3
 80025e2:	4840      	ldr	r0, [pc, #256]	@ (80026e4 <HAL_LTDC_MspInit+0x238>)
 80025e4:	f001 fab4 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80025e8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80025ec:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f6:	2300      	movs	r3, #0
 80025f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025fa:	230e      	movs	r3, #14
 80025fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002602:	4619      	mov	r1, r3
 8002604:	4838      	ldr	r0, [pc, #224]	@ (80026e8 <HAL_LTDC_MspInit+0x23c>)
 8002606:	f001 faa3 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800260a:	2303      	movs	r3, #3
 800260c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002616:	2300      	movs	r3, #0
 8002618:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800261a:	2309      	movs	r3, #9
 800261c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002622:	4619      	mov	r1, r3
 8002624:	4831      	ldr	r0, [pc, #196]	@ (80026ec <HAL_LTDC_MspInit+0x240>)
 8002626:	f001 fa93 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800262a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800262e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800263c:	230e      	movs	r3, #14
 800263e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002644:	4619      	mov	r1, r3
 8002646:	4829      	ldr	r0, [pc, #164]	@ (80026ec <HAL_LTDC_MspInit+0x240>)
 8002648:	f001 fa82 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800264c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002650:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002652:	2302      	movs	r3, #2
 8002654:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800265e:	230e      	movs	r3, #14
 8002660:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002662:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002666:	4619      	mov	r1, r3
 8002668:	4821      	ldr	r0, [pc, #132]	@ (80026f0 <HAL_LTDC_MspInit+0x244>)
 800266a:	f001 fa71 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800266e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002672:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002680:	230e      	movs	r3, #14
 8002682:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002688:	4619      	mov	r1, r3
 800268a:	481a      	ldr	r0, [pc, #104]	@ (80026f4 <HAL_LTDC_MspInit+0x248>)
 800268c:	f001 fa60 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002690:	2348      	movs	r3, #72	@ 0x48
 8002692:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026a0:	230e      	movs	r3, #14
 80026a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026a8:	4619      	mov	r1, r3
 80026aa:	4813      	ldr	r0, [pc, #76]	@ (80026f8 <HAL_LTDC_MspInit+0x24c>)
 80026ac:	f001 fa50 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80026b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80026b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b6:	2302      	movs	r3, #2
 80026b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ba:	2300      	movs	r3, #0
 80026bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	2300      	movs	r3, #0
 80026c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026c2:	2309      	movs	r3, #9
 80026c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026ca:	4619      	mov	r1, r3
 80026cc:	4808      	ldr	r0, [pc, #32]	@ (80026f0 <HAL_LTDC_MspInit+0x244>)
 80026ce:	f001 fa3f 	bl	8003b50 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80026d2:	bf00      	nop
 80026d4:	3768      	adds	r7, #104	@ 0x68
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40016800 	.word	0x40016800
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40021400 	.word	0x40021400
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40020800 	.word	0x40020800
 80026f8:	40020c00 	.word	0x40020c00

080026fc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0b      	ldr	r2, [pc, #44]	@ (8002738 <HAL_RNG_MspInit+0x3c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d10d      	bne.n	800272a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <HAL_RNG_MspInit+0x40>)
 8002714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002716:	4a09      	ldr	r2, [pc, #36]	@ (800273c <HAL_RNG_MspInit+0x40>)
 8002718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800271c:	6353      	str	r3, [r2, #52]	@ 0x34
 800271e:	4b07      	ldr	r3, [pc, #28]	@ (800273c <HAL_RNG_MspInit+0x40>)
 8002720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	50060800 	.word	0x50060800
 800273c:	40023800 	.word	0x40023800

08002740 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <HAL_SPI_MspInit+0x84>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d12c      	bne.n	80027bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276a:	4a17      	ldr	r2, [pc, #92]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 800276c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002770:	6453      	str	r3, [r2, #68]	@ 0x44
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b0e      	ldr	r3, [pc, #56]	@ (80027c8 <HAL_SPI_MspInit+0x88>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800279a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800279e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80027ac:	2305      	movs	r3, #5
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4805      	ldr	r0, [pc, #20]	@ (80027cc <HAL_SPI_MspInit+0x8c>)
 80027b8:	f001 f9ca 	bl	8003b50 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	@ 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40015000 	.word	0x40015000
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40021400 	.word	0x40021400

080027d0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a08      	ldr	r2, [pc, #32]	@ (8002800 <HAL_SPI_MspDeInit+0x30>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10a      	bne.n	80027f8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_SPI_MspDeInit+0x34>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a07      	ldr	r2, [pc, #28]	@ (8002804 <HAL_SPI_MspDeInit+0x34>)
 80027e8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80027ee:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80027f2:	4805      	ldr	r0, [pc, #20]	@ (8002808 <HAL_SPI_MspDeInit+0x38>)
 80027f4:	f001 fb58 	bl	8003ea8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40015000 	.word	0x40015000
 8002804:	40023800 	.word	0x40023800
 8002808:	40021400 	.word	0x40021400

0800280c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_TIM_Base_MspInit+0x3c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10d      	bne.n	800283a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_TIM_Base_MspInit+0x40>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a09      	ldr	r2, [pc, #36]	@ (800284c <HAL_TIM_Base_MspInit+0x40>)
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_TIM_Base_MspInit+0x40>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40000400 	.word	0x40000400
 800284c:	40023800 	.word	0x40023800

08002850 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	@ 0x28
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002858:	f107 0314 	add.w	r3, r7, #20
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a21      	ldr	r2, [pc, #132]	@ (80028f4 <HAL_TIM_MspPostInit+0xa4>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d13c      	bne.n	80028ec <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	4b20      	ldr	r3, [pc, #128]	@ (80028f8 <HAL_TIM_MspPostInit+0xa8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	4a1f      	ldr	r2, [pc, #124]	@ (80028f8 <HAL_TIM_MspPostInit+0xa8>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	6313      	str	r3, [r2, #48]	@ 0x30
 8002882:	4b1d      	ldr	r3, [pc, #116]	@ (80028f8 <HAL_TIM_MspPostInit+0xa8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]
 8002892:	4b19      	ldr	r3, [pc, #100]	@ (80028f8 <HAL_TIM_MspPostInit+0xa8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a18      	ldr	r2, [pc, #96]	@ (80028f8 <HAL_TIM_MspPostInit+0xa8>)
 8002898:	f043 0302 	orr.w	r3, r3, #2
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b16      	ldr	r3, [pc, #88]	@ (80028f8 <HAL_TIM_MspPostInit+0xa8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028bc:	2302      	movs	r3, #2
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	480d      	ldr	r0, [pc, #52]	@ (80028fc <HAL_TIM_MspPostInit+0xac>)
 80028c8:	f001 f942 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80028cc:	2310      	movs	r3, #16
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028dc:	2302      	movs	r3, #2
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4806      	ldr	r0, [pc, #24]	@ (8002900 <HAL_TIM_MspPostInit+0xb0>)
 80028e8:	f001 f932 	bl	8003b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3728      	adds	r7, #40	@ 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40000400 	.word	0x40000400
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020800 	.word	0x40020800
 8002900:	40020400 	.word	0x40020400

08002904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <NMI_Handler+0x4>

0800290c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	bf00      	nop
 800291a:	e7fd      	b.n	8002918 <MemManage_Handler+0x4>

0800291c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002920:	bf00      	nop
 8002922:	e7fd      	b.n	8002920 <BusFault_Handler+0x4>

08002924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <UsageFault_Handler+0x4>

0800292c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800295a:	f000 fb1d 	bl	8002f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	@ (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 80029a6:	f000 f965 	bl	8002c74 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 80029aa:	f000 f925 	bl	8002bf8 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80029ae:	2202      	movs	r2, #2
 80029b0:	2103      	movs	r1, #3
 80029b2:	2082      	movs	r0, #130	@ 0x82
 80029b4:	f000 f9b2 	bl	8002d1c <I2C3_Write>
    HAL_Delay(5);
 80029b8:	2005      	movs	r0, #5
 80029ba:	f000 fb0d 	bl	8002fd8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80029be:	2200      	movs	r2, #0
 80029c0:	2103      	movs	r1, #3
 80029c2:	2082      	movs	r0, #130	@ 0x82
 80029c4:	f000 f9aa 	bl	8002d1c <I2C3_Write>
    HAL_Delay(2);
 80029c8:	2002      	movs	r0, #2
 80029ca:	f000 fb05 	bl	8002fd8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 80029ce:	1cba      	adds	r2, r7, #2
 80029d0:	2302      	movs	r3, #2
 80029d2:	2100      	movs	r1, #0
 80029d4:	2082      	movs	r0, #130	@ 0x82
 80029d6:	f000 f9f1 	bl	8002dbc <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 80029e0:	887b      	ldrh	r3, [r7, #2]
 80029e2:	0a1b      	lsrs	r3, r3, #8
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	f640 0211 	movw	r2, #2065	@ 0x811
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d001      	beq.n	80029fa <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e095      	b.n	8002b26 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 80029fa:	2202      	movs	r2, #2
 80029fc:	2103      	movs	r1, #3
 80029fe:	2082      	movs	r0, #130	@ 0x82
 8002a00:	f000 f98c 	bl	8002d1c <I2C3_Write>
    HAL_Delay(5);
 8002a04:	2005      	movs	r0, #5
 8002a06:	f000 fae7 	bl	8002fd8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2103      	movs	r1, #3
 8002a0e:	2082      	movs	r0, #130	@ 0x82
 8002a10:	f000 f984 	bl	8002d1c <I2C3_Write>
    HAL_Delay(2);
 8002a14:	2002      	movs	r0, #2
 8002a16:	f000 fadf 	bl	8002fd8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a1a:	2004      	movs	r0, #4
 8002a1c:	f000 f887 	bl	8002b2e <STMPE811_Read>
 8002a20:	4603      	mov	r3, r0
 8002a22:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 8002a24:	797b      	ldrb	r3, [r7, #5]
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002a2c:	797b      	ldrb	r3, [r7, #5]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2104      	movs	r1, #4
 8002a32:	2082      	movs	r0, #130	@ 0x82
 8002a34:	f000 f972 	bl	8002d1c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 8002a38:	2004      	movs	r0, #4
 8002a3a:	f000 f878 	bl	8002b2e <STMPE811_Read>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 8002a42:	797b      	ldrb	r3, [r7, #5]
 8002a44:	f023 0302 	bic.w	r3, r3, #2
 8002a48:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 8002a4a:	797b      	ldrb	r3, [r7, #5]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	2104      	movs	r1, #4
 8002a50:	2082      	movs	r0, #130	@ 0x82
 8002a52:	f000 f963 	bl	8002d1c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 8002a56:	2249      	movs	r2, #73	@ 0x49
 8002a58:	2120      	movs	r1, #32
 8002a5a:	2082      	movs	r0, #130	@ 0x82
 8002a5c:	f000 f95e 	bl	8002d1c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002a60:	2002      	movs	r0, #2
 8002a62:	f000 fab9 	bl	8002fd8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002a66:	2201      	movs	r2, #1
 8002a68:	2121      	movs	r1, #33	@ 0x21
 8002a6a:	2082      	movs	r0, #130	@ 0x82
 8002a6c:	f000 f956 	bl	8002d1c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002a70:	2017      	movs	r0, #23
 8002a72:	f000 f85c 	bl	8002b2e <STMPE811_Read>
 8002a76:	4603      	mov	r3, r0
 8002a78:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002a7a:	797b      	ldrb	r3, [r7, #5]
 8002a7c:	f043 031e 	orr.w	r3, r3, #30
 8002a80:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002a82:	797b      	ldrb	r3, [r7, #5]
 8002a84:	461a      	mov	r2, r3
 8002a86:	2117      	movs	r1, #23
 8002a88:	2082      	movs	r0, #130	@ 0x82
 8002a8a:	f000 f947 	bl	8002d1c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002a8e:	229a      	movs	r2, #154	@ 0x9a
 8002a90:	2141      	movs	r1, #65	@ 0x41
 8002a92:	2082      	movs	r0, #130	@ 0x82
 8002a94:	f000 f942 	bl	8002d1c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002a98:	2201      	movs	r2, #1
 8002a9a:	214a      	movs	r1, #74	@ 0x4a
 8002a9c:	2082      	movs	r0, #130	@ 0x82
 8002a9e:	f000 f93d 	bl	8002d1c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	214b      	movs	r1, #75	@ 0x4b
 8002aa6:	2082      	movs	r0, #130	@ 0x82
 8002aa8:	f000 f938 	bl	8002d1c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002aac:	2200      	movs	r2, #0
 8002aae:	214b      	movs	r1, #75	@ 0x4b
 8002ab0:	2082      	movs	r0, #130	@ 0x82
 8002ab2:	f000 f933 	bl	8002d1c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2156      	movs	r1, #86	@ 0x56
 8002aba:	2082      	movs	r0, #130	@ 0x82
 8002abc:	f000 f92e 	bl	8002d1c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	2158      	movs	r1, #88	@ 0x58
 8002ac4:	2082      	movs	r0, #130	@ 0x82
 8002ac6:	f000 f929 	bl	8002d1c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002aca:	2203      	movs	r2, #3
 8002acc:	2140      	movs	r1, #64	@ 0x40
 8002ace:	2082      	movs	r0, #130	@ 0x82
 8002ad0:	f000 f924 	bl	8002d1c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002ad4:	22ff      	movs	r2, #255	@ 0xff
 8002ad6:	210b      	movs	r1, #11
 8002ad8:	2082      	movs	r0, #130	@ 0x82
 8002ada:	f000 f91f 	bl	8002d1c <I2C3_Write>

    /* Enable global interrupts */
    #if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

    enableInterruptSupportForTouch();
 8002ade:	f000 f849 	bl	8002b74 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8002ae2:	2009      	movs	r0, #9
 8002ae4:	f000 f823 	bl	8002b2e <STMPE811_Read>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002aec:	797b      	ldrb	r3, [r7, #5]
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8002af4:	797b      	ldrb	r3, [r7, #5]
 8002af6:	461a      	mov	r2, r3
 8002af8:	2109      	movs	r1, #9
 8002afa:	2082      	movs	r0, #130	@ 0x82
 8002afc:	f000 f90e 	bl	8002d1c <I2C3_Write>
    
    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8002b00:	200a      	movs	r0, #10
 8002b02:	f000 f814 	bl	8002b2e <STMPE811_Read>
 8002b06:	4603      	mov	r3, r0
 8002b08:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8002b0a:	797b      	ldrb	r3, [r7, #5]
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8002b12:	797b      	ldrb	r3, [r7, #5]
 8002b14:	461a      	mov	r2, r3
 8002b16:	210a      	movs	r1, #10
 8002b18:	2082      	movs	r0, #130	@ 0x82
 8002b1a:	f000 f8ff 	bl	8002d1c <I2C3_Write>
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002b1e:	20c8      	movs	r0, #200	@ 0xc8
 8002b20:	f000 fa5a 	bl	8002fd8 <HAL_Delay>

    return STMPE811_State_Ok;
 8002b24:	2302      	movs	r3, #2

}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002b38:	f107 020f 	add.w	r2, r7, #15
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	2082      	movs	r0, #130	@ 0x82
 8002b42:	f000 f915 	bl	8002d70 <I2C3_Read>

    return readData;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	460a      	mov	r2, r1
 8002b5a:	71fb      	strb	r3, [r7, #7]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 8002b60:	79ba      	ldrb	r2, [r7, #6]
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	4619      	mov	r1, r3
 8002b66:	2082      	movs	r0, #130	@ 0x82
 8002b68:	f000 f8d8 	bl	8002d1c <I2C3_Write>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <enableInterruptSupportForTouch>:
}

#if COMPILE_TOUCH_INTERRUPT_SUPPORT == 1

void enableInterruptSupportForTouch(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4b14      	ldr	r3, [pc, #80]	@ (8002bd0 <enableInterruptSupportForTouch+0x5c>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b82:	4a13      	ldr	r2, [pc, #76]	@ (8002bd0 <enableInterruptSupportForTouch+0x5c>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b8a:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <enableInterruptSupportForTouch+0x5c>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	603b      	str	r3, [r7, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ba4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ba8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002baa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002bae:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb8:	1d3b      	adds	r3, r7, #4
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4805      	ldr	r0, [pc, #20]	@ (8002bd4 <enableInterruptSupportForTouch+0x60>)
 8002bbe:	f000 ffc7 	bl	8003b50 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002bc2:	2028      	movs	r0, #40	@ 0x28
 8002bc4:	f7ff fece 	bl	8002964 <__NVIC_EnableIRQ>

}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020000 	.word	0x40020000

08002bd8 <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002bdc:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	20025c6c 	.word	0x20025c6c

08002bf8 <I2C3_Init>:

static void I2C3_Init()
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <I2C3_Init+0x6c>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	4a17      	ldr	r2, [pc, #92]	@ (8002c64 <I2C3_Init+0x6c>)
 8002c08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0e:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <I2C3_Init+0x6c>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <I2C3_Init+0x70>)
 8002c1c:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <I2C3_Init+0x74>)
 8002c1e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002c20:	4b11      	ldr	r3, [pc, #68]	@ (8002c68 <I2C3_Init+0x70>)
 8002c22:	4a13      	ldr	r2, [pc, #76]	@ (8002c70 <I2C3_Init+0x78>)
 8002c24:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <I2C3_Init+0x70>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c68 <I2C3_Init+0x70>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c32:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <I2C3_Init+0x70>)
 8002c34:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c38:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <I2C3_Init+0x70>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c40:	4b09      	ldr	r3, [pc, #36]	@ (8002c68 <I2C3_Init+0x70>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002c46:	4808      	ldr	r0, [pc, #32]	@ (8002c68 <I2C3_Init+0x70>)
 8002c48:	f001 fa54 	bl	80040f4 <HAL_I2C_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002c56:	bf00      	nop
 8002c58:	e7fd      	b.n	8002c56 <I2C3_Init+0x5e>
    }
    return;
 8002c5a:	bf00      	nop
}
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	20025c18 	.word	0x20025c18
 8002c6c:	40005c00 	.word	0x40005c00
 8002c70:	000186a0 	.word	0x000186a0

08002c74 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
 8002c88:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60bb      	str	r3, [r7, #8]
 8002c8e:	4b20      	ldr	r3, [pc, #128]	@ (8002d10 <I2C3_MspInit+0x9c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	4a1f      	ldr	r2, [pc, #124]	@ (8002d10 <I2C3_MspInit+0x9c>)
 8002c94:	f043 0304 	orr.w	r3, r3, #4
 8002c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d10 <I2C3_MspInit+0x9c>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
 8002caa:	4b19      	ldr	r3, [pc, #100]	@ (8002d10 <I2C3_MspInit+0x9c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <I2C3_MspInit+0x9c>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb6:	4b16      	ldr	r3, [pc, #88]	@ (8002d10 <I2C3_MspInit+0x9c>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002cc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cc8:	2312      	movs	r3, #18
 8002cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002cd8:	f107 030c 	add.w	r3, r7, #12
 8002cdc:	4619      	mov	r1, r3
 8002cde:	480d      	ldr	r0, [pc, #52]	@ (8002d14 <I2C3_MspInit+0xa0>)
 8002ce0:	f000 ff36 	bl	8003b50 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ce8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cea:	2312      	movs	r3, #18
 8002cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4805      	ldr	r0, [pc, #20]	@ (8002d18 <I2C3_MspInit+0xa4>)
 8002d02:	f000 ff25 	bl	8003b50 <HAL_GPIO_Init>
    
}
 8002d06:	bf00      	nop
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020000 	.word	0x40020000

08002d1c <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af04      	add	r7, sp, #16
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
 8002d26:	460b      	mov	r3, r1
 8002d28:	717b      	strb	r3, [r7, #5]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002d2e:	793b      	ldrb	r3, [r7, #4]
 8002d30:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d32:	797b      	ldrb	r3, [r7, #5]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	88f9      	ldrh	r1, [r7, #6]
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <I2C3_Write+0x48>)
 8002d3a:	9302      	str	r3, [sp, #8]
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	f107 030f 	add.w	r3, r7, #15
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2301      	movs	r3, #1
 8002d48:	4807      	ldr	r0, [pc, #28]	@ (8002d68 <I2C3_Write+0x4c>)
 8002d4a:	f001 fb17 	bl	800437c <HAL_I2C_Mem_Write>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b06      	ldr	r3, [pc, #24]	@ (8002d6c <I2C3_Write+0x50>)
 8002d54:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002d56:	f7ff ff3f 	bl	8002bd8 <verifyHAL_I2C_IS_OKAY>
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	0003d090 	.word	0x0003d090
 8002d68:	20025c18 	.word	0x20025c18
 8002d6c:	20025c6c 	.word	0x20025c6c

08002d70 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	4603      	mov	r3, r0
 8002d78:	603a      	str	r2, [r7, #0]
 8002d7a:	71fb      	strb	r3, [r7, #7]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	b299      	uxth	r1, r3
 8002d84:	79bb      	ldrb	r3, [r7, #6]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <I2C3_Read+0x40>)
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2301      	movs	r3, #1
 8002d96:	4807      	ldr	r0, [pc, #28]	@ (8002db4 <I2C3_Read+0x44>)
 8002d98:	f001 fbea 	bl	8004570 <HAL_I2C_Mem_Read>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b05      	ldr	r3, [pc, #20]	@ (8002db8 <I2C3_Read+0x48>)
 8002da2:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002da4:	f7ff ff18 	bl	8002bd8 <verifyHAL_I2C_IS_OKAY>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	0003d090 	.word	0x0003d090
 8002db4:	20025c18 	.word	0x20025c18
 8002db8:	20025c6c 	.word	0x20025c6c

08002dbc <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	603a      	str	r2, [r7, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	71fb      	strb	r3, [r7, #7]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	71bb      	strb	r3, [r7, #6]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	79bb      	ldrb	r3, [r7, #6]
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b07      	ldr	r3, [pc, #28]	@ (8002df8 <I2C3_MulitByteRead+0x3c>)
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	88bb      	ldrh	r3, [r7, #4]
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2301      	movs	r3, #1
 8002de8:	4804      	ldr	r0, [pc, #16]	@ (8002dfc <I2C3_MulitByteRead+0x40>)
 8002dea:	f001 fbc1 	bl	8004570 <HAL_I2C_Mem_Read>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	0003d090 	.word	0x0003d090
 8002dfc:	20025c18 	.word	0x20025c18

08002e00 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e18:	4a14      	ldr	r2, [pc, #80]	@ (8002e6c <_sbrk+0x5c>)
 8002e1a:	4b15      	ldr	r3, [pc, #84]	@ (8002e70 <_sbrk+0x60>)
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <_sbrk+0x64>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <_sbrk+0x64>)
 8002e2e:	4a12      	ldr	r2, [pc, #72]	@ (8002e78 <_sbrk+0x68>)
 8002e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e32:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <_sbrk+0x64>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d207      	bcs.n	8002e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e40:	f004 fca6 	bl	8007790 <__errno>
 8002e44:	4603      	mov	r3, r0
 8002e46:	220c      	movs	r2, #12
 8002e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	e009      	b.n	8002e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e50:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e56:	4b07      	ldr	r3, [pc, #28]	@ (8002e74 <_sbrk+0x64>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	4a05      	ldr	r2, [pc, #20]	@ (8002e74 <_sbrk+0x64>)
 8002e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e62:	68fb      	ldr	r3, [r7, #12]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	20030000 	.word	0x20030000
 8002e70:	00000400 	.word	0x00000400
 8002e74:	20025c70 	.word	0x20025c70
 8002e78:	20025dc0 	.word	0x20025dc0

08002e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e80:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <SystemInit+0x20>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	4a05      	ldr	r2, [pc, #20]	@ (8002e9c <SystemInit+0x20>)
 8002e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e90:	bf00      	nop
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ea4:	f7ff ffea 	bl	8002e7c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea8:	480c      	ldr	r0, [pc, #48]	@ (8002edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eaa:	490d      	ldr	r1, [pc, #52]	@ (8002ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb0:	e002      	b.n	8002eb8 <LoopCopyDataInit>

08002eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb6:	3304      	adds	r3, #4

08002eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ebc:	d3f9      	bcc.n	8002eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8002eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec4:	e001      	b.n	8002eca <LoopFillZerobss>

08002ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec8:	3204      	adds	r2, #4

08002eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ecc:	d3fb      	bcc.n	8002ec6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002ece:	f004 fc65 	bl	800779c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ed2:	f7fe fc25 	bl	8001720 <main>
  bx  lr    
 8002ed6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ed8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002ee4:	080092cc 	.word	0x080092cc
  ldr r2, =_sbss
 8002ee8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002eec:	20025dc0 	.word	0x20025dc0

08002ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC_IRQHandler>
	...

08002ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f34 <HAL_Init+0x40>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f34 <HAL_Init+0x40>)
 8002efe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f04:	4b0b      	ldr	r3, [pc, #44]	@ (8002f34 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <HAL_Init+0x40>)
 8002f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f10:	4b08      	ldr	r3, [pc, #32]	@ (8002f34 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a07      	ldr	r2, [pc, #28]	@ (8002f34 <HAL_Init+0x40>)
 8002f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f000 fda1 	bl	8003a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 f808 	bl	8002f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f28:	f7ff f9b8 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40023c00 	.word	0x40023c00

08002f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f40:	4b12      	ldr	r3, [pc, #72]	@ (8002f8c <HAL_InitTick+0x54>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <HAL_InitTick+0x58>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fdc7 	bl	8003aea <HAL_SYSTICK_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00e      	b.n	8002f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d80a      	bhi.n	8002f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f000 fd81 	bl	8003a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f78:	4a06      	ldr	r2, [pc, #24]	@ (8002f94 <HAL_InitTick+0x5c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	20000010 	.word	0x20000010
 8002f90:	20000018 	.word	0x20000018
 8002f94:	20000014 	.word	0x20000014

08002f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f9c:	4b06      	ldr	r3, [pc, #24]	@ (8002fb8 <HAL_IncTick+0x20>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b06      	ldr	r3, [pc, #24]	@ (8002fbc <HAL_IncTick+0x24>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a04      	ldr	r2, [pc, #16]	@ (8002fbc <HAL_IncTick+0x24>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	20000018 	.word	0x20000018
 8002fbc:	20025c74 	.word	0x20025c74

08002fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_GetTick+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20025c74 	.word	0x20025c74

08002fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe0:	f7ff ffee 	bl	8002fc0 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d005      	beq.n	8002ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800301c <HAL_Delay+0x44>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ffe:	bf00      	nop
 8003000:	f7ff ffde 	bl	8002fc0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	429a      	cmp	r2, r3
 800300e:	d8f7      	bhi.n	8003000 <HAL_Delay+0x28>
  {
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000018 	.word	0x20000018

08003020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e033      	b.n	800309e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff f954 	bl	80022ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003066:	f023 0302 	bic.w	r3, r3, #2
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fae8 	bl	8003648 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40
 800308e:	e001      	b.n	8003094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800309c:	7bfb      	ldrb	r3, [r7, #15]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_Start+0x1a>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0b2      	b.n	8003228 <HAL_ADC_Start+0x180>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d018      	beq.n	800310a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030e8:	4b52      	ldr	r3, [pc, #328]	@ (8003234 <HAL_ADC_Start+0x18c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a52      	ldr	r2, [pc, #328]	@ (8003238 <HAL_ADC_Start+0x190>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	0c9a      	lsrs	r2, r3, #18
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030fc:	e002      	b.n	8003104 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3b01      	subs	r3, #1
 8003102:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f9      	bne.n	80030fe <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d17a      	bne.n	800320e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003136:	2b00      	cmp	r3, #0
 8003138:	d007      	beq.n	800314a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003142:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003152:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003156:	d106      	bne.n	8003166 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315c:	f023 0206 	bic.w	r2, r3, #6
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	645a      	str	r2, [r3, #68]	@ 0x44
 8003164:	e002      	b.n	800316c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003174:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_ADC_Start+0x194>)
 8003176:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003180:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	2b00      	cmp	r3, #0
 800318c:	d12a      	bne.n	80031e4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2b      	ldr	r2, [pc, #172]	@ (8003240 <HAL_ADC_Start+0x198>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d015      	beq.n	80031c4 <HAL_ADC_Start+0x11c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a29      	ldr	r2, [pc, #164]	@ (8003244 <HAL_ADC_Start+0x19c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d105      	bne.n	80031ae <HAL_ADC_Start+0x106>
 80031a2:	4b26      	ldr	r3, [pc, #152]	@ (800323c <HAL_ADC_Start+0x194>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a25      	ldr	r2, [pc, #148]	@ (8003248 <HAL_ADC_Start+0x1a0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d136      	bne.n	8003226 <HAL_ADC_Start+0x17e>
 80031b8:	4b20      	ldr	r3, [pc, #128]	@ (800323c <HAL_ADC_Start+0x194>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d130      	bne.n	8003226 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d129      	bne.n	8003226 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	e020      	b.n	8003226 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a15      	ldr	r2, [pc, #84]	@ (8003240 <HAL_ADC_Start+0x198>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d11b      	bne.n	8003226 <HAL_ADC_Start+0x17e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d114      	bne.n	8003226 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	e00b      	b.n	8003226 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	20000010 	.word	0x20000010
 8003238:	431bde83 	.word	0x431bde83
 800323c:	40012300 	.word	0x40012300
 8003240:	40012000 	.word	0x40012000
 8003244:	40012100 	.word	0x40012100
 8003248:	40012200 	.word	0x40012200

0800324c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Stop+0x16>
 800325e:	2302      	movs	r3, #2
 8003260:	e021      	b.n	80032a6 <HAL_ADC_Stop+0x5a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ce:	d113      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032de:	d10b      	bne.n	80032f8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e063      	b.n	80033c0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80032f8:	f7ff fe62 	bl	8002fc0 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032fe:	e021      	b.n	8003344 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d01d      	beq.n	8003344 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_ADC_PollForConversion+0x6c>
 800330e:	f7ff fe57 	bl	8002fc0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d212      	bcs.n	8003344 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d00b      	beq.n	8003344 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	f043 0204 	orr.w	r2, r3, #4
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e03d      	b.n	80033c0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b02      	cmp	r3, #2
 8003350:	d1d6      	bne.n	8003300 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f06f 0212 	mvn.w	r2, #18
 800335a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d123      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800337a:	2b00      	cmp	r3, #0
 800337c:	d11f      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003396:	2b00      	cmp	r3, #0
 8003398:	d111      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d105      	bne.n	80033be <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x1c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e113      	b.n	8003628 <HAL_ADC_ConfigChannel+0x244>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b09      	cmp	r3, #9
 800340e:	d925      	bls.n	800345c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68d9      	ldr	r1, [r3, #12]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	3b1e      	subs	r3, #30
 8003426:	2207      	movs	r2, #7
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43da      	mvns	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	400a      	ands	r2, r1
 8003434:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68d9      	ldr	r1, [r3, #12]
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	b29b      	uxth	r3, r3
 8003446:	4618      	mov	r0, r3
 8003448:	4603      	mov	r3, r0
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	4403      	add	r3, r0
 800344e:	3b1e      	subs	r3, #30
 8003450:	409a      	lsls	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	e022      	b.n	80034a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	b29b      	uxth	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	2207      	movs	r2, #7
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	400a      	ands	r2, r1
 800347e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6919      	ldr	r1, [r3, #16]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	4618      	mov	r0, r3
 8003492:	4603      	mov	r3, r0
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	4403      	add	r3, r0
 8003498:	409a      	lsls	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b06      	cmp	r3, #6
 80034a8:	d824      	bhi.n	80034f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b05      	subs	r3, #5
 80034bc:	221f      	movs	r2, #31
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	400a      	ands	r2, r1
 80034ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	4618      	mov	r0, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	3b05      	subs	r3, #5
 80034e6:	fa00 f203 	lsl.w	r2, r0, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80034f2:	e04c      	b.n	800358e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b0c      	cmp	r3, #12
 80034fa:	d824      	bhi.n	8003546 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	3b23      	subs	r3, #35	@ 0x23
 800350e:	221f      	movs	r2, #31
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43da      	mvns	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	400a      	ands	r2, r1
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	3b23      	subs	r3, #35	@ 0x23
 8003538:	fa00 f203 	lsl.w	r2, r0, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	631a      	str	r2, [r3, #48]	@ 0x30
 8003544:	e023      	b.n	800358e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	3b41      	subs	r3, #65	@ 0x41
 8003558:	221f      	movs	r2, #31
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	400a      	ands	r2, r1
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	3b41      	subs	r3, #65	@ 0x41
 8003582:	fa00 f203 	lsl.w	r2, r0, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800358e:	4b29      	ldr	r3, [pc, #164]	@ (8003634 <HAL_ADC_ConfigChannel+0x250>)
 8003590:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a28      	ldr	r2, [pc, #160]	@ (8003638 <HAL_ADC_ConfigChannel+0x254>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d10f      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x1d8>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b12      	cmp	r3, #18
 80035a2:	d10b      	bne.n	80035bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <HAL_ADC_ConfigChannel+0x254>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d12b      	bne.n	800361e <HAL_ADC_ConfigChannel+0x23a>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1c      	ldr	r2, [pc, #112]	@ (800363c <HAL_ADC_ConfigChannel+0x258>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <HAL_ADC_ConfigChannel+0x1f4>
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b11      	cmp	r3, #17
 80035d6:	d122      	bne.n	800361e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a11      	ldr	r2, [pc, #68]	@ (800363c <HAL_ADC_ConfigChannel+0x258>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d111      	bne.n	800361e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <HAL_ADC_ConfigChannel+0x25c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a11      	ldr	r2, [pc, #68]	@ (8003644 <HAL_ADC_ConfigChannel+0x260>)
 8003600:	fba2 2303 	umull	r2, r3, r2, r3
 8003604:	0c9a      	lsrs	r2, r3, #18
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003610:	e002      	b.n	8003618 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3b01      	subs	r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f9      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40012300 	.word	0x40012300
 8003638:	40012000 	.word	0x40012000
 800363c:	10000012 	.word	0x10000012
 8003640:	20000010 	.word	0x20000010
 8003644:	431bde83 	.word	0x431bde83

08003648 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003650:	4b79      	ldr	r3, [pc, #484]	@ (8003838 <ADC_Init+0x1f0>)
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800367c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6859      	ldr	r1, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	021a      	lsls	r2, r3, #8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6899      	ldr	r1, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	4a58      	ldr	r2, [pc, #352]	@ (800383c <ADC_Init+0x1f4>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6899      	ldr	r1, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003710:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e00f      	b.n	8003746 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003734:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003744:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0202 	bic.w	r2, r2, #2
 8003754:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6899      	ldr	r1, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	7e1b      	ldrb	r3, [r3, #24]
 8003760:	005a      	lsls	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01b      	beq.n	80037ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003782:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003792:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	3b01      	subs	r3, #1
 80037a0:	035a      	lsls	r2, r3, #13
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
 80037aa:	e007      	b.n	80037bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80037ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	051a      	lsls	r2, r3, #20
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037fe:	025a      	lsls	r2, r3, #9
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6899      	ldr	r1, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	029a      	lsls	r2, r3, #10
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40012300 	.word	0x40012300
 800383c:	0f000001 	.word	0x0f000001

08003840 <__NVIC_SetPriorityGrouping>:
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003850:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800386c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003872:	4a04      	ldr	r2, [pc, #16]	@ (8003884 <__NVIC_SetPriorityGrouping+0x44>)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	60d3      	str	r3, [r2, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <__NVIC_GetPriorityGrouping>:
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <__NVIC_GetPriorityGrouping+0x18>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	0a1b      	lsrs	r3, r3, #8
 8003892:	f003 0307 	and.w	r3, r3, #7
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <__NVIC_EnableIRQ>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	db0b      	blt.n	80038ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038b6:	79fb      	ldrb	r3, [r7, #7]
 80038b8:	f003 021f 	and.w	r2, r3, #31
 80038bc:	4907      	ldr	r1, [pc, #28]	@ (80038dc <__NVIC_EnableIRQ+0x38>)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	2001      	movs	r0, #1
 80038c6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000e100 	.word	0xe000e100

080038e0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db12      	blt.n	8003918 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	f003 021f 	and.w	r2, r3, #31
 80038f8:	490a      	ldr	r1, [pc, #40]	@ (8003924 <__NVIC_DisableIRQ+0x44>)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2001      	movs	r0, #1
 8003902:	fa00 f202 	lsl.w	r2, r0, r2
 8003906:	3320      	adds	r3, #32
 8003908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800390c:	f3bf 8f4f 	dsb	sy
}
 8003910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003912:	f3bf 8f6f 	isb	sy
}
 8003916:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	2b00      	cmp	r3, #0
 8003938:	db0c      	blt.n	8003954 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	f003 021f 	and.w	r2, r3, #31
 8003940:	4907      	ldr	r1, [pc, #28]	@ (8003960 <__NVIC_ClearPendingIRQ+0x38>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	2001      	movs	r0, #1
 800394a:	fa00 f202 	lsl.w	r2, r0, r2
 800394e:	3360      	adds	r3, #96	@ 0x60
 8003950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e000e100 	.word	0xe000e100

08003964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003974:	2b00      	cmp	r3, #0
 8003976:	db0a      	blt.n	800398e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	490c      	ldr	r1, [pc, #48]	@ (80039b0 <__NVIC_SetPriority+0x4c>)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	0112      	lsls	r2, r2, #4
 8003984:	b2d2      	uxtb	r2, r2
 8003986:	440b      	add	r3, r1
 8003988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800398c:	e00a      	b.n	80039a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4908      	ldr	r1, [pc, #32]	@ (80039b4 <__NVIC_SetPriority+0x50>)
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	3b04      	subs	r3, #4
 800399c:	0112      	lsls	r2, r2, #4
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	440b      	add	r3, r1
 80039a2:	761a      	strb	r2, [r3, #24]
}
 80039a4:	bf00      	nop
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	e000e100 	.word	0xe000e100
 80039b4:	e000ed00 	.word	0xe000ed00

080039b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b089      	sub	sp, #36	@ 0x24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f1c3 0307 	rsb	r3, r3, #7
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	bf28      	it	cs
 80039d6:	2304      	movcs	r3, #4
 80039d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3304      	adds	r3, #4
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d902      	bls.n	80039e8 <NVIC_EncodePriority+0x30>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3b03      	subs	r3, #3
 80039e6:	e000      	b.n	80039ea <NVIC_EncodePriority+0x32>
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	401a      	ands	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a00:	f04f 31ff 	mov.w	r1, #4294967295
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	43d9      	mvns	r1, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a10:	4313      	orrs	r3, r2
         );
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3724      	adds	r7, #36	@ 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a30:	d301      	bcc.n	8003a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a32:	2301      	movs	r3, #1
 8003a34:	e00f      	b.n	8003a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a36:	4a0a      	ldr	r2, [pc, #40]	@ (8003a60 <SysTick_Config+0x40>)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a3e:	210f      	movs	r1, #15
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
 8003a44:	f7ff ff8e 	bl	8003964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <SysTick_Config+0x40>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a4e:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <SysTick_Config+0x40>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	e000e010 	.word	0xe000e010

08003a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff fee7 	bl	8003840 <__NVIC_SetPriorityGrouping>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b086      	sub	sp, #24
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8c:	f7ff fefc 	bl	8003888 <__NVIC_GetPriorityGrouping>
 8003a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	6978      	ldr	r0, [r7, #20]
 8003a98:	f7ff ff8e 	bl	80039b8 <NVIC_EncodePriority>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff5d 	bl	8003964 <__NVIC_SetPriority>
}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff feef 	bl	80038a4 <__NVIC_EnableIRQ>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff feff 	bl	80038e0 <__NVIC_DisableIRQ>
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff94 	bl	8003a20 <SysTick_Config>
 8003af8:	4603      	mov	r3, r0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff ff09 	bl	8003928 <__NVIC_ClearPendingIRQ>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2201      	movs	r2, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003b3a:	4a04      	ldr	r2, [pc, #16]	@ (8003b4c <HAL_EXTI_ClearPending+0x2c>)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6153      	str	r3, [r2, #20]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40013c00 	.word	0x40013c00

08003b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b089      	sub	sp, #36	@ 0x24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	e177      	b.n	8003e5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	f040 8166 	bne.w	8003e56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d005      	beq.n	8003ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d130      	bne.n	8003c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	2203      	movs	r2, #3
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bd8:	2201      	movs	r2, #1
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 0201 	and.w	r2, r3, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d017      	beq.n	8003c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	43db      	mvns	r3, r3
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	4013      	ands	r3, r2
 8003c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d123      	bne.n	8003c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	08da      	lsrs	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3208      	adds	r2, #8
 8003c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	220f      	movs	r2, #15
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f003 0203 	and.w	r2, r3, #3
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80c0 	beq.w	8003e56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	4b66      	ldr	r3, [pc, #408]	@ (8003e74 <HAL_GPIO_Init+0x324>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	4a65      	ldr	r2, [pc, #404]	@ (8003e74 <HAL_GPIO_Init+0x324>)
 8003ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ce6:	4b63      	ldr	r3, [pc, #396]	@ (8003e74 <HAL_GPIO_Init+0x324>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cf2:	4a61      	ldr	r2, [pc, #388]	@ (8003e78 <HAL_GPIO_Init+0x328>)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	089b      	lsrs	r3, r3, #2
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	220f      	movs	r2, #15
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	4013      	ands	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a58      	ldr	r2, [pc, #352]	@ (8003e7c <HAL_GPIO_Init+0x32c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d037      	beq.n	8003d8e <HAL_GPIO_Init+0x23e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a57      	ldr	r2, [pc, #348]	@ (8003e80 <HAL_GPIO_Init+0x330>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d031      	beq.n	8003d8a <HAL_GPIO_Init+0x23a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a56      	ldr	r2, [pc, #344]	@ (8003e84 <HAL_GPIO_Init+0x334>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d02b      	beq.n	8003d86 <HAL_GPIO_Init+0x236>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a55      	ldr	r2, [pc, #340]	@ (8003e88 <HAL_GPIO_Init+0x338>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d025      	beq.n	8003d82 <HAL_GPIO_Init+0x232>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a54      	ldr	r2, [pc, #336]	@ (8003e8c <HAL_GPIO_Init+0x33c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d01f      	beq.n	8003d7e <HAL_GPIO_Init+0x22e>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a53      	ldr	r2, [pc, #332]	@ (8003e90 <HAL_GPIO_Init+0x340>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d019      	beq.n	8003d7a <HAL_GPIO_Init+0x22a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a52      	ldr	r2, [pc, #328]	@ (8003e94 <HAL_GPIO_Init+0x344>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_GPIO_Init+0x226>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a51      	ldr	r2, [pc, #324]	@ (8003e98 <HAL_GPIO_Init+0x348>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00d      	beq.n	8003d72 <HAL_GPIO_Init+0x222>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a50      	ldr	r2, [pc, #320]	@ (8003e9c <HAL_GPIO_Init+0x34c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <HAL_GPIO_Init+0x21e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a4f      	ldr	r2, [pc, #316]	@ (8003ea0 <HAL_GPIO_Init+0x350>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <HAL_GPIO_Init+0x21a>
 8003d66:	2309      	movs	r3, #9
 8003d68:	e012      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	e010      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d6e:	2308      	movs	r3, #8
 8003d70:	e00e      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d72:	2307      	movs	r3, #7
 8003d74:	e00c      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d76:	2306      	movs	r3, #6
 8003d78:	e00a      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	e008      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	e006      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d82:	2303      	movs	r3, #3
 8003d84:	e004      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e002      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <HAL_GPIO_Init+0x240>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f002 0203 	and.w	r2, r2, #3
 8003d96:	0092      	lsls	r2, r2, #2
 8003d98:	4093      	lsls	r3, r2
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da0:	4935      	ldr	r1, [pc, #212]	@ (8003e78 <HAL_GPIO_Init+0x328>)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	089b      	lsrs	r3, r3, #2
 8003da6:	3302      	adds	r3, #2
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dd2:	4a34      	ldr	r2, [pc, #208]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dd8:	4b32      	ldr	r3, [pc, #200]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dfc:	4a29      	ldr	r2, [pc, #164]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e02:	4b28      	ldr	r3, [pc, #160]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e26:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	43db      	mvns	r3, r3
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e50:	4a14      	ldr	r2, [pc, #80]	@ (8003ea4 <HAL_GPIO_Init+0x354>)
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b0f      	cmp	r3, #15
 8003e60:	f67f ae84 	bls.w	8003b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3724      	adds	r7, #36	@ 0x24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40013800 	.word	0x40013800
 8003e7c:	40020000 	.word	0x40020000
 8003e80:	40020400 	.word	0x40020400
 8003e84:	40020800 	.word	0x40020800
 8003e88:	40020c00 	.word	0x40020c00
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40021400 	.word	0x40021400
 8003e94:	40021800 	.word	0x40021800
 8003e98:	40021c00 	.word	0x40021c00
 8003e9c:	40022000 	.word	0x40022000
 8003ea0:	40022400 	.word	0x40022400
 8003ea4:	40013c00 	.word	0x40013c00

08003ea8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	e0d9      	b.n	8004078 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	f040 80c9 	bne.w	8004072 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ee0:	4a6b      	ldr	r2, [pc, #428]	@ (8004090 <HAL_GPIO_DeInit+0x1e8>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	089b      	lsrs	r3, r3, #2
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	220f      	movs	r2, #15
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	4013      	ands	r3, r2
 8003f00:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a63      	ldr	r2, [pc, #396]	@ (8004094 <HAL_GPIO_DeInit+0x1ec>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d037      	beq.n	8003f7a <HAL_GPIO_DeInit+0xd2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a62      	ldr	r2, [pc, #392]	@ (8004098 <HAL_GPIO_DeInit+0x1f0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_GPIO_DeInit+0xce>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a61      	ldr	r2, [pc, #388]	@ (800409c <HAL_GPIO_DeInit+0x1f4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02b      	beq.n	8003f72 <HAL_GPIO_DeInit+0xca>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a60      	ldr	r2, [pc, #384]	@ (80040a0 <HAL_GPIO_DeInit+0x1f8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d025      	beq.n	8003f6e <HAL_GPIO_DeInit+0xc6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a5f      	ldr	r2, [pc, #380]	@ (80040a4 <HAL_GPIO_DeInit+0x1fc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01f      	beq.n	8003f6a <HAL_GPIO_DeInit+0xc2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80040a8 <HAL_GPIO_DeInit+0x200>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d019      	beq.n	8003f66 <HAL_GPIO_DeInit+0xbe>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a5d      	ldr	r2, [pc, #372]	@ (80040ac <HAL_GPIO_DeInit+0x204>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <HAL_GPIO_DeInit+0xba>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a5c      	ldr	r2, [pc, #368]	@ (80040b0 <HAL_GPIO_DeInit+0x208>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00d      	beq.n	8003f5e <HAL_GPIO_DeInit+0xb6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a5b      	ldr	r2, [pc, #364]	@ (80040b4 <HAL_GPIO_DeInit+0x20c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d007      	beq.n	8003f5a <HAL_GPIO_DeInit+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80040b8 <HAL_GPIO_DeInit+0x210>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_GPIO_DeInit+0xae>
 8003f52:	2309      	movs	r3, #9
 8003f54:	e012      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f56:	230a      	movs	r3, #10
 8003f58:	e010      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f5a:	2308      	movs	r3, #8
 8003f5c:	e00e      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f5e:	2307      	movs	r3, #7
 8003f60:	e00c      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f62:	2306      	movs	r3, #6
 8003f64:	e00a      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f66:	2305      	movs	r3, #5
 8003f68:	e008      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	e006      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e004      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_GPIO_DeInit+0xd4>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	f002 0203 	and.w	r2, r2, #3
 8003f82:	0092      	lsls	r2, r2, #2
 8003f84:	4093      	lsls	r3, r2
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d132      	bne.n	8003ff2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4949      	ldr	r1, [pc, #292]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003f9a:	4b48      	ldr	r3, [pc, #288]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	4946      	ldr	r1, [pc, #280]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003fa8:	4b44      	ldr	r3, [pc, #272]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	4942      	ldr	r1, [pc, #264]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003fb6:	4b41      	ldr	r3, [pc, #260]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	493f      	ldr	r1, [pc, #252]	@ (80040bc <HAL_GPIO_DeInit+0x214>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	220f      	movs	r2, #15
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003fd4:	4a2e      	ldr	r2, [pc, #184]	@ (8004090 <HAL_GPIO_DeInit+0x1e8>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	43da      	mvns	r2, r3
 8003fe4:	482a      	ldr	r0, [pc, #168]	@ (8004090 <HAL_GPIO_DeInit+0x1e8>)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	400a      	ands	r2, r1
 8003fec:	3302      	adds	r3, #2
 8003fee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2103      	movs	r1, #3
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	401a      	ands	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	08da      	lsrs	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3208      	adds	r2, #8
 8004010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	220f      	movs	r2, #15
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	08d2      	lsrs	r2, r2, #3
 8004028:	4019      	ands	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	2103      	movs	r1, #3
 800403c:	fa01 f303 	lsl.w	r3, r1, r3
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	2101      	movs	r1, #1
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	fa01 f303 	lsl.w	r3, r1, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	401a      	ands	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2103      	movs	r1, #3
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	401a      	ands	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	3301      	adds	r3, #1
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b0f      	cmp	r3, #15
 800407c:	f67f af22 	bls.w	8003ec4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004080:	bf00      	nop
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40013800 	.word	0x40013800
 8004094:	40020000 	.word	0x40020000
 8004098:	40020400 	.word	0x40020400
 800409c:	40020800 	.word	0x40020800
 80040a0:	40020c00 	.word	0x40020c00
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40021400 	.word	0x40021400
 80040ac:	40021800 	.word	0x40021800
 80040b0:	40021c00 	.word	0x40021c00
 80040b4:	40022000 	.word	0x40022000
 80040b8:	40022400 	.word	0x40022400
 80040bc:	40013c00 	.word	0x40013c00

080040c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	807b      	strh	r3, [r7, #2]
 80040cc:	4613      	mov	r3, r2
 80040ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040d0:	787b      	ldrb	r3, [r7, #1]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040d6:	887a      	ldrh	r2, [r7, #2]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040dc:	e003      	b.n	80040e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040de:	887b      	ldrh	r3, [r7, #2]
 80040e0:	041a      	lsls	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	619a      	str	r2, [r3, #24]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e12b      	b.n	800435e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fe f95c 	bl	80023d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	@ 0x24
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004158:	f001 ff82 	bl	8006060 <HAL_RCC_GetPCLK1Freq>
 800415c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4a81      	ldr	r2, [pc, #516]	@ (8004368 <HAL_I2C_Init+0x274>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d807      	bhi.n	8004178 <HAL_I2C_Init+0x84>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a80      	ldr	r2, [pc, #512]	@ (800436c <HAL_I2C_Init+0x278>)
 800416c:	4293      	cmp	r3, r2
 800416e:	bf94      	ite	ls
 8004170:	2301      	movls	r3, #1
 8004172:	2300      	movhi	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e006      	b.n	8004186 <HAL_I2C_Init+0x92>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a7d      	ldr	r2, [pc, #500]	@ (8004370 <HAL_I2C_Init+0x27c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	bf94      	ite	ls
 8004180:	2301      	movls	r3, #1
 8004182:	2300      	movhi	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0e7      	b.n	800435e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a78      	ldr	r2, [pc, #480]	@ (8004374 <HAL_I2C_Init+0x280>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0c9b      	lsrs	r3, r3, #18
 8004198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004368 <HAL_I2C_Init+0x274>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d802      	bhi.n	80041c8 <HAL_I2C_Init+0xd4>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	3301      	adds	r3, #1
 80041c6:	e009      	b.n	80041dc <HAL_I2C_Init+0xe8>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	4a69      	ldr	r2, [pc, #420]	@ (8004378 <HAL_I2C_Init+0x284>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	3301      	adds	r3, #1
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	495c      	ldr	r1, [pc, #368]	@ (8004368 <HAL_I2C_Init+0x274>)
 80041f8:	428b      	cmp	r3, r1
 80041fa:	d819      	bhi.n	8004230 <HAL_I2C_Init+0x13c>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1e59      	subs	r1, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fbb1 f3f3 	udiv	r3, r1, r3
 800420a:	1c59      	adds	r1, r3, #1
 800420c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004210:	400b      	ands	r3, r1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_I2C_Init+0x138>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1e59      	subs	r1, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fbb1 f3f3 	udiv	r3, r1, r3
 8004224:	3301      	adds	r3, #1
 8004226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422a:	e051      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 800422c:	2304      	movs	r3, #4
 800422e:	e04f      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <HAL_I2C_Init+0x168>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1e58      	subs	r0, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	440b      	add	r3, r1
 8004246:	fbb0 f3f3 	udiv	r3, r0, r3
 800424a:	3301      	adds	r3, #1
 800424c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e012      	b.n	8004282 <HAL_I2C_Init+0x18e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1e58      	subs	r0, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	0099      	lsls	r1, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004272:	3301      	adds	r3, #1
 8004274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Init+0x196>
 8004286:	2301      	movs	r3, #1
 8004288:	e022      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10e      	bne.n	80042b0 <HAL_I2C_Init+0x1bc>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1e58      	subs	r0, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	440b      	add	r3, r1
 80042a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ae:	e00f      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1e58      	subs	r0, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	0099      	lsls	r1, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	6809      	ldr	r1, [r1, #0]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6911      	ldr	r1, [r2, #16]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	000186a0 	.word	0x000186a0
 800436c:	001e847f 	.word	0x001e847f
 8004370:	003d08ff 	.word	0x003d08ff
 8004374:	431bde83 	.word	0x431bde83
 8004378:	10624dd3 	.word	0x10624dd3

0800437c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	460b      	mov	r3, r1
 8004390:	813b      	strh	r3, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004396:	f7fe fe13 	bl	8002fc0 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	f040 80d9 	bne.w	800455c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2319      	movs	r3, #25
 80043b0:	2201      	movs	r2, #1
 80043b2:	496d      	ldr	r1, [pc, #436]	@ (8004568 <HAL_I2C_Mem_Write+0x1ec>)
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fc8b 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	e0cc      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_Mem_Write+0x56>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0c5      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d007      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2221      	movs	r2, #33	@ 0x21
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2240      	movs	r2, #64	@ 0x40
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a4d      	ldr	r2, [pc, #308]	@ (800456c <HAL_I2C_Mem_Write+0x1f0>)
 8004438:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800443a:	88f8      	ldrh	r0, [r7, #6]
 800443c:	893a      	ldrh	r2, [r7, #8]
 800443e:	8979      	ldrh	r1, [r7, #10]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	4603      	mov	r3, r0
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fac2 	bl	80049d4 <I2C_RequestMemoryWrite>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d052      	beq.n	80044fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e081      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fd50 	bl	8004f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06b      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d11b      	bne.n	80044fc <HAL_I2C_Mem_Write+0x180>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d017      	beq.n	80044fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1aa      	bne.n	800445a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fd43 	bl	8004f94 <I2C_WaitOnBTFFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	2b04      	cmp	r3, #4
 800451a:	d107      	bne.n	800452c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e016      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	00100002 	.word	0x00100002
 800456c:	ffff0000 	.word	0xffff0000

08004570 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	@ 0x30
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	461a      	mov	r2, r3
 800457e:	4603      	mov	r3, r0
 8004580:	817b      	strh	r3, [r7, #10]
 8004582:	460b      	mov	r3, r1
 8004584:	813b      	strh	r3, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800458a:	f7fe fd19 	bl	8002fc0 <HAL_GetTick>
 800458e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b20      	cmp	r3, #32
 800459a:	f040 8214 	bne.w	80049c6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	2319      	movs	r3, #25
 80045a4:	2201      	movs	r2, #1
 80045a6:	497b      	ldr	r1, [pc, #492]	@ (8004794 <HAL_I2C_Mem_Read+0x224>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fb91 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045b4:	2302      	movs	r3, #2
 80045b6:	e207      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_I2C_Mem_Read+0x56>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e200      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d007      	beq.n	80045ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2222      	movs	r2, #34	@ 0x22
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2240      	movs	r2, #64	@ 0x40
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004616:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800461c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4a5b      	ldr	r2, [pc, #364]	@ (8004798 <HAL_I2C_Mem_Read+0x228>)
 800462c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800462e:	88f8      	ldrh	r0, [r7, #6]
 8004630:	893a      	ldrh	r2, [r7, #8]
 8004632:	8979      	ldrh	r1, [r7, #10]
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	4603      	mov	r3, r0
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fa5e 	bl	8004b00 <I2C_RequestMemoryRead>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e1bc      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d113      	bne.n	800467e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004656:	2300      	movs	r3, #0
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	623b      	str	r3, [r7, #32]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	623b      	str	r3, [r7, #32]
 800466a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e190      	b.n	80049a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004682:	2b01      	cmp	r3, #1
 8004684:	d11b      	bne.n	80046be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004694:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e170      	b.n	80049a0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d11b      	bne.n	80046fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	61bb      	str	r3, [r7, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	e150      	b.n	80049a0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fe:	2300      	movs	r3, #0
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699b      	ldr	r3, [r3, #24]
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004714:	e144      	b.n	80049a0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471a:	2b03      	cmp	r3, #3
 800471c:	f200 80f1 	bhi.w	8004902 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004724:	2b01      	cmp	r3, #1
 8004726:	d123      	bne.n	8004770 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 fc79 	bl	8005024 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e145      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004758:	3b01      	subs	r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004764:	b29b      	uxth	r3, r3
 8004766:	3b01      	subs	r3, #1
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800476e:	e117      	b.n	80049a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004774:	2b02      	cmp	r3, #2
 8004776:	d14e      	bne.n	8004816 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	2200      	movs	r2, #0
 8004780:	4906      	ldr	r1, [pc, #24]	@ (800479c <HAL_I2C_Mem_Read+0x22c>)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 faa4 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e11a      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
 8004792:	bf00      	nop
 8004794:	00100002 	.word	0x00100002
 8004798:	ffff0000 	.word	0xffff0000
 800479c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c2:	1c5a      	adds	r2, r3, #1
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004814:	e0c4      	b.n	80049a0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800481c:	2200      	movs	r2, #0
 800481e:	496c      	ldr	r1, [pc, #432]	@ (80049d0 <HAL_I2C_Mem_Read+0x460>)
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fa55 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e0cb      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800483e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004878:	2200      	movs	r2, #0
 800487a:	4955      	ldr	r1, [pc, #340]	@ (80049d0 <HAL_I2C_Mem_Read+0x460>)
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fa27 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e09d      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800489a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d8:	b2d2      	uxtb	r2, r2
 80048da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004900:	e04e      	b.n	80049a0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004904:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 fb8c 	bl	8005024 <I2C_WaitOnRXNEFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e058      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d124      	bne.n	80049a0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800495a:	2b03      	cmp	r3, #3
 800495c:	d107      	bne.n	800496e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498a:	3b01      	subs	r3, #1
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f47f aeb6 	bne.w	8004716 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3728      	adds	r7, #40	@ 0x28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	00010004 	.word	0x00010004

080049d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af02      	add	r7, sp, #8
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	817b      	strh	r3, [r7, #10]
 80049e6:	460b      	mov	r3, r1
 80049e8:	813b      	strh	r3, [r7, #8]
 80049ea:	4613      	mov	r3, r2
 80049ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f960 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a24:	d103      	bne.n	8004a2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e05f      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a32:	897b      	ldrh	r3, [r7, #10]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	461a      	mov	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	6a3a      	ldr	r2, [r7, #32]
 8004a46:	492d      	ldr	r1, [pc, #180]	@ (8004afc <I2C_RequestMemoryWrite+0x128>)
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f9bb 	bl	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e04c      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a70:	6a39      	ldr	r1, [r7, #32]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fa46 	bl	8004f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00d      	beq.n	8004a9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d107      	bne.n	8004a96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e02b      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa0:	893b      	ldrh	r3, [r7, #8]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	611a      	str	r2, [r3, #16]
 8004aaa:	e021      	b.n	8004af0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004aac:	893b      	ldrh	r3, [r7, #8]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fa20 	bl	8004f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d107      	bne.n	8004ae2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e005      	b.n	8004af2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae6:	893b      	ldrh	r3, [r7, #8]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	00010002 	.word	0x00010002

08004b00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	4608      	mov	r0, r1
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	817b      	strh	r3, [r7, #10]
 8004b12:	460b      	mov	r3, r1
 8004b14:	813b      	strh	r3, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b46:	68f8      	ldr	r0, [r7, #12]
 8004b48:	f000 f8c2 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b60:	d103      	bne.n	8004b6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0aa      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b6e:	897b      	ldrh	r3, [r7, #10]
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	461a      	mov	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	4952      	ldr	r1, [pc, #328]	@ (8004ccc <I2C_RequestMemoryRead+0x1cc>)
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f91d 	bl	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e097      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b94:	2300      	movs	r3, #0
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bac:	6a39      	ldr	r1, [r7, #32]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 f9a8 	bl	8004f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00d      	beq.n	8004bd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d107      	bne.n	8004bd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e076      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bdc:	893b      	ldrh	r3, [r7, #8]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	611a      	str	r2, [r3, #16]
 8004be6:	e021      	b.n	8004c2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004be8:	893b      	ldrh	r3, [r7, #8]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf8:	6a39      	ldr	r1, [r7, #32]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f982 	bl	8004f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00d      	beq.n	8004c22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d107      	bne.n	8004c1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e050      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c22:	893b      	ldrh	r3, [r7, #8]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2e:	6a39      	ldr	r1, [r7, #32]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f967 	bl	8004f04 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00d      	beq.n	8004c58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d107      	bne.n	8004c54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e035      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f82b 	bl	8004cd0 <I2C_WaitOnFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c8e:	d103      	bne.n	8004c98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e013      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c9c:	897b      	ldrh	r3, [r7, #10]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	6a3a      	ldr	r2, [r7, #32]
 8004cb0:	4906      	ldr	r1, [pc, #24]	@ (8004ccc <I2C_RequestMemoryRead+0x1cc>)
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f886 	bl	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	00010002 	.word	0x00010002

08004cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce0:	e048      	b.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d044      	beq.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fe f969 	bl	8002fc0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d139      	bne.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	0c1b      	lsrs	r3, r3, #16
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d10d      	bne.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	43da      	mvns	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	e00c      	b.n	8004d40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	43da      	mvns	r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	4013      	ands	r3, r2
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d116      	bne.n	8004d74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e023      	b.n	8004dbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d10d      	bne.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	e00c      	b.n	8004db4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	43da      	mvns	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d093      	beq.n	8004ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dd2:	e071      	b.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de2:	d123      	bne.n	8004e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	f043 0204 	orr.w	r2, r3, #4
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e067      	b.n	8004efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d041      	beq.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e34:	f7fe f8c4 	bl	8002fc0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d302      	bcc.n	8004e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d136      	bne.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10c      	bne.n	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	e00b      	b.n	8004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	43da      	mvns	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	bf14      	ite	ne
 8004e80:	2301      	movne	r3, #1
 8004e82:	2300      	moveq	r3, #0
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d016      	beq.n	8004eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e021      	b.n	8004efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	0c1b      	lsrs	r3, r3, #16
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d10c      	bne.n	8004edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	43da      	mvns	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	bf14      	ite	ne
 8004ed4:	2301      	movne	r3, #1
 8004ed6:	2300      	moveq	r3, #0
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	e00b      	b.n	8004ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	43da      	mvns	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f47f af6d 	bne.w	8004dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f10:	e034      	b.n	8004f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f8e3 	bl	80050de <I2C_IsAcknowledgeFailed>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e034      	b.n	8004f8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d028      	beq.n	8004f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7fe f849 	bl	8002fc0 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d11d      	bne.n	8004f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b80      	cmp	r3, #128	@ 0x80
 8004f4c:	d016      	beq.n	8004f7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	f043 0220 	orr.w	r2, r3, #32
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e007      	b.n	8004f8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d1c3      	bne.n	8004f12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fa0:	e034      	b.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f89b 	bl	80050de <I2C_IsAcknowledgeFailed>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e034      	b.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d028      	beq.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fe f801 	bl	8002fc0 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11d      	bne.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f003 0304 	and.w	r3, r3, #4
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d016      	beq.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff8:	f043 0220 	orr.w	r2, r3, #32
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e007      	b.n	800501c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b04      	cmp	r3, #4
 8005018:	d1c3      	bne.n	8004fa2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005030:	e049      	b.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b10      	cmp	r3, #16
 800503e:	d119      	bne.n	8005074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0210 	mvn.w	r2, #16
 8005048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e030      	b.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005074:	f7fd ffa4 	bl	8002fc0 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d302      	bcc.n	800508a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d11d      	bne.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b40      	cmp	r3, #64	@ 0x40
 8005096:	d016      	beq.n	80050c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	f043 0220 	orr.w	r2, r3, #32
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e007      	b.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d0:	2b40      	cmp	r3, #64	@ 0x40
 80050d2:	d1ae      	bne.n	8005032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f4:	d11b      	bne.n	800512e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f043 0204 	orr.w	r2, r3, #4
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b20      	cmp	r3, #32
 8005150:	d129      	bne.n	80051a6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2224      	movs	r2, #36	@ 0x24
 8005156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0210 	bic.w	r2, r2, #16
 8005178:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	e000      	b.n	80051a8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80051a6:	2302      	movs	r3, #2
  }
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	d12a      	bne.n	8005224 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2224      	movs	r2, #36	@ 0x24
 80051d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80051ee:	89fb      	ldrh	r3, [r7, #14]
 80051f0:	f023 030f 	bic.w	r3, r3, #15
 80051f4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	89fb      	ldrh	r3, [r7, #14]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	89fa      	ldrh	r2, [r7, #14]
 8005206:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
  }
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0bf      	b.n	80053c6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fd f926 	bl	80024ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2202      	movs	r2, #2
 8005264:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005276:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800528c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6899      	ldr	r1, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b4a      	ldr	r3, [pc, #296]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 80052a8:	400b      	ands	r3, r1
 80052aa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	041b      	lsls	r3, r3, #16
 80052b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6899      	ldr	r1, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68d9      	ldr	r1, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b3e      	ldr	r3, [pc, #248]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 80052d6:	400b      	ands	r3, r1
 80052d8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	041b      	lsls	r3, r3, #16
 80052e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68d9      	ldr	r1, [r3, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6919      	ldr	r1, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	4b33      	ldr	r3, [pc, #204]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 8005304:	400b      	ands	r3, r1
 8005306:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	041b      	lsls	r3, r3, #16
 800530e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6919      	ldr	r1, [r3, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	430a      	orrs	r2, r1
 8005324:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6959      	ldr	r1, [r3, #20]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	4b27      	ldr	r3, [pc, #156]	@ (80053d0 <HAL_LTDC_Init+0x19c>)
 8005332:	400b      	ands	r3, r1
 8005334:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6959      	ldr	r1, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005364:	041b      	lsls	r3, r3, #16
 8005366:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005376:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0206 	orr.w	r2, r2, #6
 80053a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	f000f800 	.word	0xf000f800

080053d4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_LTDC_ConfigLayer+0x1a>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e02c      	b.n	8005448 <HAL_LTDC_ConfigLayer+0x74>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2202      	movs	r2, #2
 80053fa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2134      	movs	r1, #52	@ 0x34
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	4413      	add	r3, r2
 800540a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4614      	mov	r4, r2
 8005412:	461d      	mov	r5, r3
 8005414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800541c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f811 	bl	8005450 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2201      	movs	r2, #1
 8005434:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bdb0      	pop	{r4, r5, r7, pc}

08005450 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005450:	b480      	push	{r7}
 8005452:	b089      	sub	sp, #36	@ 0x24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546c:	4413      	add	r3, r2
 800546e:	041b      	lsls	r3, r3, #16
 8005470:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	01db      	lsls	r3, r3, #7
 800547c:	4413      	add	r3, r2
 800547e:	3384      	adds	r3, #132	@ 0x84
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	4611      	mov	r1, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	01d2      	lsls	r2, r2, #7
 800548c:	440a      	add	r2, r1
 800548e:	3284      	adds	r2, #132	@ 0x84
 8005490:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005494:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054a6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80054a8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	01db      	lsls	r3, r3, #7
 80054b4:	440b      	add	r3, r1
 80054b6:	3384      	adds	r3, #132	@ 0x84
 80054b8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054be:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ce:	4413      	add	r3, r2
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	01db      	lsls	r3, r3, #7
 80054de:	4413      	add	r3, r2
 80054e0:	3384      	adds	r3, #132	@ 0x84
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	4611      	mov	r1, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	01d2      	lsls	r2, r2, #7
 80054ee:	440a      	add	r2, r1
 80054f0:	3284      	adds	r2, #132	@ 0x84
 80054f2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80054f6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005506:	4413      	add	r3, r2
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4619      	mov	r1, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	01db      	lsls	r3, r3, #7
 8005514:	440b      	add	r3, r1
 8005516:	3384      	adds	r3, #132	@ 0x84
 8005518:	4619      	mov	r1, r3
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	4313      	orrs	r3, r2
 800551e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	01db      	lsls	r3, r3, #7
 800552a:	4413      	add	r3, r2
 800552c:	3384      	adds	r3, #132	@ 0x84
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	4611      	mov	r1, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	01d2      	lsls	r2, r2, #7
 800553a:	440a      	add	r2, r1
 800553c:	3284      	adds	r2, #132	@ 0x84
 800553e:	f023 0307 	bic.w	r3, r3, #7
 8005542:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	01db      	lsls	r3, r3, #7
 800554e:	4413      	add	r3, r2
 8005550:	3384      	adds	r3, #132	@ 0x84
 8005552:	461a      	mov	r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	061b      	lsls	r3, r3, #24
 8005574:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	4413      	add	r3, r2
 8005582:	3384      	adds	r3, #132	@ 0x84
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	01db      	lsls	r3, r3, #7
 8005590:	4413      	add	r3, r2
 8005592:	3384      	adds	r3, #132	@ 0x84
 8005594:	461a      	mov	r2, r3
 8005596:	2300      	movs	r3, #0
 8005598:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055a0:	461a      	mov	r2, r3
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	431a      	orrs	r2, r3
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4619      	mov	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	01db      	lsls	r3, r3, #7
 80055b4:	440b      	add	r3, r1
 80055b6:	3384      	adds	r3, #132	@ 0x84
 80055b8:	4619      	mov	r1, r3
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	01db      	lsls	r3, r3, #7
 80055ca:	4413      	add	r3, r2
 80055cc:	3384      	adds	r3, #132	@ 0x84
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	4611      	mov	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	01d2      	lsls	r2, r2, #7
 80055da:	440a      	add	r2, r1
 80055dc:	3284      	adds	r2, #132	@ 0x84
 80055de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	461a      	mov	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	01db      	lsls	r3, r3, #7
 80055ee:	4413      	add	r3, r2
 80055f0:	3384      	adds	r3, #132	@ 0x84
 80055f2:	461a      	mov	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	461a      	mov	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	01db      	lsls	r3, r3, #7
 8005604:	4413      	add	r3, r2
 8005606:	3384      	adds	r3, #132	@ 0x84
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	4611      	mov	r1, r2
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	01d2      	lsls	r2, r2, #7
 8005614:	440a      	add	r2, r1
 8005616:	3284      	adds	r2, #132	@ 0x84
 8005618:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	6809      	ldr	r1, [r1, #0]
 800562e:	4608      	mov	r0, r1
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	01c9      	lsls	r1, r1, #7
 8005634:	4401      	add	r1, r0
 8005636:	3184      	adds	r1, #132	@ 0x84
 8005638:	4313      	orrs	r3, r2
 800563a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	01db      	lsls	r3, r3, #7
 8005646:	4413      	add	r3, r2
 8005648:	3384      	adds	r3, #132	@ 0x84
 800564a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	461a      	mov	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	01db      	lsls	r3, r3, #7
 8005656:	4413      	add	r3, r2
 8005658:	3384      	adds	r3, #132	@ 0x84
 800565a:	461a      	mov	r2, r3
 800565c:	2300      	movs	r3, #0
 800565e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	01db      	lsls	r3, r3, #7
 800566a:	4413      	add	r3, r2
 800566c:	3384      	adds	r3, #132	@ 0x84
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d102      	bne.n	8005684 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800567e:	2304      	movs	r3, #4
 8005680:	61fb      	str	r3, [r7, #28]
 8005682:	e01b      	b.n	80056bc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d102      	bne.n	8005692 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800568c:	2303      	movs	r3, #3
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e014      	b.n	80056bc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	2b04      	cmp	r3, #4
 8005698:	d00b      	beq.n	80056b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d007      	beq.n	80056b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d003      	beq.n	80056b2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056ae:	2b07      	cmp	r3, #7
 80056b0:	d102      	bne.n	80056b8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80056b2:	2302      	movs	r3, #2
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	e001      	b.n	80056bc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80056b8:	2301      	movs	r3, #1
 80056ba:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	01db      	lsls	r3, r3, #7
 80056c6:	4413      	add	r3, r2
 80056c8:	3384      	adds	r3, #132	@ 0x84
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	4611      	mov	r1, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	01d2      	lsls	r2, r2, #7
 80056d6:	440a      	add	r2, r1
 80056d8:	3284      	adds	r2, #132	@ 0x84
 80056da:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80056de:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e4:	69fa      	ldr	r2, [r7, #28]
 80056e6:	fb02 f303 	mul.w	r3, r2, r3
 80056ea:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	1acb      	subs	r3, r1, r3
 80056f6:	69f9      	ldr	r1, [r7, #28]
 80056f8:	fb01 f303 	mul.w	r3, r1, r3
 80056fc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	6809      	ldr	r1, [r1, #0]
 8005702:	4608      	mov	r0, r1
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	01c9      	lsls	r1, r1, #7
 8005708:	4401      	add	r1, r0
 800570a:	3184      	adds	r1, #132	@ 0x84
 800570c:	4313      	orrs	r3, r2
 800570e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	01db      	lsls	r3, r3, #7
 800571a:	4413      	add	r3, r2
 800571c:	3384      	adds	r3, #132	@ 0x84
 800571e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	4611      	mov	r1, r2
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	01d2      	lsls	r2, r2, #7
 800572a:	440a      	add	r2, r1
 800572c:	3284      	adds	r2, #132	@ 0x84
 800572e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005732:	f023 0307 	bic.w	r3, r3, #7
 8005736:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4413      	add	r3, r2
 8005744:	3384      	adds	r3, #132	@ 0x84
 8005746:	461a      	mov	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800574c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	01db      	lsls	r3, r3, #7
 8005758:	4413      	add	r3, r2
 800575a:	3384      	adds	r3, #132	@ 0x84
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	4611      	mov	r1, r2
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	01d2      	lsls	r2, r2, #7
 8005768:	440a      	add	r2, r1
 800576a:	3284      	adds	r2, #132	@ 0x84
 800576c:	f043 0301 	orr.w	r3, r3, #1
 8005770:	6013      	str	r3, [r2, #0]
}
 8005772:	bf00      	nop
 8005774:	3724      	adds	r7, #36	@ 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e267      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d075      	beq.n	800588a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800579e:	4b88      	ldr	r3, [pc, #544]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 030c 	and.w	r3, r3, #12
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00c      	beq.n	80057c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057aa:	4b85      	ldr	r3, [pc, #532]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057b2:	2b08      	cmp	r3, #8
 80057b4:	d112      	bne.n	80057dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057b6:	4b82      	ldr	r3, [pc, #520]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057c2:	d10b      	bne.n	80057dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	4b7e      	ldr	r3, [pc, #504]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05b      	beq.n	8005888 <HAL_RCC_OscConfig+0x108>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d157      	bne.n	8005888 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e242      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057e4:	d106      	bne.n	80057f4 <HAL_RCC_OscConfig+0x74>
 80057e6:	4b76      	ldr	r3, [pc, #472]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a75      	ldr	r2, [pc, #468]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e01d      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057fc:	d10c      	bne.n	8005818 <HAL_RCC_OscConfig+0x98>
 80057fe:	4b70      	ldr	r3, [pc, #448]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6f      	ldr	r2, [pc, #444]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	4b6d      	ldr	r3, [pc, #436]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a6c      	ldr	r2, [pc, #432]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	e00b      	b.n	8005830 <HAL_RCC_OscConfig+0xb0>
 8005818:	4b69      	ldr	r3, [pc, #420]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a68      	ldr	r2, [pc, #416]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800581e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	4b66      	ldr	r3, [pc, #408]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a65      	ldr	r2, [pc, #404]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800582a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800582e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d013      	beq.n	8005860 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005838:	f7fd fbc2 	bl	8002fc0 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005840:	f7fd fbbe 	bl	8002fc0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	@ 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e207      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005852:	4b5b      	ldr	r3, [pc, #364]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0xc0>
 800585e:	e014      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005860:	f7fd fbae 	bl	8002fc0 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005868:	f7fd fbaa 	bl	8002fc0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b64      	cmp	r3, #100	@ 0x64
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1f3      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800587a:	4b51      	ldr	r3, [pc, #324]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0xe8>
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d063      	beq.n	800595e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005896:	4b4a      	ldr	r3, [pc, #296]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00b      	beq.n	80058ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058a2:	4b47      	ldr	r3, [pc, #284]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d11c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ae:	4b44      	ldr	r3, [pc, #272]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058ba:	4b41      	ldr	r3, [pc, #260]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x152>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e1c7      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	4b3b      	ldr	r3, [pc, #236]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4937      	ldr	r1, [pc, #220]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058e6:	e03a      	b.n	800595e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058f0:	4b34      	ldr	r3, [pc, #208]	@ (80059c4 <HAL_RCC_OscConfig+0x244>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f6:	f7fd fb63 	bl	8002fc0 <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058fe:	f7fd fb5f 	bl	8002fc0 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e1a8      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005910:	4b2b      	ldr	r3, [pc, #172]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0f0      	beq.n	80058fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	4925      	ldr	r1, [pc, #148]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]
 8005930:	e015      	b.n	800595e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005932:	4b24      	ldr	r3, [pc, #144]	@ (80059c4 <HAL_RCC_OscConfig+0x244>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005938:	f7fd fb42 	bl	8002fc0 <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005940:	f7fd fb3e 	bl	8002fc0 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e187      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005952:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0308 	and.w	r3, r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	d036      	beq.n	80059d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d016      	beq.n	80059a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005972:	4b15      	ldr	r3, [pc, #84]	@ (80059c8 <HAL_RCC_OscConfig+0x248>)
 8005974:	2201      	movs	r2, #1
 8005976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005978:	f7fd fb22 	bl	8002fc0 <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800597e:	e008      	b.n	8005992 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005980:	f7fd fb1e 	bl	8002fc0 <HAL_GetTick>
 8005984:	4602      	mov	r2, r0
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	2b02      	cmp	r3, #2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e167      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005992:	4b0b      	ldr	r3, [pc, #44]	@ (80059c0 <HAL_RCC_OscConfig+0x240>)
 8005994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0f0      	beq.n	8005980 <HAL_RCC_OscConfig+0x200>
 800599e:	e01b      	b.n	80059d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059a0:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <HAL_RCC_OscConfig+0x248>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a6:	f7fd fb0b 	bl	8002fc0 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ac:	e00e      	b.n	80059cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ae:	f7fd fb07 	bl	8002fc0 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d907      	bls.n	80059cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e150      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
 80059c0:	40023800 	.word	0x40023800
 80059c4:	42470000 	.word	0x42470000
 80059c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	4b88      	ldr	r3, [pc, #544]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1ea      	bne.n	80059ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	f000 8097 	beq.w	8005b14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ea:	4b81      	ldr	r3, [pc, #516]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10f      	bne.n	8005a16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	4b7d      	ldr	r3, [pc, #500]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	4a7c      	ldr	r2, [pc, #496]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a06:	4b7a      	ldr	r3, [pc, #488]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a16:	4b77      	ldr	r3, [pc, #476]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d118      	bne.n	8005a54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a22:	4b74      	ldr	r3, [pc, #464]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a73      	ldr	r2, [pc, #460]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2e:	f7fd fac7 	bl	8002fc0 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a36:	f7fd fac3 	bl	8002fc0 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e10c      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a48:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf4 <HAL_RCC_OscConfig+0x474>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f0      	beq.n	8005a36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d106      	bne.n	8005a6a <HAL_RCC_OscConfig+0x2ea>
 8005a5c:	4b64      	ldr	r3, [pc, #400]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a60:	4a63      	ldr	r2, [pc, #396]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a68:	e01c      	b.n	8005aa4 <HAL_RCC_OscConfig+0x324>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d10c      	bne.n	8005a8c <HAL_RCC_OscConfig+0x30c>
 8005a72:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a76:	4a5e      	ldr	r2, [pc, #376]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a78:	f043 0304 	orr.w	r3, r3, #4
 8005a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a82:	4a5b      	ldr	r2, [pc, #364]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a84:	f043 0301 	orr.w	r3, r3, #1
 8005a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a8a:	e00b      	b.n	8005aa4 <HAL_RCC_OscConfig+0x324>
 8005a8c:	4b58      	ldr	r3, [pc, #352]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a90:	4a57      	ldr	r2, [pc, #348]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a92:	f023 0301 	bic.w	r3, r3, #1
 8005a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a98:	4b55      	ldr	r3, [pc, #340]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9c:	4a54      	ldr	r2, [pc, #336]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005a9e:	f023 0304 	bic.w	r3, r3, #4
 8005aa2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d015      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aac:	f7fd fa88 	bl	8002fc0 <HAL_GetTick>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab2:	e00a      	b.n	8005aca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab4:	f7fd fa84 	bl	8002fc0 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0cb      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aca:	4b49      	ldr	r3, [pc, #292]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ace:	f003 0302 	and.w	r3, r3, #2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0ee      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x334>
 8005ad6:	e014      	b.n	8005b02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ad8:	f7fd fa72 	bl	8002fc0 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ade:	e00a      	b.n	8005af6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae0:	f7fd fa6e 	bl	8002fc0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e0b5      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005af6:	4b3e      	ldr	r3, [pc, #248]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ee      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d105      	bne.n	8005b14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b08:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	4a38      	ldr	r2, [pc, #224]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a1 	beq.w	8005c60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b1e:	4b34      	ldr	r3, [pc, #208]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d05c      	beq.n	8005be4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d141      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b32:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b38:	f7fd fa42 	bl	8002fc0 <HAL_GetTick>
 8005b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fd fa3e 	bl	8002fc0 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e087      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b52:	4b27      	ldr	r3, [pc, #156]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1f0      	bne.n	8005b40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69da      	ldr	r2, [r3, #28]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	085b      	lsrs	r3, r3, #1
 8005b76:	3b01      	subs	r3, #1
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	491b      	ldr	r1, [pc, #108]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b88:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f7fd fa17 	bl	8002fc0 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b96:	f7fd fa13 	bl	8002fc0 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e05c      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba8:	4b11      	ldr	r3, [pc, #68]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCC_OscConfig+0x416>
 8005bb4:	e054      	b.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb6:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <HAL_RCC_OscConfig+0x478>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bbc:	f7fd fa00 	bl	8002fc0 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc4:	f7fd f9fc 	bl	8002fc0 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e045      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd6:	4b06      	ldr	r3, [pc, #24]	@ (8005bf0 <HAL_RCC_OscConfig+0x470>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1f0      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x444>
 8005be2:	e03d      	b.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e038      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
 8005bf0:	40023800 	.word	0x40023800
 8005bf4:	40007000 	.word	0x40007000
 8005bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c6c <HAL_RCC_OscConfig+0x4ec>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d028      	beq.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d121      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d11a      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d111      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	3b01      	subs	r3, #1
 8005c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40023800 	.word	0x40023800

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0cc      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b68      	ldr	r3, [pc, #416]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90c      	bls.n	8005cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b65      	ldr	r3, [pc, #404]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b63      	ldr	r3, [pc, #396]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0b8      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc4:	4b59      	ldr	r3, [pc, #356]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4a58      	ldr	r2, [pc, #352]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cdc:	4b53      	ldr	r3, [pc, #332]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a52      	ldr	r2, [pc, #328]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ce6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b50      	ldr	r3, [pc, #320]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	494d      	ldr	r1, [pc, #308]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d044      	beq.n	8005d90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b47      	ldr	r3, [pc, #284]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d119      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d003      	beq.n	8005d2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d2a:	2b03      	cmp	r3, #3
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d2e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e06f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d3e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e067      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d4e:	4b37      	ldr	r3, [pc, #220]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f023 0203 	bic.w	r2, r3, #3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	4934      	ldr	r1, [pc, #208]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d60:	f7fd f92e 	bl	8002fc0 <HAL_GetTick>
 8005d64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d66:	e00a      	b.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d68:	f7fd f92a 	bl	8002fc0 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d901      	bls.n	8005d7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e04f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f003 020c 	and.w	r2, r3, #12
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d1eb      	bne.n	8005d68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d90:	4b25      	ldr	r3, [pc, #148]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 030f 	and.w	r3, r3, #15
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d20c      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9e:	4b22      	ldr	r3, [pc, #136]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b20      	ldr	r3, [pc, #128]	@ (8005e28 <HAL_RCC_ClockConfig+0x1b8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e032      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b19      	ldr	r3, [pc, #100]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4916      	ldr	r1, [pc, #88]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005de2:	4b12      	ldr	r3, [pc, #72]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	490e      	ldr	r1, [pc, #56]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005df6:	f000 f821 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <HAL_RCC_ClockConfig+0x1bc>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490a      	ldr	r1, [pc, #40]	@ (8005e30 <HAL_RCC_ClockConfig+0x1c0>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	4a09      	ldr	r2, [pc, #36]	@ (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e12:	4b09      	ldr	r3, [pc, #36]	@ (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fd f88e 	bl	8002f38 <HAL_InitTick>

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40023c00 	.word	0x40023c00
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	08009270 	.word	0x08009270
 8005e34:	20000010 	.word	0x20000010
 8005e38:	20000014 	.word	0x20000014

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b094      	sub	sp, #80	@ 0x50
 8005e42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e54:	4b79      	ldr	r3, [pc, #484]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d00d      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x40>
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	f200 80e1 	bhi.w	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0x34>
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e6e:	e0db      	b.n	8006028 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b73      	ldr	r3, [pc, #460]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e74:	e0db      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e76:	4b73      	ldr	r3, [pc, #460]	@ (8006044 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e7a:	e0d8      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e7c:	4b6f      	ldr	r3, [pc, #444]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e86:	4b6d      	ldr	r3, [pc, #436]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d063      	beq.n	8005f5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e92:	4b6a      	ldr	r3, [pc, #424]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	2200      	movs	r2, #0
 8005e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f04f 0100 	mov.w	r1, #0
 8005eba:	0159      	lsls	r1, r3, #5
 8005ebc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec0:	0150      	lsls	r0, r2, #5
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	1a51      	subs	r1, r2, r1
 8005eca:	6139      	str	r1, [r7, #16]
 8005ecc:	4629      	mov	r1, r5
 8005ece:	eb63 0301 	sbc.w	r3, r3, r1
 8005ed2:	617b      	str	r3, [r7, #20]
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	018b      	lsls	r3, r1, #6
 8005ee4:	4651      	mov	r1, sl
 8005ee6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eea:	4651      	mov	r1, sl
 8005eec:	018a      	lsls	r2, r1, #6
 8005eee:	4651      	mov	r1, sl
 8005ef0:	ebb2 0801 	subs.w	r8, r2, r1
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	eb63 0901 	sbc.w	r9, r3, r1
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0e:	4690      	mov	r8, r2
 8005f10:	4699      	mov	r9, r3
 8005f12:	4623      	mov	r3, r4
 8005f14:	eb18 0303 	adds.w	r3, r8, r3
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	462b      	mov	r3, r5
 8005f1c:	eb49 0303 	adc.w	r3, r9, r3
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f2e:	4629      	mov	r1, r5
 8005f30:	024b      	lsls	r3, r1, #9
 8005f32:	4621      	mov	r1, r4
 8005f34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f38:	4621      	mov	r1, r4
 8005f3a:	024a      	lsls	r2, r1, #9
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f42:	2200      	movs	r2, #0
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f4c:	f7fa f9a0 	bl	8000290 <__aeabi_uldivmod>
 8005f50:	4602      	mov	r2, r0
 8005f52:	460b      	mov	r3, r1
 8005f54:	4613      	mov	r3, r2
 8005f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f58:	e058      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f5a:	4b38      	ldr	r3, [pc, #224]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	099b      	lsrs	r3, r3, #6
 8005f60:	2200      	movs	r2, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	4611      	mov	r1, r2
 8005f66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	f04f 0000 	mov.w	r0, #0
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	0159      	lsls	r1, r3, #5
 8005f82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f86:	0150      	lsls	r0, r2, #5
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f92:	4649      	mov	r1, r9
 8005f94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fac:	ebb2 040a 	subs.w	r4, r2, sl
 8005fb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	00eb      	lsls	r3, r5, #3
 8005fbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc2:	00e2      	lsls	r2, r4, #3
 8005fc4:	4614      	mov	r4, r2
 8005fc6:	461d      	mov	r5, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	18e3      	adds	r3, r4, r3
 8005fcc:	603b      	str	r3, [r7, #0]
 8005fce:	464b      	mov	r3, r9
 8005fd0:	eb45 0303 	adc.w	r3, r5, r3
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fe2:	4629      	mov	r1, r5
 8005fe4:	028b      	lsls	r3, r1, #10
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fec:	4621      	mov	r1, r4
 8005fee:	028a      	lsls	r2, r1, #10
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	61fa      	str	r2, [r7, #28]
 8005ffc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006000:	f7fa f946 	bl	8000290 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4613      	mov	r3, r2
 800600a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800600c:	4b0b      	ldr	r3, [pc, #44]	@ (800603c <HAL_RCC_GetSysClockFreq+0x200>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	3301      	adds	r3, #1
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800601c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800601e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006020:	fbb2 f3f3 	udiv	r3, r2, r3
 8006024:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006026:	e002      	b.n	800602e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006028:	4b05      	ldr	r3, [pc, #20]	@ (8006040 <HAL_RCC_GetSysClockFreq+0x204>)
 800602a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800602c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006030:	4618      	mov	r0, r3
 8006032:	3750      	adds	r7, #80	@ 0x50
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	00f42400 	.word	0x00f42400
 8006044:	007a1200 	.word	0x007a1200

08006048 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006048:	b480      	push	{r7}
 800604a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800604c:	4b03      	ldr	r3, [pc, #12]	@ (800605c <HAL_RCC_GetHCLKFreq+0x14>)
 800604e:	681b      	ldr	r3, [r3, #0]
}
 8006050:	4618      	mov	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000010 	.word	0x20000010

08006060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006064:	f7ff fff0 	bl	8006048 <HAL_RCC_GetHCLKFreq>
 8006068:	4602      	mov	r2, r0
 800606a:	4b05      	ldr	r3, [pc, #20]	@ (8006080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	0a9b      	lsrs	r3, r3, #10
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	4903      	ldr	r1, [pc, #12]	@ (8006084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006076:	5ccb      	ldrb	r3, [r1, r3]
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40023800 	.word	0x40023800
 8006084:	08009280 	.word	0x08009280

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10b      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d105      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d075      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80060bc:	4b91      	ldr	r3, [pc, #580]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060c2:	f7fc ff7d 	bl	8002fc0 <HAL_GetTick>
 80060c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060c8:	e008      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060ca:	f7fc ff79 	bl	8002fc0 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e189      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060dc:	4b8a      	ldr	r3, [pc, #552]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f0      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d009      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	019a      	lsls	r2, r3, #6
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	071b      	lsls	r3, r3, #28
 8006100:	4981      	ldr	r1, [pc, #516]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d01f      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006114:	4b7c      	ldr	r3, [pc, #496]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800611a:	0f1b      	lsrs	r3, r3, #28
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	019a      	lsls	r2, r3, #6
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	061b      	lsls	r3, r3, #24
 800612e:	431a      	orrs	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	071b      	lsls	r3, r3, #28
 8006134:	4974      	ldr	r1, [pc, #464]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006136:	4313      	orrs	r3, r2
 8006138:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800613c:	4b72      	ldr	r3, [pc, #456]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800613e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006142:	f023 021f 	bic.w	r2, r3, #31
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	3b01      	subs	r3, #1
 800614c:	496e      	ldr	r1, [pc, #440]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00d      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	019a      	lsls	r2, r3, #6
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	061b      	lsls	r3, r3, #24
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	071b      	lsls	r3, r3, #28
 8006174:	4964      	ldr	r1, [pc, #400]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800617c:	4b61      	ldr	r3, [pc, #388]	@ (8006304 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006182:	f7fc ff1d 	bl	8002fc0 <HAL_GetTick>
 8006186:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006188:	e008      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800618a:	f7fc ff19 	bl	8002fc0 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e129      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800619c:	4b5a      	ldr	r3, [pc, #360]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d105      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d079      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80061c0:	4b52      	ldr	r3, [pc, #328]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061c6:	f7fc fefb 	bl	8002fc0 <HAL_GetTick>
 80061ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061cc:	e008      	b.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061ce:	f7fc fef7 	bl	8002fc0 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e107      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061e0:	4b49      	ldr	r3, [pc, #292]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061ec:	d0ef      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0304 	and.w	r3, r3, #4
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d020      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061fa:	4b43      	ldr	r3, [pc, #268]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006200:	0f1b      	lsrs	r3, r3, #28
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	019a      	lsls	r2, r3, #6
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	061b      	lsls	r3, r3, #24
 8006214:	431a      	orrs	r2, r3
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	071b      	lsls	r3, r3, #28
 800621a:	493b      	ldr	r1, [pc, #236]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800621c:	4313      	orrs	r3, r2
 800621e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006222:	4b39      	ldr	r3, [pc, #228]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006228:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a1b      	ldr	r3, [r3, #32]
 8006230:	3b01      	subs	r3, #1
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	4934      	ldr	r1, [pc, #208]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01e      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006248:	4b2f      	ldr	r3, [pc, #188]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800624e:	0e1b      	lsrs	r3, r3, #24
 8006250:	f003 030f 	and.w	r3, r3, #15
 8006254:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	019a      	lsls	r2, r3, #6
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	061b      	lsls	r3, r3, #24
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	071b      	lsls	r3, r3, #28
 8006268:	4927      	ldr	r1, [pc, #156]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626a:	4313      	orrs	r3, r2
 800626c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006270:	4b25      	ldr	r3, [pc, #148]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006276:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	4922      	ldr	r1, [pc, #136]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006286:	4b21      	ldr	r3, [pc, #132]	@ (800630c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800628c:	f7fc fe98 	bl	8002fc0 <HAL_GetTick>
 8006290:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006292:	e008      	b.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006294:	f7fc fe94 	bl	8002fc0 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e0a4      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062a6:	4b18      	ldr	r3, [pc, #96]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062b2:	d1ef      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 808b 	beq.w	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	60fb      	str	r3, [r7, #12]
 80062c6:	4b10      	ldr	r3, [pc, #64]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	4a0f      	ldr	r2, [pc, #60]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062de:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a0b      	ldr	r2, [pc, #44]	@ (8006310 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062ea:	f7fc fe69 	bl	8002fc0 <HAL_GetTick>
 80062ee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80062f0:	e010      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f2:	f7fc fe65 	bl	8002fc0 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d909      	bls.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e075      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006304:	42470068 	.word	0x42470068
 8006308:	40023800 	.word	0x40023800
 800630c:	42470070 	.word	0x42470070
 8006310:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006314:	4b38      	ldr	r3, [pc, #224]	@ (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0e8      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006320:	4b36      	ldr	r3, [pc, #216]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006328:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d02f      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d028      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800633e:	4b2f      	ldr	r3, [pc, #188]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006346:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006348:	4b2d      	ldr	r3, [pc, #180]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800634e:	4b2c      	ldr	r3, [pc, #176]	@ (8006400 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006354:	4a29      	ldr	r2, [pc, #164]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800635a:	4b28      	ldr	r3, [pc, #160]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800635c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d114      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006366:	f7fc fe2b 	bl	8002fc0 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636c:	e00a      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fc fe27 	bl	8002fc0 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e035      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006384:	4b1d      	ldr	r3, [pc, #116]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0ee      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006398:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800639c:	d10d      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 800639e:	4b17      	ldr	r3, [pc, #92]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80063ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063b2:	4912      	ldr	r1, [pc, #72]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]
 80063b8:	e005      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80063ba:	4b10      	ldr	r3, [pc, #64]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	4a0f      	ldr	r2, [pc, #60]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063c4:	6093      	str	r3, [r2, #8]
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063d2:	490a      	ldr	r1, [pc, #40]	@ (80063fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063d4:	4313      	orrs	r3, r2
 80063d6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80063ea:	4b06      	ldr	r3, [pc, #24]	@ (8006404 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80063ec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3718      	adds	r7, #24
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40007000 	.word	0x40007000
 80063fc:	40023800 	.word	0x40023800
 8006400:	42470e40 	.word	0x42470e40
 8006404:	424711e0 	.word	0x424711e0

08006408 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e01c      	b.n	8006454 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	795b      	ldrb	r3, [r3, #5]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d105      	bne.n	8006430 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fc f966 	bl	80026fc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f042 0204 	orr.w	r2, r2, #4
 8006444:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e07b      	b.n	8006566 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d108      	bne.n	8006488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800647e:	d009      	beq.n	8006494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	61da      	str	r2, [r3, #28]
 8006486:	e005      	b.n	8006494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7fc f946 	bl	8002740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2202      	movs	r2, #2
 80064b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	431a      	orrs	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006504:	431a      	orrs	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006518:	ea42 0103 	orr.w	r1, r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	0c1b      	lsrs	r3, r3, #16
 8006532:	f003 0104 	and.w	r1, r3, #4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800653a:	f003 0210 	and.w	r2, r3, #16
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006554:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e01a      	b.n	80065b6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006596:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f7fc f919 	bl	80027d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b088      	sub	sp, #32
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	4613      	mov	r3, r2
 80065cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ce:	f7fc fcf7 	bl	8002fc0 <HAL_GetTick>
 80065d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d001      	beq.n	80065e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
 80065e6:	e12a      	b.n	800683e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_SPI_Transmit+0x36>
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e122      	b.n	800683e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d101      	bne.n	8006606 <HAL_SPI_Transmit+0x48>
 8006602:	2302      	movs	r3, #2
 8006604:	e11b      	b.n	800683e <HAL_SPI_Transmit+0x280>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2201      	movs	r2, #1
 800660a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2203      	movs	r2, #3
 8006612:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	88fa      	ldrh	r2, [r7, #6]
 8006626:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	88fa      	ldrh	r2, [r7, #6]
 800662c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006654:	d10f      	bne.n	8006676 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006674:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006680:	2b40      	cmp	r3, #64	@ 0x40
 8006682:	d007      	beq.n	8006694 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800669c:	d152      	bne.n	8006744 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_SPI_Transmit+0xee>
 80066a6:	8b7b      	ldrh	r3, [r7, #26]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d145      	bne.n	8006738 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	881a      	ldrh	r2, [r3, #0]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066bc:	1c9a      	adds	r2, r3, #2
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066d0:	e032      	b.n	8006738 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d112      	bne.n	8006706 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e4:	881a      	ldrh	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f0:	1c9a      	adds	r2, r3, #2
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006704:	e018      	b.n	8006738 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006706:	f7fc fc5b 	bl	8002fc0 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d803      	bhi.n	800671e <HAL_SPI_Transmit+0x160>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d102      	bne.n	8006724 <HAL_SPI_Transmit+0x166>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d109      	bne.n	8006738 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e082      	b.n	800683e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800673c:	b29b      	uxth	r3, r3
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1c7      	bne.n	80066d2 <HAL_SPI_Transmit+0x114>
 8006742:	e053      	b.n	80067ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <HAL_SPI_Transmit+0x194>
 800674c:	8b7b      	ldrh	r3, [r7, #26]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d147      	bne.n	80067e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	330c      	adds	r3, #12
 800675c:	7812      	ldrb	r2, [r2, #0]
 800675e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800676e:	b29b      	uxth	r3, r3
 8006770:	3b01      	subs	r3, #1
 8006772:	b29a      	uxth	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006778:	e033      	b.n	80067e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	d113      	bne.n	80067b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	330c      	adds	r3, #12
 8006792:	7812      	ldrb	r2, [r2, #0]
 8006794:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80067ae:	e018      	b.n	80067e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b0:	f7fc fc06 	bl	8002fc0 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d803      	bhi.n	80067c8 <HAL_SPI_Transmit+0x20a>
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d102      	bne.n	80067ce <HAL_SPI_Transmit+0x210>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d109      	bne.n	80067e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e02d      	b.n	800683e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1c6      	bne.n	800677a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f8bf 	bl	8006974 <SPI_EndRxTxTransaction>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d10a      	bne.n	8006820 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e000      	b.n	800683e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800683c:	2300      	movs	r3, #0
  }
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006854:	b2db      	uxtb	r3, r3
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006874:	f7fc fba4 	bl	8002fc0 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4413      	add	r3, r2
 8006882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006884:	f7fc fb9c 	bl	8002fc0 <HAL_GetTick>
 8006888:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800688a:	4b39      	ldr	r3, [pc, #228]	@ (8006970 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	015b      	lsls	r3, r3, #5
 8006890:	0d1b      	lsrs	r3, r3, #20
 8006892:	69fa      	ldr	r2, [r7, #28]
 8006894:	fb02 f303 	mul.w	r3, r2, r3
 8006898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800689a:	e054      	b.n	8006946 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a2:	d050      	beq.n	8006946 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068a4:	f7fc fb8c 	bl	8002fc0 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d902      	bls.n	80068ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d13d      	bne.n	8006936 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80068c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068d2:	d111      	bne.n	80068f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068dc:	d004      	beq.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068e6:	d107      	bne.n	80068f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006900:	d10f      	bne.n	8006922 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006920:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e017      	b.n	8006966 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3b01      	subs	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	4013      	ands	r3, r2
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	bf0c      	ite	eq
 8006956:	2301      	moveq	r3, #1
 8006958:	2300      	movne	r3, #0
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	79fb      	ldrb	r3, [r7, #7]
 8006960:	429a      	cmp	r2, r3
 8006962:	d19b      	bne.n	800689c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000010 	.word	0x20000010

08006974 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af02      	add	r7, sp, #8
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2201      	movs	r2, #1
 8006988:	2102      	movs	r1, #2
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f7ff ff6a 	bl	8006864 <SPI_WaitFlagStateUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699a:	f043 0220 	orr.w	r2, r3, #32
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e032      	b.n	8006a0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069a6:	4b1b      	ldr	r3, [pc, #108]	@ (8006a14 <SPI_EndRxTxTransaction+0xa0>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a1b      	ldr	r2, [pc, #108]	@ (8006a18 <SPI_EndRxTxTransaction+0xa4>)
 80069ac:	fba2 2303 	umull	r2, r3, r2, r3
 80069b0:	0d5b      	lsrs	r3, r3, #21
 80069b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069c4:	d112      	bne.n	80069ec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2200      	movs	r2, #0
 80069ce:	2180      	movs	r1, #128	@ 0x80
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f7ff ff47 	bl	8006864 <SPI_WaitFlagStateUntilTimeout>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e0:	f043 0220 	orr.w	r2, r3, #32
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e00f      	b.n	8006a0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a02:	2b80      	cmp	r3, #128	@ 0x80
 8006a04:	d0f2      	beq.n	80069ec <SPI_EndRxTxTransaction+0x78>
 8006a06:	e000      	b.n	8006a0a <SPI_EndRxTxTransaction+0x96>
        break;
 8006a08:	bf00      	nop
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3718      	adds	r7, #24
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000010 	.word	0x20000010
 8006a18:	165e9f81 	.word	0x165e9f81

08006a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e041      	b.n	8006ab2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fb fee2 	bl	800280c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fad8 	bl	8007010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ab0:	2300      	movs	r3, #0
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e041      	b.n	8006b50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d106      	bne.n	8006ae6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f839 	bl	8006b58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f000 fa89 	bl	8007010 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3708      	adds	r7, #8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d109      	bne.n	8006b90 <HAL_TIM_PWM_Start+0x24>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	bf14      	ite	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	2300      	moveq	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	e022      	b.n	8006bd6 <HAL_TIM_PWM_Start+0x6a>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b04      	cmp	r3, #4
 8006b94:	d109      	bne.n	8006baa <HAL_TIM_PWM_Start+0x3e>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	bf14      	ite	ne
 8006ba2:	2301      	movne	r3, #1
 8006ba4:	2300      	moveq	r3, #0
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	e015      	b.n	8006bd6 <HAL_TIM_PWM_Start+0x6a>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d109      	bne.n	8006bc4 <HAL_TIM_PWM_Start+0x58>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	e008      	b.n	8006bd6 <HAL_TIM_PWM_Start+0x6a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	bf14      	ite	ne
 8006bd0:	2301      	movne	r3, #1
 8006bd2:	2300      	moveq	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e07c      	b.n	8006cd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <HAL_TIM_PWM_Start+0x82>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bec:	e013      	b.n	8006c16 <HAL_TIM_PWM_Start+0xaa>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_PWM_Start+0x92>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bfc:	e00b      	b.n	8006c16 <HAL_TIM_PWM_Start+0xaa>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0xa2>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c0c:	e003      	b.n	8006c16 <HAL_TIM_PWM_Start+0xaa>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2202      	movs	r2, #2
 8006c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fcec 	bl	80075fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a2d      	ldr	r2, [pc, #180]	@ (8006ce0 <HAL_TIM_PWM_Start+0x174>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d004      	beq.n	8006c38 <HAL_TIM_PWM_Start+0xcc>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2c      	ldr	r2, [pc, #176]	@ (8006ce4 <HAL_TIM_PWM_Start+0x178>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d101      	bne.n	8006c3c <HAL_TIM_PWM_Start+0xd0>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e000      	b.n	8006c3e <HAL_TIM_PWM_Start+0xd2>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d007      	beq.n	8006c52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a22      	ldr	r2, [pc, #136]	@ (8006ce0 <HAL_TIM_PWM_Start+0x174>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d022      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x136>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c64:	d01d      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x136>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce8 <HAL_TIM_PWM_Start+0x17c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d018      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x136>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a1d      	ldr	r2, [pc, #116]	@ (8006cec <HAL_TIM_PWM_Start+0x180>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x136>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf0 <HAL_TIM_PWM_Start+0x184>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00e      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x136>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a16      	ldr	r2, [pc, #88]	@ (8006ce4 <HAL_TIM_PWM_Start+0x178>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x136>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a18      	ldr	r2, [pc, #96]	@ (8006cf4 <HAL_TIM_PWM_Start+0x188>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIM_PWM_Start+0x136>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a16      	ldr	r2, [pc, #88]	@ (8006cf8 <HAL_TIM_PWM_Start+0x18c>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d111      	bne.n	8006cc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d010      	beq.n	8006cd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0201 	orr.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc4:	e007      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0201 	orr.w	r2, r2, #1
 8006cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3710      	adds	r7, #16
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40010400 	.word	0x40010400
 8006ce8:	40000400 	.word	0x40000400
 8006cec:	40000800 	.word	0x40000800
 8006cf0:	40000c00 	.word	0x40000c00
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40001800 	.word	0x40001800

08006cfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e0ae      	b.n	8006e78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2b0c      	cmp	r3, #12
 8006d26:	f200 809f 	bhi.w	8006e68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006e69 	.word	0x08006e69
 8006d38:	08006e69 	.word	0x08006e69
 8006d3c:	08006e69 	.word	0x08006e69
 8006d40:	08006da5 	.word	0x08006da5
 8006d44:	08006e69 	.word	0x08006e69
 8006d48:	08006e69 	.word	0x08006e69
 8006d4c:	08006e69 	.word	0x08006e69
 8006d50:	08006de7 	.word	0x08006de7
 8006d54:	08006e69 	.word	0x08006e69
 8006d58:	08006e69 	.word	0x08006e69
 8006d5c:	08006e69 	.word	0x08006e69
 8006d60:	08006e27 	.word	0x08006e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 f9fc 	bl	8007168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	699a      	ldr	r2, [r3, #24]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0208 	orr.w	r2, r2, #8
 8006d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f022 0204 	bic.w	r2, r2, #4
 8006d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6999      	ldr	r1, [r3, #24]
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	691a      	ldr	r2, [r3, #16]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	619a      	str	r2, [r3, #24]
      break;
 8006da2:	e064      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fa4c 	bl	8007248 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6999      	ldr	r1, [r3, #24]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	021a      	lsls	r2, r3, #8
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	619a      	str	r2, [r3, #24]
      break;
 8006de4:	e043      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f000 faa1 	bl	8007334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	69da      	ldr	r2, [r3, #28]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0208 	orr.w	r2, r2, #8
 8006e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0204 	bic.w	r2, r2, #4
 8006e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69d9      	ldr	r1, [r3, #28]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	430a      	orrs	r2, r1
 8006e22:	61da      	str	r2, [r3, #28]
      break;
 8006e24:	e023      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f000 faf5 	bl	800741c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69d9      	ldr	r1, [r3, #28]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	021a      	lsls	r2, r3, #8
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	61da      	str	r2, [r3, #28]
      break;
 8006e66:	e002      	b.n	8006e6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_TIM_ConfigClockSource+0x1c>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e0b4      	b.n	8007006 <HAL_TIM_ConfigClockSource+0x186>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ed4:	d03e      	beq.n	8006f54 <HAL_TIM_ConfigClockSource+0xd4>
 8006ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006eda:	f200 8087 	bhi.w	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ee2:	f000 8086 	beq.w	8006ff2 <HAL_TIM_ConfigClockSource+0x172>
 8006ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eea:	d87f      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b70      	cmp	r3, #112	@ 0x70
 8006eee:	d01a      	beq.n	8006f26 <HAL_TIM_ConfigClockSource+0xa6>
 8006ef0:	2b70      	cmp	r3, #112	@ 0x70
 8006ef2:	d87b      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006ef4:	2b60      	cmp	r3, #96	@ 0x60
 8006ef6:	d050      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0x11a>
 8006ef8:	2b60      	cmp	r3, #96	@ 0x60
 8006efa:	d877      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006efc:	2b50      	cmp	r3, #80	@ 0x50
 8006efe:	d03c      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0xfa>
 8006f00:	2b50      	cmp	r3, #80	@ 0x50
 8006f02:	d873      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006f04:	2b40      	cmp	r3, #64	@ 0x40
 8006f06:	d058      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x13a>
 8006f08:	2b40      	cmp	r3, #64	@ 0x40
 8006f0a:	d86f      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006f0c:	2b30      	cmp	r3, #48	@ 0x30
 8006f0e:	d064      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x15a>
 8006f10:	2b30      	cmp	r3, #48	@ 0x30
 8006f12:	d86b      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d060      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x15a>
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d867      	bhi.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d05c      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x15a>
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d05a      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x15a>
 8006f24:	e062      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f36:	f000 fb41 	bl	80075bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	609a      	str	r2, [r3, #8]
      break;
 8006f52:	e04f      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f64:	f000 fb2a 	bl	80075bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689a      	ldr	r2, [r3, #8]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f76:	609a      	str	r2, [r3, #8]
      break;
 8006f78:	e03c      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f86:	461a      	mov	r2, r3
 8006f88:	f000 fa9e 	bl	80074c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2150      	movs	r1, #80	@ 0x50
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 faf7 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 8006f98:	e02c      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f000 fabd 	bl	8007526 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2160      	movs	r1, #96	@ 0x60
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fae7 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 8006fb8:	e01c      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f000 fa7e 	bl	80074c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2140      	movs	r1, #64	@ 0x40
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 fad7 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 8006fd8:	e00c      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	4610      	mov	r0, r2
 8006fe6:	f000 face 	bl	8007586 <TIM_ITRx_SetConfig>
      break;
 8006fea:	e003      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff0:	e000      	b.n	8006ff4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a46      	ldr	r2, [pc, #280]	@ (800713c <TIM_Base_SetConfig+0x12c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800702e:	d00f      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a43      	ldr	r2, [pc, #268]	@ (8007140 <TIM_Base_SetConfig+0x130>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00b      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a42      	ldr	r2, [pc, #264]	@ (8007144 <TIM_Base_SetConfig+0x134>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d007      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	4a41      	ldr	r2, [pc, #260]	@ (8007148 <TIM_Base_SetConfig+0x138>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d003      	beq.n	8007050 <TIM_Base_SetConfig+0x40>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a40      	ldr	r2, [pc, #256]	@ (800714c <TIM_Base_SetConfig+0x13c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d108      	bne.n	8007062 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a35      	ldr	r2, [pc, #212]	@ (800713c <TIM_Base_SetConfig+0x12c>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d02b      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007070:	d027      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a32      	ldr	r2, [pc, #200]	@ (8007140 <TIM_Base_SetConfig+0x130>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d023      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a31      	ldr	r2, [pc, #196]	@ (8007144 <TIM_Base_SetConfig+0x134>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d01f      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a30      	ldr	r2, [pc, #192]	@ (8007148 <TIM_Base_SetConfig+0x138>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d01b      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2f      	ldr	r2, [pc, #188]	@ (800714c <TIM_Base_SetConfig+0x13c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d017      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a2e      	ldr	r2, [pc, #184]	@ (8007150 <TIM_Base_SetConfig+0x140>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d013      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2d      	ldr	r2, [pc, #180]	@ (8007154 <TIM_Base_SetConfig+0x144>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d00f      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007158 <TIM_Base_SetConfig+0x148>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00b      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2b      	ldr	r2, [pc, #172]	@ (800715c <TIM_Base_SetConfig+0x14c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d007      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007160 <TIM_Base_SetConfig+0x150>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a29      	ldr	r2, [pc, #164]	@ (8007164 <TIM_Base_SetConfig+0x154>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d108      	bne.n	80070d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a10      	ldr	r2, [pc, #64]	@ (800713c <TIM_Base_SetConfig+0x12c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_Base_SetConfig+0xf8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a12      	ldr	r2, [pc, #72]	@ (800714c <TIM_Base_SetConfig+0x13c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d103      	bne.n	8007110 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b01      	cmp	r3, #1
 8007120:	d105      	bne.n	800712e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	f023 0201 	bic.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	611a      	str	r2, [r3, #16]
  }
}
 800712e:	bf00      	nop
 8007130:	3714      	adds	r7, #20
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40010000 	.word	0x40010000
 8007140:	40000400 	.word	0x40000400
 8007144:	40000800 	.word	0x40000800
 8007148:	40000c00 	.word	0x40000c00
 800714c:	40010400 	.word	0x40010400
 8007150:	40014000 	.word	0x40014000
 8007154:	40014400 	.word	0x40014400
 8007158:	40014800 	.word	0x40014800
 800715c:	40001800 	.word	0x40001800
 8007160:	40001c00 	.word	0x40001c00
 8007164:	40002000 	.word	0x40002000

08007168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f023 0201 	bic.w	r2, r3, #1
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f023 0302 	bic.w	r3, r3, #2
 80071b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a20      	ldr	r2, [pc, #128]	@ (8007240 <TIM_OC1_SetConfig+0xd8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d003      	beq.n	80071cc <TIM_OC1_SetConfig+0x64>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007244 <TIM_OC1_SetConfig+0xdc>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d10c      	bne.n	80071e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f023 0308 	bic.w	r3, r3, #8
 80071d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	4313      	orrs	r3, r2
 80071dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f023 0304 	bic.w	r3, r3, #4
 80071e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a15      	ldr	r2, [pc, #84]	@ (8007240 <TIM_OC1_SetConfig+0xd8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d003      	beq.n	80071f6 <TIM_OC1_SetConfig+0x8e>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a14      	ldr	r2, [pc, #80]	@ (8007244 <TIM_OC1_SetConfig+0xdc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d111      	bne.n	800721a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	693a      	ldr	r2, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	621a      	str	r2, [r3, #32]
}
 8007234:	bf00      	nop
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	40010000 	.word	0x40010000
 8007244:	40010400 	.word	0x40010400

08007248 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	f023 0210 	bic.w	r2, r3, #16
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800727e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	021b      	lsls	r3, r3, #8
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0320 	bic.w	r3, r3, #32
 8007292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a22      	ldr	r2, [pc, #136]	@ (800732c <TIM_OC2_SetConfig+0xe4>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d003      	beq.n	80072b0 <TIM_OC2_SetConfig+0x68>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a21      	ldr	r2, [pc, #132]	@ (8007330 <TIM_OC2_SetConfig+0xe8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d10d      	bne.n	80072cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a17      	ldr	r2, [pc, #92]	@ (800732c <TIM_OC2_SetConfig+0xe4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d003      	beq.n	80072dc <TIM_OC2_SetConfig+0x94>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a16      	ldr	r2, [pc, #88]	@ (8007330 <TIM_OC2_SetConfig+0xe8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d113      	bne.n	8007304 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	693a      	ldr	r2, [r7, #16]
 8007300:	4313      	orrs	r3, r2
 8007302:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	621a      	str	r2, [r3, #32]
}
 800731e:	bf00      	nop
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000
 8007330:	40010400 	.word	0x40010400

08007334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	69db      	ldr	r3, [r3, #28]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0303 	bic.w	r3, r3, #3
 800736a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800737c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a21      	ldr	r2, [pc, #132]	@ (8007414 <TIM_OC3_SetConfig+0xe0>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d003      	beq.n	800739a <TIM_OC3_SetConfig+0x66>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a20      	ldr	r2, [pc, #128]	@ (8007418 <TIM_OC3_SetConfig+0xe4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d10d      	bne.n	80073b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	021b      	lsls	r3, r3, #8
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a16      	ldr	r2, [pc, #88]	@ (8007414 <TIM_OC3_SetConfig+0xe0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_OC3_SetConfig+0x92>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a15      	ldr	r2, [pc, #84]	@ (8007418 <TIM_OC3_SetConfig+0xe4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d113      	bne.n	80073ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	693a      	ldr	r2, [r7, #16]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	621a      	str	r2, [r3, #32]
}
 8007408:	bf00      	nop
 800740a:	371c      	adds	r7, #28
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	40010000 	.word	0x40010000
 8007418:	40010400 	.word	0x40010400

0800741c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	69db      	ldr	r3, [r3, #28]
 8007442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800744a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	021b      	lsls	r3, r3, #8
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	031b      	lsls	r3, r3, #12
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a12      	ldr	r2, [pc, #72]	@ (80074c0 <TIM_OC4_SetConfig+0xa4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d003      	beq.n	8007484 <TIM_OC4_SetConfig+0x68>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a11      	ldr	r2, [pc, #68]	@ (80074c4 <TIM_OC4_SetConfig+0xa8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d109      	bne.n	8007498 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800748a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	019b      	lsls	r3, r3, #6
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	693a      	ldr	r2, [r7, #16]
 80074b0:	621a      	str	r2, [r3, #32]
}
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40010000 	.word	0x40010000
 80074c4:	40010400 	.word	0x40010400

080074c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b087      	sub	sp, #28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
 80074d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	f023 0201 	bic.w	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f023 030a 	bic.w	r3, r3, #10
 8007504:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4313      	orrs	r3, r2
 800750c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	621a      	str	r2, [r3, #32]
}
 800751a:	bf00      	nop
 800751c:	371c      	adds	r7, #28
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007526:	b480      	push	{r7}
 8007528:	b087      	sub	sp, #28
 800752a:	af00      	add	r7, sp, #0
 800752c:	60f8      	str	r0, [r7, #12]
 800752e:	60b9      	str	r1, [r7, #8]
 8007530:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	f023 0210 	bic.w	r2, r3, #16
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	031b      	lsls	r3, r3, #12
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	4313      	orrs	r3, r2
 800755a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007562:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	621a      	str	r2, [r3, #32]
}
 800757a:	bf00      	nop
 800757c:	371c      	adds	r7, #28
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007586:	b480      	push	{r7}
 8007588:	b085      	sub	sp, #20
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800759c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f043 0307 	orr.w	r3, r3, #7
 80075a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	609a      	str	r2, [r3, #8]
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	021a      	lsls	r2, r3, #8
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	431a      	orrs	r2, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	609a      	str	r2, [r3, #8]
}
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b087      	sub	sp, #28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	2201      	movs	r2, #1
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a1a      	ldr	r2, [r3, #32]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	43db      	mvns	r3, r3
 800761e:	401a      	ands	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1a      	ldr	r2, [r3, #32]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	fa01 f303 	lsl.w	r3, r1, r3
 8007634:	431a      	orrs	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800765c:	2302      	movs	r3, #2
 800765e:	e05a      	b.n	8007716 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007686:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a21      	ldr	r2, [pc, #132]	@ (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d022      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ac:	d01d      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d018      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a1b      	ldr	r2, [pc, #108]	@ (800772c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d00e      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a18      	ldr	r2, [pc, #96]	@ (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d009      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a17      	ldr	r2, [pc, #92]	@ (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d004      	beq.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a15      	ldr	r2, [pc, #84]	@ (800773c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d10c      	bne.n	8007704 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	40010000 	.word	0x40010000
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	40010400 	.word	0x40010400
 8007738:	40014000 	.word	0x40014000
 800773c:	40001800 	.word	0x40001800

08007740 <siprintf>:
 8007740:	b40e      	push	{r1, r2, r3}
 8007742:	b500      	push	{lr}
 8007744:	b09c      	sub	sp, #112	@ 0x70
 8007746:	ab1d      	add	r3, sp, #116	@ 0x74
 8007748:	9002      	str	r0, [sp, #8]
 800774a:	9006      	str	r0, [sp, #24]
 800774c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007750:	4809      	ldr	r0, [pc, #36]	@ (8007778 <siprintf+0x38>)
 8007752:	9107      	str	r1, [sp, #28]
 8007754:	9104      	str	r1, [sp, #16]
 8007756:	4909      	ldr	r1, [pc, #36]	@ (800777c <siprintf+0x3c>)
 8007758:	f853 2b04 	ldr.w	r2, [r3], #4
 800775c:	9105      	str	r1, [sp, #20]
 800775e:	6800      	ldr	r0, [r0, #0]
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	a902      	add	r1, sp, #8
 8007764:	f000 f9a2 	bl	8007aac <_svfiprintf_r>
 8007768:	9b02      	ldr	r3, [sp, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	b01c      	add	sp, #112	@ 0x70
 8007770:	f85d eb04 	ldr.w	lr, [sp], #4
 8007774:	b003      	add	sp, #12
 8007776:	4770      	bx	lr
 8007778:	2000001c 	.word	0x2000001c
 800777c:	ffff0208 	.word	0xffff0208

08007780 <memset>:
 8007780:	4402      	add	r2, r0
 8007782:	4603      	mov	r3, r0
 8007784:	4293      	cmp	r3, r2
 8007786:	d100      	bne.n	800778a <memset+0xa>
 8007788:	4770      	bx	lr
 800778a:	f803 1b01 	strb.w	r1, [r3], #1
 800778e:	e7f9      	b.n	8007784 <memset+0x4>

08007790 <__errno>:
 8007790:	4b01      	ldr	r3, [pc, #4]	@ (8007798 <__errno+0x8>)
 8007792:	6818      	ldr	r0, [r3, #0]
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	2000001c 	.word	0x2000001c

0800779c <__libc_init_array>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	4d0d      	ldr	r5, [pc, #52]	@ (80077d4 <__libc_init_array+0x38>)
 80077a0:	4c0d      	ldr	r4, [pc, #52]	@ (80077d8 <__libc_init_array+0x3c>)
 80077a2:	1b64      	subs	r4, r4, r5
 80077a4:	10a4      	asrs	r4, r4, #2
 80077a6:	2600      	movs	r6, #0
 80077a8:	42a6      	cmp	r6, r4
 80077aa:	d109      	bne.n	80077c0 <__libc_init_array+0x24>
 80077ac:	4d0b      	ldr	r5, [pc, #44]	@ (80077dc <__libc_init_array+0x40>)
 80077ae:	4c0c      	ldr	r4, [pc, #48]	@ (80077e0 <__libc_init_array+0x44>)
 80077b0:	f000 fc66 	bl	8008080 <_init>
 80077b4:	1b64      	subs	r4, r4, r5
 80077b6:	10a4      	asrs	r4, r4, #2
 80077b8:	2600      	movs	r6, #0
 80077ba:	42a6      	cmp	r6, r4
 80077bc:	d105      	bne.n	80077ca <__libc_init_array+0x2e>
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80077c4:	4798      	blx	r3
 80077c6:	3601      	adds	r6, #1
 80077c8:	e7ee      	b.n	80077a8 <__libc_init_array+0xc>
 80077ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80077ce:	4798      	blx	r3
 80077d0:	3601      	adds	r6, #1
 80077d2:	e7f2      	b.n	80077ba <__libc_init_array+0x1e>
 80077d4:	080092c4 	.word	0x080092c4
 80077d8:	080092c4 	.word	0x080092c4
 80077dc:	080092c4 	.word	0x080092c4
 80077e0:	080092c8 	.word	0x080092c8

080077e4 <__retarget_lock_acquire_recursive>:
 80077e4:	4770      	bx	lr

080077e6 <__retarget_lock_release_recursive>:
 80077e6:	4770      	bx	lr

080077e8 <memcpy>:
 80077e8:	440a      	add	r2, r1
 80077ea:	4291      	cmp	r1, r2
 80077ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80077f0:	d100      	bne.n	80077f4 <memcpy+0xc>
 80077f2:	4770      	bx	lr
 80077f4:	b510      	push	{r4, lr}
 80077f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077fe:	4291      	cmp	r1, r2
 8007800:	d1f9      	bne.n	80077f6 <memcpy+0xe>
 8007802:	bd10      	pop	{r4, pc}

08007804 <_free_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4605      	mov	r5, r0
 8007808:	2900      	cmp	r1, #0
 800780a:	d041      	beq.n	8007890 <_free_r+0x8c>
 800780c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007810:	1f0c      	subs	r4, r1, #4
 8007812:	2b00      	cmp	r3, #0
 8007814:	bfb8      	it	lt
 8007816:	18e4      	addlt	r4, r4, r3
 8007818:	f000 f8e0 	bl	80079dc <__malloc_lock>
 800781c:	4a1d      	ldr	r2, [pc, #116]	@ (8007894 <_free_r+0x90>)
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	b933      	cbnz	r3, 8007830 <_free_r+0x2c>
 8007822:	6063      	str	r3, [r4, #4]
 8007824:	6014      	str	r4, [r2, #0]
 8007826:	4628      	mov	r0, r5
 8007828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800782c:	f000 b8dc 	b.w	80079e8 <__malloc_unlock>
 8007830:	42a3      	cmp	r3, r4
 8007832:	d908      	bls.n	8007846 <_free_r+0x42>
 8007834:	6820      	ldr	r0, [r4, #0]
 8007836:	1821      	adds	r1, r4, r0
 8007838:	428b      	cmp	r3, r1
 800783a:	bf01      	itttt	eq
 800783c:	6819      	ldreq	r1, [r3, #0]
 800783e:	685b      	ldreq	r3, [r3, #4]
 8007840:	1809      	addeq	r1, r1, r0
 8007842:	6021      	streq	r1, [r4, #0]
 8007844:	e7ed      	b.n	8007822 <_free_r+0x1e>
 8007846:	461a      	mov	r2, r3
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b10b      	cbz	r3, 8007850 <_free_r+0x4c>
 800784c:	42a3      	cmp	r3, r4
 800784e:	d9fa      	bls.n	8007846 <_free_r+0x42>
 8007850:	6811      	ldr	r1, [r2, #0]
 8007852:	1850      	adds	r0, r2, r1
 8007854:	42a0      	cmp	r0, r4
 8007856:	d10b      	bne.n	8007870 <_free_r+0x6c>
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	4401      	add	r1, r0
 800785c:	1850      	adds	r0, r2, r1
 800785e:	4283      	cmp	r3, r0
 8007860:	6011      	str	r1, [r2, #0]
 8007862:	d1e0      	bne.n	8007826 <_free_r+0x22>
 8007864:	6818      	ldr	r0, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	6053      	str	r3, [r2, #4]
 800786a:	4408      	add	r0, r1
 800786c:	6010      	str	r0, [r2, #0]
 800786e:	e7da      	b.n	8007826 <_free_r+0x22>
 8007870:	d902      	bls.n	8007878 <_free_r+0x74>
 8007872:	230c      	movs	r3, #12
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	e7d6      	b.n	8007826 <_free_r+0x22>
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	1821      	adds	r1, r4, r0
 800787c:	428b      	cmp	r3, r1
 800787e:	bf04      	itt	eq
 8007880:	6819      	ldreq	r1, [r3, #0]
 8007882:	685b      	ldreq	r3, [r3, #4]
 8007884:	6063      	str	r3, [r4, #4]
 8007886:	bf04      	itt	eq
 8007888:	1809      	addeq	r1, r1, r0
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	6054      	str	r4, [r2, #4]
 800788e:	e7ca      	b.n	8007826 <_free_r+0x22>
 8007890:	bd38      	pop	{r3, r4, r5, pc}
 8007892:	bf00      	nop
 8007894:	20025dbc 	.word	0x20025dbc

08007898 <sbrk_aligned>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	4e0f      	ldr	r6, [pc, #60]	@ (80078d8 <sbrk_aligned+0x40>)
 800789c:	460c      	mov	r4, r1
 800789e:	6831      	ldr	r1, [r6, #0]
 80078a0:	4605      	mov	r5, r0
 80078a2:	b911      	cbnz	r1, 80078aa <sbrk_aligned+0x12>
 80078a4:	f000 fba6 	bl	8007ff4 <_sbrk_r>
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 fba1 	bl	8007ff4 <_sbrk_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d103      	bne.n	80078be <sbrk_aligned+0x26>
 80078b6:	f04f 34ff 	mov.w	r4, #4294967295
 80078ba:	4620      	mov	r0, r4
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	1cc4      	adds	r4, r0, #3
 80078c0:	f024 0403 	bic.w	r4, r4, #3
 80078c4:	42a0      	cmp	r0, r4
 80078c6:	d0f8      	beq.n	80078ba <sbrk_aligned+0x22>
 80078c8:	1a21      	subs	r1, r4, r0
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 fb92 	bl	8007ff4 <_sbrk_r>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d1f2      	bne.n	80078ba <sbrk_aligned+0x22>
 80078d4:	e7ef      	b.n	80078b6 <sbrk_aligned+0x1e>
 80078d6:	bf00      	nop
 80078d8:	20025db8 	.word	0x20025db8

080078dc <_malloc_r>:
 80078dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e0:	1ccd      	adds	r5, r1, #3
 80078e2:	f025 0503 	bic.w	r5, r5, #3
 80078e6:	3508      	adds	r5, #8
 80078e8:	2d0c      	cmp	r5, #12
 80078ea:	bf38      	it	cc
 80078ec:	250c      	movcc	r5, #12
 80078ee:	2d00      	cmp	r5, #0
 80078f0:	4606      	mov	r6, r0
 80078f2:	db01      	blt.n	80078f8 <_malloc_r+0x1c>
 80078f4:	42a9      	cmp	r1, r5
 80078f6:	d904      	bls.n	8007902 <_malloc_r+0x26>
 80078f8:	230c      	movs	r3, #12
 80078fa:	6033      	str	r3, [r6, #0]
 80078fc:	2000      	movs	r0, #0
 80078fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007902:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079d8 <_malloc_r+0xfc>
 8007906:	f000 f869 	bl	80079dc <__malloc_lock>
 800790a:	f8d8 3000 	ldr.w	r3, [r8]
 800790e:	461c      	mov	r4, r3
 8007910:	bb44      	cbnz	r4, 8007964 <_malloc_r+0x88>
 8007912:	4629      	mov	r1, r5
 8007914:	4630      	mov	r0, r6
 8007916:	f7ff ffbf 	bl	8007898 <sbrk_aligned>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	4604      	mov	r4, r0
 800791e:	d158      	bne.n	80079d2 <_malloc_r+0xf6>
 8007920:	f8d8 4000 	ldr.w	r4, [r8]
 8007924:	4627      	mov	r7, r4
 8007926:	2f00      	cmp	r7, #0
 8007928:	d143      	bne.n	80079b2 <_malloc_r+0xd6>
 800792a:	2c00      	cmp	r4, #0
 800792c:	d04b      	beq.n	80079c6 <_malloc_r+0xea>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	4639      	mov	r1, r7
 8007932:	4630      	mov	r0, r6
 8007934:	eb04 0903 	add.w	r9, r4, r3
 8007938:	f000 fb5c 	bl	8007ff4 <_sbrk_r>
 800793c:	4581      	cmp	r9, r0
 800793e:	d142      	bne.n	80079c6 <_malloc_r+0xea>
 8007940:	6821      	ldr	r1, [r4, #0]
 8007942:	1a6d      	subs	r5, r5, r1
 8007944:	4629      	mov	r1, r5
 8007946:	4630      	mov	r0, r6
 8007948:	f7ff ffa6 	bl	8007898 <sbrk_aligned>
 800794c:	3001      	adds	r0, #1
 800794e:	d03a      	beq.n	80079c6 <_malloc_r+0xea>
 8007950:	6823      	ldr	r3, [r4, #0]
 8007952:	442b      	add	r3, r5
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	f8d8 3000 	ldr.w	r3, [r8]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	bb62      	cbnz	r2, 80079b8 <_malloc_r+0xdc>
 800795e:	f8c8 7000 	str.w	r7, [r8]
 8007962:	e00f      	b.n	8007984 <_malloc_r+0xa8>
 8007964:	6822      	ldr	r2, [r4, #0]
 8007966:	1b52      	subs	r2, r2, r5
 8007968:	d420      	bmi.n	80079ac <_malloc_r+0xd0>
 800796a:	2a0b      	cmp	r2, #11
 800796c:	d917      	bls.n	800799e <_malloc_r+0xc2>
 800796e:	1961      	adds	r1, r4, r5
 8007970:	42a3      	cmp	r3, r4
 8007972:	6025      	str	r5, [r4, #0]
 8007974:	bf18      	it	ne
 8007976:	6059      	strne	r1, [r3, #4]
 8007978:	6863      	ldr	r3, [r4, #4]
 800797a:	bf08      	it	eq
 800797c:	f8c8 1000 	streq.w	r1, [r8]
 8007980:	5162      	str	r2, [r4, r5]
 8007982:	604b      	str	r3, [r1, #4]
 8007984:	4630      	mov	r0, r6
 8007986:	f000 f82f 	bl	80079e8 <__malloc_unlock>
 800798a:	f104 000b 	add.w	r0, r4, #11
 800798e:	1d23      	adds	r3, r4, #4
 8007990:	f020 0007 	bic.w	r0, r0, #7
 8007994:	1ac2      	subs	r2, r0, r3
 8007996:	bf1c      	itt	ne
 8007998:	1a1b      	subne	r3, r3, r0
 800799a:	50a3      	strne	r3, [r4, r2]
 800799c:	e7af      	b.n	80078fe <_malloc_r+0x22>
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	bf0c      	ite	eq
 80079a4:	f8c8 2000 	streq.w	r2, [r8]
 80079a8:	605a      	strne	r2, [r3, #4]
 80079aa:	e7eb      	b.n	8007984 <_malloc_r+0xa8>
 80079ac:	4623      	mov	r3, r4
 80079ae:	6864      	ldr	r4, [r4, #4]
 80079b0:	e7ae      	b.n	8007910 <_malloc_r+0x34>
 80079b2:	463c      	mov	r4, r7
 80079b4:	687f      	ldr	r7, [r7, #4]
 80079b6:	e7b6      	b.n	8007926 <_malloc_r+0x4a>
 80079b8:	461a      	mov	r2, r3
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	42a3      	cmp	r3, r4
 80079be:	d1fb      	bne.n	80079b8 <_malloc_r+0xdc>
 80079c0:	2300      	movs	r3, #0
 80079c2:	6053      	str	r3, [r2, #4]
 80079c4:	e7de      	b.n	8007984 <_malloc_r+0xa8>
 80079c6:	230c      	movs	r3, #12
 80079c8:	6033      	str	r3, [r6, #0]
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 f80c 	bl	80079e8 <__malloc_unlock>
 80079d0:	e794      	b.n	80078fc <_malloc_r+0x20>
 80079d2:	6005      	str	r5, [r0, #0]
 80079d4:	e7d6      	b.n	8007984 <_malloc_r+0xa8>
 80079d6:	bf00      	nop
 80079d8:	20025dbc 	.word	0x20025dbc

080079dc <__malloc_lock>:
 80079dc:	4801      	ldr	r0, [pc, #4]	@ (80079e4 <__malloc_lock+0x8>)
 80079de:	f7ff bf01 	b.w	80077e4 <__retarget_lock_acquire_recursive>
 80079e2:	bf00      	nop
 80079e4:	20025db4 	.word	0x20025db4

080079e8 <__malloc_unlock>:
 80079e8:	4801      	ldr	r0, [pc, #4]	@ (80079f0 <__malloc_unlock+0x8>)
 80079ea:	f7ff befc 	b.w	80077e6 <__retarget_lock_release_recursive>
 80079ee:	bf00      	nop
 80079f0:	20025db4 	.word	0x20025db4

080079f4 <__ssputs_r>:
 80079f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079f8:	688e      	ldr	r6, [r1, #8]
 80079fa:	461f      	mov	r7, r3
 80079fc:	42be      	cmp	r6, r7
 80079fe:	680b      	ldr	r3, [r1, #0]
 8007a00:	4682      	mov	sl, r0
 8007a02:	460c      	mov	r4, r1
 8007a04:	4690      	mov	r8, r2
 8007a06:	d82d      	bhi.n	8007a64 <__ssputs_r+0x70>
 8007a08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a10:	d026      	beq.n	8007a60 <__ssputs_r+0x6c>
 8007a12:	6965      	ldr	r5, [r4, #20]
 8007a14:	6909      	ldr	r1, [r1, #16]
 8007a16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a1a:	eba3 0901 	sub.w	r9, r3, r1
 8007a1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a22:	1c7b      	adds	r3, r7, #1
 8007a24:	444b      	add	r3, r9
 8007a26:	106d      	asrs	r5, r5, #1
 8007a28:	429d      	cmp	r5, r3
 8007a2a:	bf38      	it	cc
 8007a2c:	461d      	movcc	r5, r3
 8007a2e:	0553      	lsls	r3, r2, #21
 8007a30:	d527      	bpl.n	8007a82 <__ssputs_r+0x8e>
 8007a32:	4629      	mov	r1, r5
 8007a34:	f7ff ff52 	bl	80078dc <_malloc_r>
 8007a38:	4606      	mov	r6, r0
 8007a3a:	b360      	cbz	r0, 8007a96 <__ssputs_r+0xa2>
 8007a3c:	6921      	ldr	r1, [r4, #16]
 8007a3e:	464a      	mov	r2, r9
 8007a40:	f7ff fed2 	bl	80077e8 <memcpy>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	6126      	str	r6, [r4, #16]
 8007a52:	6165      	str	r5, [r4, #20]
 8007a54:	444e      	add	r6, r9
 8007a56:	eba5 0509 	sub.w	r5, r5, r9
 8007a5a:	6026      	str	r6, [r4, #0]
 8007a5c:	60a5      	str	r5, [r4, #8]
 8007a5e:	463e      	mov	r6, r7
 8007a60:	42be      	cmp	r6, r7
 8007a62:	d900      	bls.n	8007a66 <__ssputs_r+0x72>
 8007a64:	463e      	mov	r6, r7
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	4632      	mov	r2, r6
 8007a6a:	4641      	mov	r1, r8
 8007a6c:	f000 faa8 	bl	8007fc0 <memmove>
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	1b9b      	subs	r3, r3, r6
 8007a74:	60a3      	str	r3, [r4, #8]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	4433      	add	r3, r6
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a82:	462a      	mov	r2, r5
 8007a84:	f000 fac6 	bl	8008014 <_realloc_r>
 8007a88:	4606      	mov	r6, r0
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d1e0      	bne.n	8007a50 <__ssputs_r+0x5c>
 8007a8e:	6921      	ldr	r1, [r4, #16]
 8007a90:	4650      	mov	r0, sl
 8007a92:	f7ff feb7 	bl	8007804 <_free_r>
 8007a96:	230c      	movs	r3, #12
 8007a98:	f8ca 3000 	str.w	r3, [sl]
 8007a9c:	89a3      	ldrh	r3, [r4, #12]
 8007a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	e7e9      	b.n	8007a7e <__ssputs_r+0x8a>
	...

08007aac <_svfiprintf_r>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	4698      	mov	r8, r3
 8007ab2:	898b      	ldrh	r3, [r1, #12]
 8007ab4:	061b      	lsls	r3, r3, #24
 8007ab6:	b09d      	sub	sp, #116	@ 0x74
 8007ab8:	4607      	mov	r7, r0
 8007aba:	460d      	mov	r5, r1
 8007abc:	4614      	mov	r4, r2
 8007abe:	d510      	bpl.n	8007ae2 <_svfiprintf_r+0x36>
 8007ac0:	690b      	ldr	r3, [r1, #16]
 8007ac2:	b973      	cbnz	r3, 8007ae2 <_svfiprintf_r+0x36>
 8007ac4:	2140      	movs	r1, #64	@ 0x40
 8007ac6:	f7ff ff09 	bl	80078dc <_malloc_r>
 8007aca:	6028      	str	r0, [r5, #0]
 8007acc:	6128      	str	r0, [r5, #16]
 8007ace:	b930      	cbnz	r0, 8007ade <_svfiprintf_r+0x32>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	b01d      	add	sp, #116	@ 0x74
 8007ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ade:	2340      	movs	r3, #64	@ 0x40
 8007ae0:	616b      	str	r3, [r5, #20]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae6:	2320      	movs	r3, #32
 8007ae8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007af0:	2330      	movs	r3, #48	@ 0x30
 8007af2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c90 <_svfiprintf_r+0x1e4>
 8007af6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007afa:	f04f 0901 	mov.w	r9, #1
 8007afe:	4623      	mov	r3, r4
 8007b00:	469a      	mov	sl, r3
 8007b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b06:	b10a      	cbz	r2, 8007b0c <_svfiprintf_r+0x60>
 8007b08:	2a25      	cmp	r2, #37	@ 0x25
 8007b0a:	d1f9      	bne.n	8007b00 <_svfiprintf_r+0x54>
 8007b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b10:	d00b      	beq.n	8007b2a <_svfiprintf_r+0x7e>
 8007b12:	465b      	mov	r3, fp
 8007b14:	4622      	mov	r2, r4
 8007b16:	4629      	mov	r1, r5
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff ff6b 	bl	80079f4 <__ssputs_r>
 8007b1e:	3001      	adds	r0, #1
 8007b20:	f000 80a7 	beq.w	8007c72 <_svfiprintf_r+0x1c6>
 8007b24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b26:	445a      	add	r2, fp
 8007b28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 809f 	beq.w	8007c72 <_svfiprintf_r+0x1c6>
 8007b34:	2300      	movs	r3, #0
 8007b36:	f04f 32ff 	mov.w	r2, #4294967295
 8007b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b3e:	f10a 0a01 	add.w	sl, sl, #1
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	9307      	str	r3, [sp, #28]
 8007b46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b4c:	4654      	mov	r4, sl
 8007b4e:	2205      	movs	r2, #5
 8007b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b54:	484e      	ldr	r0, [pc, #312]	@ (8007c90 <_svfiprintf_r+0x1e4>)
 8007b56:	f7f8 fb4b 	bl	80001f0 <memchr>
 8007b5a:	9a04      	ldr	r2, [sp, #16]
 8007b5c:	b9d8      	cbnz	r0, 8007b96 <_svfiprintf_r+0xea>
 8007b5e:	06d0      	lsls	r0, r2, #27
 8007b60:	bf44      	itt	mi
 8007b62:	2320      	movmi	r3, #32
 8007b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b68:	0711      	lsls	r1, r2, #28
 8007b6a:	bf44      	itt	mi
 8007b6c:	232b      	movmi	r3, #43	@ 0x2b
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b72:	f89a 3000 	ldrb.w	r3, [sl]
 8007b76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b78:	d015      	beq.n	8007ba6 <_svfiprintf_r+0xfa>
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	4654      	mov	r4, sl
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f04f 0c0a 	mov.w	ip, #10
 8007b84:	4621      	mov	r1, r4
 8007b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b8a:	3b30      	subs	r3, #48	@ 0x30
 8007b8c:	2b09      	cmp	r3, #9
 8007b8e:	d94b      	bls.n	8007c28 <_svfiprintf_r+0x17c>
 8007b90:	b1b0      	cbz	r0, 8007bc0 <_svfiprintf_r+0x114>
 8007b92:	9207      	str	r2, [sp, #28]
 8007b94:	e014      	b.n	8007bc0 <_svfiprintf_r+0x114>
 8007b96:	eba0 0308 	sub.w	r3, r0, r8
 8007b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	46a2      	mov	sl, r4
 8007ba4:	e7d2      	b.n	8007b4c <_svfiprintf_r+0xa0>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	1d19      	adds	r1, r3, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	9103      	str	r1, [sp, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bfbb      	ittet	lt
 8007bb2:	425b      	neglt	r3, r3
 8007bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007bb8:	9307      	strge	r3, [sp, #28]
 8007bba:	9307      	strlt	r3, [sp, #28]
 8007bbc:	bfb8      	it	lt
 8007bbe:	9204      	strlt	r2, [sp, #16]
 8007bc0:	7823      	ldrb	r3, [r4, #0]
 8007bc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bc4:	d10a      	bne.n	8007bdc <_svfiprintf_r+0x130>
 8007bc6:	7863      	ldrb	r3, [r4, #1]
 8007bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bca:	d132      	bne.n	8007c32 <_svfiprintf_r+0x186>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	9203      	str	r2, [sp, #12]
 8007bd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bd8:	3402      	adds	r4, #2
 8007bda:	9305      	str	r3, [sp, #20]
 8007bdc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ca0 <_svfiprintf_r+0x1f4>
 8007be0:	7821      	ldrb	r1, [r4, #0]
 8007be2:	2203      	movs	r2, #3
 8007be4:	4650      	mov	r0, sl
 8007be6:	f7f8 fb03 	bl	80001f0 <memchr>
 8007bea:	b138      	cbz	r0, 8007bfc <_svfiprintf_r+0x150>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	eba0 000a 	sub.w	r0, r0, sl
 8007bf2:	2240      	movs	r2, #64	@ 0x40
 8007bf4:	4082      	lsls	r2, r0
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	3401      	adds	r4, #1
 8007bfa:	9304      	str	r3, [sp, #16]
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	4824      	ldr	r0, [pc, #144]	@ (8007c94 <_svfiprintf_r+0x1e8>)
 8007c02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c06:	2206      	movs	r2, #6
 8007c08:	f7f8 faf2 	bl	80001f0 <memchr>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d036      	beq.n	8007c7e <_svfiprintf_r+0x1d2>
 8007c10:	4b21      	ldr	r3, [pc, #132]	@ (8007c98 <_svfiprintf_r+0x1ec>)
 8007c12:	bb1b      	cbnz	r3, 8007c5c <_svfiprintf_r+0x1b0>
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	3307      	adds	r3, #7
 8007c18:	f023 0307 	bic.w	r3, r3, #7
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c22:	4433      	add	r3, r6
 8007c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c26:	e76a      	b.n	8007afe <_svfiprintf_r+0x52>
 8007c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	2001      	movs	r0, #1
 8007c30:	e7a8      	b.n	8007b84 <_svfiprintf_r+0xd8>
 8007c32:	2300      	movs	r3, #0
 8007c34:	3401      	adds	r4, #1
 8007c36:	9305      	str	r3, [sp, #20]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f04f 0c0a 	mov.w	ip, #10
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c44:	3a30      	subs	r2, #48	@ 0x30
 8007c46:	2a09      	cmp	r2, #9
 8007c48:	d903      	bls.n	8007c52 <_svfiprintf_r+0x1a6>
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d0c6      	beq.n	8007bdc <_svfiprintf_r+0x130>
 8007c4e:	9105      	str	r1, [sp, #20]
 8007c50:	e7c4      	b.n	8007bdc <_svfiprintf_r+0x130>
 8007c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c56:	4604      	mov	r4, r0
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e7f0      	b.n	8007c3e <_svfiprintf_r+0x192>
 8007c5c:	ab03      	add	r3, sp, #12
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	462a      	mov	r2, r5
 8007c62:	4b0e      	ldr	r3, [pc, #56]	@ (8007c9c <_svfiprintf_r+0x1f0>)
 8007c64:	a904      	add	r1, sp, #16
 8007c66:	4638      	mov	r0, r7
 8007c68:	f3af 8000 	nop.w
 8007c6c:	1c42      	adds	r2, r0, #1
 8007c6e:	4606      	mov	r6, r0
 8007c70:	d1d6      	bne.n	8007c20 <_svfiprintf_r+0x174>
 8007c72:	89ab      	ldrh	r3, [r5, #12]
 8007c74:	065b      	lsls	r3, r3, #25
 8007c76:	f53f af2d 	bmi.w	8007ad4 <_svfiprintf_r+0x28>
 8007c7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c7c:	e72c      	b.n	8007ad8 <_svfiprintf_r+0x2c>
 8007c7e:	ab03      	add	r3, sp, #12
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4b05      	ldr	r3, [pc, #20]	@ (8007c9c <_svfiprintf_r+0x1f0>)
 8007c86:	a904      	add	r1, sp, #16
 8007c88:	4638      	mov	r0, r7
 8007c8a:	f000 f879 	bl	8007d80 <_printf_i>
 8007c8e:	e7ed      	b.n	8007c6c <_svfiprintf_r+0x1c0>
 8007c90:	08009288 	.word	0x08009288
 8007c94:	08009292 	.word	0x08009292
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	080079f5 	.word	0x080079f5
 8007ca0:	0800928e 	.word	0x0800928e

08007ca4 <_printf_common>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	4616      	mov	r6, r2
 8007caa:	4698      	mov	r8, r3
 8007cac:	688a      	ldr	r2, [r1, #8]
 8007cae:	690b      	ldr	r3, [r1, #16]
 8007cb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	bfb8      	it	lt
 8007cb8:	4613      	movlt	r3, r2
 8007cba:	6033      	str	r3, [r6, #0]
 8007cbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cc0:	4607      	mov	r7, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b10a      	cbz	r2, 8007cca <_printf_common+0x26>
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	6033      	str	r3, [r6, #0]
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	0699      	lsls	r1, r3, #26
 8007cce:	bf42      	ittt	mi
 8007cd0:	6833      	ldrmi	r3, [r6, #0]
 8007cd2:	3302      	addmi	r3, #2
 8007cd4:	6033      	strmi	r3, [r6, #0]
 8007cd6:	6825      	ldr	r5, [r4, #0]
 8007cd8:	f015 0506 	ands.w	r5, r5, #6
 8007cdc:	d106      	bne.n	8007cec <_printf_common+0x48>
 8007cde:	f104 0a19 	add.w	sl, r4, #25
 8007ce2:	68e3      	ldr	r3, [r4, #12]
 8007ce4:	6832      	ldr	r2, [r6, #0]
 8007ce6:	1a9b      	subs	r3, r3, r2
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dc26      	bgt.n	8007d3a <_printf_common+0x96>
 8007cec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cf0:	6822      	ldr	r2, [r4, #0]
 8007cf2:	3b00      	subs	r3, #0
 8007cf4:	bf18      	it	ne
 8007cf6:	2301      	movne	r3, #1
 8007cf8:	0692      	lsls	r2, r2, #26
 8007cfa:	d42b      	bmi.n	8007d54 <_printf_common+0xb0>
 8007cfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d00:	4641      	mov	r1, r8
 8007d02:	4638      	mov	r0, r7
 8007d04:	47c8      	blx	r9
 8007d06:	3001      	adds	r0, #1
 8007d08:	d01e      	beq.n	8007d48 <_printf_common+0xa4>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	f003 0306 	and.w	r3, r3, #6
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	bf02      	ittt	eq
 8007d16:	68e5      	ldreq	r5, [r4, #12]
 8007d18:	6833      	ldreq	r3, [r6, #0]
 8007d1a:	1aed      	subeq	r5, r5, r3
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	bf0c      	ite	eq
 8007d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d24:	2500      	movne	r5, #0
 8007d26:	4293      	cmp	r3, r2
 8007d28:	bfc4      	itt	gt
 8007d2a:	1a9b      	subgt	r3, r3, r2
 8007d2c:	18ed      	addgt	r5, r5, r3
 8007d2e:	2600      	movs	r6, #0
 8007d30:	341a      	adds	r4, #26
 8007d32:	42b5      	cmp	r5, r6
 8007d34:	d11a      	bne.n	8007d6c <_printf_common+0xc8>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e008      	b.n	8007d4c <_printf_common+0xa8>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4652      	mov	r2, sl
 8007d3e:	4641      	mov	r1, r8
 8007d40:	4638      	mov	r0, r7
 8007d42:	47c8      	blx	r9
 8007d44:	3001      	adds	r0, #1
 8007d46:	d103      	bne.n	8007d50 <_printf_common+0xac>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d50:	3501      	adds	r5, #1
 8007d52:	e7c6      	b.n	8007ce2 <_printf_common+0x3e>
 8007d54:	18e1      	adds	r1, r4, r3
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	2030      	movs	r0, #48	@ 0x30
 8007d5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d5e:	4422      	add	r2, r4
 8007d60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d68:	3302      	adds	r3, #2
 8007d6a:	e7c7      	b.n	8007cfc <_printf_common+0x58>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	4622      	mov	r2, r4
 8007d70:	4641      	mov	r1, r8
 8007d72:	4638      	mov	r0, r7
 8007d74:	47c8      	blx	r9
 8007d76:	3001      	adds	r0, #1
 8007d78:	d0e6      	beq.n	8007d48 <_printf_common+0xa4>
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	e7d9      	b.n	8007d32 <_printf_common+0x8e>
	...

08007d80 <_printf_i>:
 8007d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d84:	7e0f      	ldrb	r7, [r1, #24]
 8007d86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d88:	2f78      	cmp	r7, #120	@ 0x78
 8007d8a:	4691      	mov	r9, r2
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	460c      	mov	r4, r1
 8007d90:	469a      	mov	sl, r3
 8007d92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d96:	d807      	bhi.n	8007da8 <_printf_i+0x28>
 8007d98:	2f62      	cmp	r7, #98	@ 0x62
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x32>
 8007d9c:	2f00      	cmp	r7, #0
 8007d9e:	f000 80d2 	beq.w	8007f46 <_printf_i+0x1c6>
 8007da2:	2f58      	cmp	r7, #88	@ 0x58
 8007da4:	f000 80b9 	beq.w	8007f1a <_printf_i+0x19a>
 8007da8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007db0:	e03a      	b.n	8007e28 <_printf_i+0xa8>
 8007db2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007db6:	2b15      	cmp	r3, #21
 8007db8:	d8f6      	bhi.n	8007da8 <_printf_i+0x28>
 8007dba:	a101      	add	r1, pc, #4	@ (adr r1, 8007dc0 <_printf_i+0x40>)
 8007dbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e2d 	.word	0x08007e2d
 8007dc8:	08007da9 	.word	0x08007da9
 8007dcc:	08007da9 	.word	0x08007da9
 8007dd0:	08007da9 	.word	0x08007da9
 8007dd4:	08007da9 	.word	0x08007da9
 8007dd8:	08007e2d 	.word	0x08007e2d
 8007ddc:	08007da9 	.word	0x08007da9
 8007de0:	08007da9 	.word	0x08007da9
 8007de4:	08007da9 	.word	0x08007da9
 8007de8:	08007da9 	.word	0x08007da9
 8007dec:	08007f2d 	.word	0x08007f2d
 8007df0:	08007e57 	.word	0x08007e57
 8007df4:	08007ee7 	.word	0x08007ee7
 8007df8:	08007da9 	.word	0x08007da9
 8007dfc:	08007da9 	.word	0x08007da9
 8007e00:	08007f4f 	.word	0x08007f4f
 8007e04:	08007da9 	.word	0x08007da9
 8007e08:	08007e57 	.word	0x08007e57
 8007e0c:	08007da9 	.word	0x08007da9
 8007e10:	08007da9 	.word	0x08007da9
 8007e14:	08007eef 	.word	0x08007eef
 8007e18:	6833      	ldr	r3, [r6, #0]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6032      	str	r2, [r6, #0]
 8007e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e09d      	b.n	8007f68 <_printf_i+0x1e8>
 8007e2c:	6833      	ldr	r3, [r6, #0]
 8007e2e:	6820      	ldr	r0, [r4, #0]
 8007e30:	1d19      	adds	r1, r3, #4
 8007e32:	6031      	str	r1, [r6, #0]
 8007e34:	0606      	lsls	r6, r0, #24
 8007e36:	d501      	bpl.n	8007e3c <_printf_i+0xbc>
 8007e38:	681d      	ldr	r5, [r3, #0]
 8007e3a:	e003      	b.n	8007e44 <_printf_i+0xc4>
 8007e3c:	0645      	lsls	r5, r0, #25
 8007e3e:	d5fb      	bpl.n	8007e38 <_printf_i+0xb8>
 8007e40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	da03      	bge.n	8007e50 <_printf_i+0xd0>
 8007e48:	232d      	movs	r3, #45	@ 0x2d
 8007e4a:	426d      	negs	r5, r5
 8007e4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e50:	4859      	ldr	r0, [pc, #356]	@ (8007fb8 <_printf_i+0x238>)
 8007e52:	230a      	movs	r3, #10
 8007e54:	e011      	b.n	8007e7a <_printf_i+0xfa>
 8007e56:	6821      	ldr	r1, [r4, #0]
 8007e58:	6833      	ldr	r3, [r6, #0]
 8007e5a:	0608      	lsls	r0, r1, #24
 8007e5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e60:	d402      	bmi.n	8007e68 <_printf_i+0xe8>
 8007e62:	0649      	lsls	r1, r1, #25
 8007e64:	bf48      	it	mi
 8007e66:	b2ad      	uxthmi	r5, r5
 8007e68:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e6a:	4853      	ldr	r0, [pc, #332]	@ (8007fb8 <_printf_i+0x238>)
 8007e6c:	6033      	str	r3, [r6, #0]
 8007e6e:	bf14      	ite	ne
 8007e70:	230a      	movne	r3, #10
 8007e72:	2308      	moveq	r3, #8
 8007e74:	2100      	movs	r1, #0
 8007e76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e7a:	6866      	ldr	r6, [r4, #4]
 8007e7c:	60a6      	str	r6, [r4, #8]
 8007e7e:	2e00      	cmp	r6, #0
 8007e80:	bfa2      	ittt	ge
 8007e82:	6821      	ldrge	r1, [r4, #0]
 8007e84:	f021 0104 	bicge.w	r1, r1, #4
 8007e88:	6021      	strge	r1, [r4, #0]
 8007e8a:	b90d      	cbnz	r5, 8007e90 <_printf_i+0x110>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	d04b      	beq.n	8007f28 <_printf_i+0x1a8>
 8007e90:	4616      	mov	r6, r2
 8007e92:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e96:	fb03 5711 	mls	r7, r3, r1, r5
 8007e9a:	5dc7      	ldrb	r7, [r0, r7]
 8007e9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ea0:	462f      	mov	r7, r5
 8007ea2:	42bb      	cmp	r3, r7
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	d9f4      	bls.n	8007e92 <_printf_i+0x112>
 8007ea8:	2b08      	cmp	r3, #8
 8007eaa:	d10b      	bne.n	8007ec4 <_printf_i+0x144>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	07df      	lsls	r7, r3, #31
 8007eb0:	d508      	bpl.n	8007ec4 <_printf_i+0x144>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6861      	ldr	r1, [r4, #4]
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	bfde      	ittt	le
 8007eba:	2330      	movle	r3, #48	@ 0x30
 8007ebc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ec0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ec4:	1b92      	subs	r2, r2, r6
 8007ec6:	6122      	str	r2, [r4, #16]
 8007ec8:	f8cd a000 	str.w	sl, [sp]
 8007ecc:	464b      	mov	r3, r9
 8007ece:	aa03      	add	r2, sp, #12
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7ff fee6 	bl	8007ca4 <_printf_common>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d14a      	bne.n	8007f72 <_printf_i+0x1f2>
 8007edc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee0:	b004      	add	sp, #16
 8007ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	f043 0320 	orr.w	r3, r3, #32
 8007eec:	6023      	str	r3, [r4, #0]
 8007eee:	4833      	ldr	r0, [pc, #204]	@ (8007fbc <_printf_i+0x23c>)
 8007ef0:	2778      	movs	r7, #120	@ 0x78
 8007ef2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	6831      	ldr	r1, [r6, #0]
 8007efa:	061f      	lsls	r7, r3, #24
 8007efc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f00:	d402      	bmi.n	8007f08 <_printf_i+0x188>
 8007f02:	065f      	lsls	r7, r3, #25
 8007f04:	bf48      	it	mi
 8007f06:	b2ad      	uxthmi	r5, r5
 8007f08:	6031      	str	r1, [r6, #0]
 8007f0a:	07d9      	lsls	r1, r3, #31
 8007f0c:	bf44      	itt	mi
 8007f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8007f12:	6023      	strmi	r3, [r4, #0]
 8007f14:	b11d      	cbz	r5, 8007f1e <_printf_i+0x19e>
 8007f16:	2310      	movs	r3, #16
 8007f18:	e7ac      	b.n	8007e74 <_printf_i+0xf4>
 8007f1a:	4827      	ldr	r0, [pc, #156]	@ (8007fb8 <_printf_i+0x238>)
 8007f1c:	e7e9      	b.n	8007ef2 <_printf_i+0x172>
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	f023 0320 	bic.w	r3, r3, #32
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	e7f6      	b.n	8007f16 <_printf_i+0x196>
 8007f28:	4616      	mov	r6, r2
 8007f2a:	e7bd      	b.n	8007ea8 <_printf_i+0x128>
 8007f2c:	6833      	ldr	r3, [r6, #0]
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	6961      	ldr	r1, [r4, #20]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6030      	str	r0, [r6, #0]
 8007f36:	062e      	lsls	r6, r5, #24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0x1c0>
 8007f3c:	6019      	str	r1, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0x1c6>
 8007f40:	0668      	lsls	r0, r5, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0x1bc>
 8007f44:	8019      	strh	r1, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	4616      	mov	r6, r2
 8007f4c:	e7bc      	b.n	8007ec8 <_printf_i+0x148>
 8007f4e:	6833      	ldr	r3, [r6, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	6032      	str	r2, [r6, #0]
 8007f54:	681e      	ldr	r6, [r3, #0]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7f8 f948 	bl	80001f0 <memchr>
 8007f60:	b108      	cbz	r0, 8007f66 <_printf_i+0x1e6>
 8007f62:	1b80      	subs	r0, r0, r6
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f70:	e7aa      	b.n	8007ec8 <_printf_i+0x148>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	4632      	mov	r2, r6
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0ad      	beq.n	8007edc <_printf_i+0x15c>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	079b      	lsls	r3, r3, #30
 8007f84:	d413      	bmi.n	8007fae <_printf_i+0x22e>
 8007f86:	68e0      	ldr	r0, [r4, #12]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	bfb8      	it	lt
 8007f8e:	4618      	movlt	r0, r3
 8007f90:	e7a6      	b.n	8007ee0 <_printf_i+0x160>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4632      	mov	r2, r6
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d09d      	beq.n	8007edc <_printf_i+0x15c>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	9903      	ldr	r1, [sp, #12]
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dcf2      	bgt.n	8007f92 <_printf_i+0x212>
 8007fac:	e7eb      	b.n	8007f86 <_printf_i+0x206>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f104 0619 	add.w	r6, r4, #25
 8007fb4:	e7f5      	b.n	8007fa2 <_printf_i+0x222>
 8007fb6:	bf00      	nop
 8007fb8:	08009299 	.word	0x08009299
 8007fbc:	080092aa 	.word	0x080092aa

08007fc0 <memmove>:
 8007fc0:	4288      	cmp	r0, r1
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	eb01 0402 	add.w	r4, r1, r2
 8007fc8:	d902      	bls.n	8007fd0 <memmove+0x10>
 8007fca:	4284      	cmp	r4, r0
 8007fcc:	4623      	mov	r3, r4
 8007fce:	d807      	bhi.n	8007fe0 <memmove+0x20>
 8007fd0:	1e43      	subs	r3, r0, #1
 8007fd2:	42a1      	cmp	r1, r4
 8007fd4:	d008      	beq.n	8007fe8 <memmove+0x28>
 8007fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fde:	e7f8      	b.n	8007fd2 <memmove+0x12>
 8007fe0:	4402      	add	r2, r0
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	428a      	cmp	r2, r1
 8007fe6:	d100      	bne.n	8007fea <memmove+0x2a>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ff2:	e7f7      	b.n	8007fe4 <memmove+0x24>

08007ff4 <_sbrk_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	@ (8008010 <_sbrk_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7fa ff06 	bl	8002e10 <_sbrk>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_sbrk_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_sbrk_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	20025db0 	.word	0x20025db0

08008014 <_realloc_r>:
 8008014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008018:	4680      	mov	r8, r0
 800801a:	4615      	mov	r5, r2
 800801c:	460c      	mov	r4, r1
 800801e:	b921      	cbnz	r1, 800802a <_realloc_r+0x16>
 8008020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008024:	4611      	mov	r1, r2
 8008026:	f7ff bc59 	b.w	80078dc <_malloc_r>
 800802a:	b92a      	cbnz	r2, 8008038 <_realloc_r+0x24>
 800802c:	f7ff fbea 	bl	8007804 <_free_r>
 8008030:	2400      	movs	r4, #0
 8008032:	4620      	mov	r0, r4
 8008034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008038:	f000 f81a 	bl	8008070 <_malloc_usable_size_r>
 800803c:	4285      	cmp	r5, r0
 800803e:	4606      	mov	r6, r0
 8008040:	d802      	bhi.n	8008048 <_realloc_r+0x34>
 8008042:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008046:	d8f4      	bhi.n	8008032 <_realloc_r+0x1e>
 8008048:	4629      	mov	r1, r5
 800804a:	4640      	mov	r0, r8
 800804c:	f7ff fc46 	bl	80078dc <_malloc_r>
 8008050:	4607      	mov	r7, r0
 8008052:	2800      	cmp	r0, #0
 8008054:	d0ec      	beq.n	8008030 <_realloc_r+0x1c>
 8008056:	42b5      	cmp	r5, r6
 8008058:	462a      	mov	r2, r5
 800805a:	4621      	mov	r1, r4
 800805c:	bf28      	it	cs
 800805e:	4632      	movcs	r2, r6
 8008060:	f7ff fbc2 	bl	80077e8 <memcpy>
 8008064:	4621      	mov	r1, r4
 8008066:	4640      	mov	r0, r8
 8008068:	f7ff fbcc 	bl	8007804 <_free_r>
 800806c:	463c      	mov	r4, r7
 800806e:	e7e0      	b.n	8008032 <_realloc_r+0x1e>

08008070 <_malloc_usable_size_r>:
 8008070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008074:	1f18      	subs	r0, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	bfbc      	itt	lt
 800807a:	580b      	ldrlt	r3, [r1, r0]
 800807c:	18c0      	addlt	r0, r0, r3
 800807e:	4770      	bx	lr

08008080 <_init>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr

0800808c <_fini>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	bf00      	nop
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr
